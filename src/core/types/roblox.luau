-- Luau code generated by types-gen.luau
--!strict
local datatypes = require("../../datatypes")
local enum = require("./roblox_enums")

export type Enums = enum.Enums

export type Object = {
    ClassName: string,
    GetPropertyChangedSignal: (self: Object, property: string) -> any,
    IsA: (self: Object, className: string) -> boolean,
}

export type Capture = Object & {
}

export type ScreenshotCapture = Capture & {
}

export type ConfigSnapshot = Object & {
    Error: enum.Enum_ConfigSnapshotErrorState,
    Outdated: boolean,
    GetValue: (self: ConfigSnapshot, key: string, defaultValue: any) -> any,
    GetValueChangedSignal: (self: ConfigSnapshot, key: string) -> any,
    Refresh: (self: ConfigSnapshot) -> (),
}

export type EditableImage = Object & {
    ImageData: buffer,
    IsReplicatedCopy: boolean,
    Size: datatypes.Vector2,
    Destroy: (self: EditableImage) -> (),
    DrawCircle: (self: EditableImage, center: datatypes.Vector2, radius: number, color: datatypes.Color3, transparency: number, combineType: enum.Enum_ImageCombineType) -> (),
    DrawImage: (self: EditableImage, position: datatypes.Vector2, image: EditableImage, combineType: enum.Enum_ImageCombineType) -> (),
    DrawImageProjected: (self: EditableImage, mesh: EditableMesh, projection: {[string]: any}, brushConfig: {[string]: any}) -> (),
    DrawImageTransformed: (self: EditableImage, position: datatypes.Vector2, scale: datatypes.Vector2, rotation: number, image: EditableImage, options: {[string]: any}) -> (),
    DrawLine: (self: EditableImage, p1: datatypes.Vector2, p2: datatypes.Vector2, color: datatypes.Color3, transparency: number, combineType: enum.Enum_ImageCombineType) -> (),
    DrawRectangle: (self: EditableImage, position: datatypes.Vector2, size: datatypes.Vector2, color: datatypes.Color3, transparency: number, combineType: enum.Enum_ImageCombineType) -> (),
    DrawTriangle: (self: EditableImage, p1: datatypes.Vector2, p2: datatypes.Vector2, p3: datatypes.Vector2, color: datatypes.Color3, transparency: number) -> (),
    ReadPixelsBuffer: (self: EditableImage, position: datatypes.Vector2, size: datatypes.Vector2) -> any,
    WritePixelsBuffer: (self: EditableImage, position: datatypes.Vector2, size: datatypes.Vector2, buffer: any) -> (),
}

export type EditableMesh = Object & {
    FixedSize: boolean,
    IsReplicatedCopy: boolean,
    SkinningEnabled: boolean,
    AddColor: (self: EditableMesh, color: datatypes.Color3, alpha: number) -> buffer,
    AddNormal: (self: EditableMesh, normal: datatypes.Vector3?) -> buffer,
    AddTriangle: (self: EditableMesh, vertexId0: buffer, vertexId1: buffer, vertexId2: buffer) -> buffer,
    AddUV: (self: EditableMesh, uv: datatypes.Vector2) -> buffer,
    AddVertex: (self: EditableMesh, p: datatypes.Vector3) -> buffer,
    Destroy: (self: EditableMesh) -> (),
    FindClosestPointOnSurface: (self: EditableMesh, point: datatypes.Vector3) -> ...any,
    FindClosestVertex: (self: EditableMesh, toThisPoint: datatypes.Vector3) -> buffer,
    FindVerticesWithinSphere: (self: EditableMesh, center: datatypes.Vector3, radius: number) -> {any},
    GetAdjacentFaces: (self: EditableMesh, faceId: buffer) -> {any},
    GetAdjacentVertices: (self: EditableMesh, vertexId: buffer) -> {any},
    GetCenter: (self: EditableMesh) -> datatypes.Vector3,
    GetColor: (self: EditableMesh, colorId: buffer) -> datatypes.Color3?,
    GetColorAlpha: (self: EditableMesh, colorId: buffer) -> number,
    GetColors: (self: EditableMesh) -> {any},
    GetFaceColors: (self: EditableMesh, faceId: buffer) -> {any},
    GetFaceNormals: (self: EditableMesh, faceId: buffer) -> {any},
    GetFaceUVs: (self: EditableMesh, faceId: buffer) -> {any},
    GetFaceVertices: (self: EditableMesh, faceId: buffer) -> {any},
    GetFaces: (self: EditableMesh) -> {any},
    GetFacesWithColor: (self: EditableMesh, colorId: buffer) -> {any},
    GetFacesWithNormal: (self: EditableMesh, normalId: buffer) -> {any},
    GetFacesWithUV: (self: EditableMesh, uvId: buffer) -> {any},
    GetNormal: (self: EditableMesh, normalId: buffer) -> datatypes.Vector3?,
    GetNormals: (self: EditableMesh) -> {any},
    GetPosition: (self: EditableMesh, vertexId: buffer) -> datatypes.Vector3,
    GetSize: (self: EditableMesh) -> datatypes.Vector3,
    GetUV: (self: EditableMesh, uvId: buffer) -> datatypes.Vector2?,
    GetUVs: (self: EditableMesh) -> {any},
    GetVertexColors: (self: EditableMesh, vertexId: buffer) -> {any},
    GetVertexFaceColor: (self: EditableMesh, vertexId: buffer, faceId: buffer) -> buffer,
    GetVertexFaceNormal: (self: EditableMesh, vertexId: buffer, faceId: buffer) -> buffer,
    GetVertexFaceUV: (self: EditableMesh, vertexId: buffer, faceId: buffer) -> buffer,
    GetVertexFaces: (self: EditableMesh, vertexId: buffer) -> {any},
    GetVertexNormals: (self: EditableMesh, vertexId: buffer) -> {any},
    GetVertexUVs: (self: EditableMesh, vertexId: buffer) -> {any},
    GetVertices: (self: EditableMesh) -> {any},
    GetVerticesWithColor: (self: EditableMesh, colorId: buffer) -> {any},
    GetVerticesWithNormal: (self: EditableMesh, normalId: buffer) -> {any},
    GetVerticesWithUV: (self: EditableMesh, uvId: buffer) -> {any},
    IdDebugString: (self: EditableMesh, id: buffer) -> string,
    MergeVertices: (self: EditableMesh, mergeTolerance: number) -> any,
    RaycastLocal: (self: EditableMesh, origin: datatypes.Vector3, direction: datatypes.Vector3) -> ...any,
    RemoveFace: (self: EditableMesh, faceId: buffer) -> (),
    RemoveUnused: (self: EditableMesh) -> {any},
    ResetNormal: (self: EditableMesh, normalId: buffer) -> (),
    SetColor: (self: EditableMesh, colorId: buffer, color: datatypes.Color3) -> (),
    SetColorAlpha: (self: EditableMesh, colorId: buffer, alpha: number) -> (),
    SetFaceColors: (self: EditableMesh, faceId: buffer, ids: {any}) -> (),
    SetFaceNormals: (self: EditableMesh, faceId: buffer, ids: {any}) -> (),
    SetFaceUVs: (self: EditableMesh, faceId: buffer, ids: {any}) -> (),
    SetFaceVertices: (self: EditableMesh, faceId: buffer, ids: {any}) -> (),
    SetNormal: (self: EditableMesh, normalId: buffer, normal: datatypes.Vector3) -> (),
    SetPosition: (self: EditableMesh, vertexId: buffer, p: datatypes.Vector3) -> (),
    SetUV: (self: EditableMesh, uvId: buffer, uv: datatypes.Vector2) -> (),
    SetVertexFaceColor: (self: EditableMesh, vertexId: buffer, faceId: buffer, colorId: buffer) -> (),
    SetVertexFaceNormal: (self: EditableMesh, vertexId: buffer, faceId: buffer, normalId: buffer) -> (),
    SetVertexFaceUV: (self: EditableMesh, vertexId: buffer, faceId: buffer, uvId: buffer) -> (),
    Triangulate: (self: EditableMesh) -> (),
}

export type Instance = Object & {
    Archivable: boolean,
    Attributes: string,
    AttributesReplicate: string,
    AttributesSerialize: buffer,
    DefinesCapabilities: boolean,
    Name: string,
    Parent: any,
    PropertyStatusStudio: enum.Enum_PropertyStatus,
    RobloxLocked: boolean,
    Sandboxed: boolean,
    SourceAssetId: buffer,
    Tags: buffer,
    numExpectedDirectChildren: number,
    AddTag: (self: Instance, tag: string) -> (),
    ClearAllChildren: (self: Instance) -> (),
    Clone: (self: Instance) -> any,
    Destroy: (self: Instance) -> (),
    FindFirstAncestor: (self: Instance, name: string) -> any,
    FindFirstAncestorOfClass: (self: Instance, className: string) -> any,
    FindFirstAncestorWhichIsA: (self: Instance, className: string) -> any,
    FindFirstChild: (self: Instance, name: string, recursive: boolean) -> any,
    FindFirstChildOfClass: (self: Instance, className: string) -> any,
    FindFirstChildWhichIsA: (self: Instance, className: string, recursive: boolean) -> any,
    FindFirstDescendant: (self: Instance, name: string) -> any,
    GetActor: (self: Instance) -> Actor,
    GetAttribute: (self: Instance, attribute: string) -> any,
    GetAttributeChangedSignal: (self: Instance, attribute: string) -> any,
    GetAttributes: (self: Instance) -> {[string]: any},
    GetChildren: (self: Instance) -> any,
    GetDebugId: (self: Instance, scopeLength: number) -> string,
    GetDescendants: (self: Instance) -> {any},
    GetFullName: (self: Instance) -> string,
    GetStyled: (self: Instance, name: string) -> any,
    GetStyledPropertyChangedSignal: (self: Instance, property: string) -> any,
    GetTags: (self: Instance) -> {any},
    HasTag: (self: Instance, tag: string) -> boolean,
    IsAncestorOf: (self: Instance, descendant: any) -> boolean,
    IsDescendantOf: (self: Instance, ancestor: any) -> boolean,
    IsPropertyModified: (self: Instance, property: string) -> boolean,
    RemoveTag: (self: Instance, tag: string) -> (),
    ResetPropertyToDefault: (self: Instance, property: string) -> (),
    SetAttribute: (self: Instance, attribute: string, value: any) -> (),
    WaitForChild: (self: Instance, childName: string, timeOut: number) -> any,
}

export type AccessoryDescription = Instance & {
    AccessoryType: enum.Enum_AccessoryType,
    AssetId: buffer,
    Instance: any,
    IsLayered: boolean,
    Order: number,
    Position: datatypes.Vector3,
    Puffiness: number,
    Rotation: datatypes.Vector3,
    Scale: datatypes.Vector3,
    GetAppliedInstance: (self: AccessoryDescription) -> any,
}

export type AccountService = Instance & {
    DeviceAccessTokenAvailable: (self: AccountService) -> boolean,
    DeviceIntegrityAvailable: (self: AccountService) -> boolean,
    GetDeviceIntegrityToken: (self: AccountService, data: string) -> string,
    GetCredentialsHeaders: (self: AccountService) -> string,
    GetDeviceAccessToken: (self: AccountService) -> string,
    GetDeviceIntegrityTokenYield: (self: AccountService, data: string) -> string,
}

export type Accoutrement = Instance & {
    AttachmentForward: datatypes.Vector3,
    AttachmentPoint: datatypes.CFrame,
    AttachmentPos: datatypes.Vector3,
    AttachmentRight: datatypes.Vector3,
    AttachmentUp: datatypes.Vector3,
    BackendAccoutrementState: number,
}

export type Accessory = Accoutrement & {
    AccessoryType: enum.Enum_AccessoryType,
}

export type Hat = Accoutrement & {
}

export type AchievementService = Instance & {
    IsAvailable: (self: AchievementService) -> boolean,
    GrantAchievement: (self: AchievementService, achievementName: string) -> boolean,
    HasAchieved: (self: AchievementService, achievementName: string) -> boolean,
}

export type ActivityHistoryEventService = Instance & {
}

export type AdPortal = Instance & {
    PortalInvalidReason: string,
    PortalVersion: buffer,
    Status: enum.Enum_AdUnitStatus,
    TeleportConfirmed: (self: AdPortal, placeId: buffer, player: Player) -> (),
    TeleportRejected: (self: AdPortal, shouldCooldown: boolean, rejectedByDistance: boolean) -> (),
}

export type AdService = Instance & {
    CreateAdRewardFromDevProductId: (self: AdService, devProductId: buffer) -> any,
    GetAdTeleportInfo: (self: AdService) -> ...any,
    GetReportAdInfo: (self: AdService) -> {any},
    HandleWhyThisAdClicked: (self: AdService, advertiserName: string, payerName: string) -> (),
    HideEudsaDisclosure: (self: AdService) -> (),
    OnDemandVideoCompleteFromUI: (self: AdService, result: enum.Enum_ShowAdResult, encryptedAdTrackingData: string, encryptionMetadata: string, rewardDetails: string) -> (),
    ReturnToPublisherExperience: (self: AdService, adTeleportMethod: enum.Enum_AdTeleportMethod) -> (),
    SetAdGuiInteractivityHandlerInitialized: (self: AdService) -> (),
    GetAdAvailabilityNowAsync: (self: AdService, adFormat: enum.Enum_AdFormat) -> any,
    ShowRewardedVideoAdAsync: (self: AdService, player: Player, reward: any) -> enum.Enum_ShowAdResult,
}

export type AdvancedDragger = Instance & {
}

export type AnalyticsService = Instance & {
    LogCustomEvent: (self: AnalyticsService, player: Player, eventName: string, value: number, customFields: {[string]: any}) -> (),
    LogEconomyEvent: (self: AnalyticsService, player: Player, flowType: enum.Enum_AnalyticsEconomyFlowType, currencyType: string, amount: number, endingBalance: number, transactionType: string, itemSku: string, customFields: {[string]: any}) -> (),
    LogFunnelStepEvent: (self: AnalyticsService, player: Player, funnelName: string, funnelSessionId: string, step: number, stepName: string, customFields: {[string]: any}) -> (),
    LogOnboardingFunnelStepEvent: (self: AnalyticsService, player: Player, step: number, stepName: string, customFields: {[string]: any}) -> (),
    LogProgressionCompleteEvent: (self: AnalyticsService, player: Player, progressionPathName: string, level: number, levelName: string, customFields: {[string]: any}) -> (),
    LogProgressionEvent: (self: AnalyticsService, player: Player, progressionPathName: string, status: enum.Enum_AnalyticsProgressionType, level: number, levelName: string, customFields: {[string]: any}) -> (),
    LogProgressionFailEvent: (self: AnalyticsService, player: Player, progressionPathName: string, level: number, levelName: string, customFields: {[string]: any}) -> (),
    LogProgressionStartEvent: (self: AnalyticsService, player: Player, progressionPathName: string, level: number, levelName: string, customFields: {[string]: any}) -> (),
}

export type Animation = Instance & {
    AnimationId: any,
}

export type AnimationClip = Instance & {
    Guid: string,
    GuidBinaryString: buffer,
    Loop: boolean,
    Priority: enum.Enum_AnimationPriority,
}

export type CurveAnimation = AnimationClip & {
}

export type KeyframeSequence = AnimationClip & {
    AuthoredHipHeight: number,
    AddKeyframe: (self: KeyframeSequence, keyframe: any) -> (),
    GetKeyframes: (self: KeyframeSequence) -> any,
    RemoveKeyframe: (self: KeyframeSequence, keyframe: any) -> (),
}

export type AnimationClipProvider = Instance & {
    GetMemStats: (self: AnimationClipProvider) -> {[string]: any},
    RegisterActiveAnimationClip: (self: AnimationClipProvider, animationClip: AnimationClip) -> any,
    RegisterAnimationClip: (self: AnimationClipProvider, animationClip: AnimationClip) -> any,
    GetAnimationClipAsync: (self: AnimationClipProvider, assetId: any) -> AnimationClip,
    GetAnimations: (self: AnimationClipProvider, userId: buffer) -> any,
    GetClipEvaluatorAsync: (self: AnimationClipProvider, assetId: any) -> any,
}

export type AnimationController = Instance & {
}

export type AnimationFromVideoCreatorService = Instance & {
    CreateJob: (self: AnimationFromVideoCreatorService, filePath: string) -> string,
    DownloadJobResult: (self: AnimationFromVideoCreatorService, jobId: string, outputFilePath: string) -> string,
    FullProcess: (self: AnimationFromVideoCreatorService, videoFilePath: string, progressCallback: any) -> string,
    GetJobStatus: (self: AnimationFromVideoCreatorService, jobId: string) -> string,
}

export type AnimationFromVideoCreatorStudioService = Instance & {
    IsAgeRestricted: (self: AnimationFromVideoCreatorStudioService) -> boolean,
    CreateAnimationByUploadingVideo: (self: AnimationFromVideoCreatorStudioService, progressCallback: any) -> string,
    ImportVideoWithPrompt: (self: AnimationFromVideoCreatorStudioService) -> string,
}

export type AnimationRigData = Instance & {
    label: buffer,
    name: buffer,
    parent: buffer,
    postTransform: buffer,
    preTransform: buffer,
    transform: buffer,
    LoadFromHumanoid: (self: AnimationRigData, humanoid: any) -> boolean,
}

export type AnimationStreamTrack = Instance & {
    Animation: TrackerStreamAnimation,
    FACSDataLod: enum.Enum_FACSDataLod,
    IsPlaying: boolean,
    Priority: enum.Enum_AnimationPriority,
    WeightCurrent: number,
    WeightTarget: number,
    AdjustWeight: (self: AnimationStreamTrack, weight: number, fadeTime: number) -> (),
    GetActive: (self: AnimationStreamTrack) -> boolean,
    GetTrackerData: (self: AnimationStreamTrack) -> ...any,
    Play: (self: AnimationStreamTrack, fadeTime: number, weight: number) -> (),
    Stop: (self: AnimationStreamTrack, fadeTime: number) -> (),
    TogglePause: (self: AnimationStreamTrack, paused: boolean) -> (),
}

export type AnimationTrack = Instance & {
    Animation: Animation,
    IsPlaying: boolean,
    Length: number,
    Looped: boolean,
    Priority: enum.Enum_AnimationPriority,
    Speed: number,
    TimePosition: number,
    WeightCurrent: number,
    WeightTarget: number,
    AdjustSpeed: (self: AnimationTrack, speed: number) -> (),
    AdjustWeight: (self: AnimationTrack, weight: number, fadeTime: number) -> (),
    GetMarkerReachedSignal: (self: AnimationTrack, name: string) -> any,
    GetTargetInstance: (self: AnimationTrack, name: string) -> any,
    GetTargetNames: (self: AnimationTrack) -> {any},
    GetTimeOfKeyframe: (self: AnimationTrack, keyframeName: string) -> number,
    Play: (self: AnimationTrack, fadeTime: number, weight: number, speed: number) -> (),
    SetTargetInstance: (self: AnimationTrack, name: string, target: any) -> (),
    Stop: (self: AnimationTrack, fadeTime: number) -> (),
}

export type Animator = Instance & {
    EvaluationThrottled: boolean,
    PreferLodEnabled: boolean,
    RootMotion: datatypes.CFrame,
    RootMotionWeight: number,
    ApplyJointVelocities: (self: Animator, motors: any) -> (),
    GetPlayingAnimationTracks: (self: Animator) -> {any},
    GetPlayingAnimationTracksCoreScript: (self: Animator) -> {any},
    LoadAnimation: (self: Animator, animation: Animation) -> AnimationTrack,
    LoadAnimationCoreScript: (self: Animator, animation: Animation) -> AnimationTrack,
    LoadStreamAnimation: (self: Animator, animation: TrackerStreamAnimation) -> AnimationStreamTrack,
    LoadStreamAnimationForSelfieView_deprecated: (self: Animator, animation: TrackerStreamAnimation, player: Player) -> AnimationStreamTrack,
    LoadStreamAnimationV2: (self: Animator, animation: TrackerStreamAnimation, player: Player, shouldLookupPlayer: boolean, shouldReplicate: boolean) -> AnimationStreamTrack,
    RegisterEvaluationParallelCallback: (self: Animator, callback: any) -> (),
    StepAnimations: (self: Animator, deltaTime: number) -> (),
    SynchronizeWith: (self: Animator, otherAnimator: Animator) -> (),
}

export type Annotation = Instance & {
    AuthorColor3: datatypes.Color3,
    AuthorId: buffer,
    ChannelId: string,
    Contents: string,
    CreationTimeUnix: buffer,
    LastModifiedTimeUnix: buffer,
    LoadingReplies: boolean,
    MessageId: string,
    ReplyCount: buffer,
    Resolved: boolean,
    TaggedUsers: string,
    GetRequests: (self: Annotation) -> {[string]: any},
    GetStringUniqueId: (self: Annotation) -> string,
    IsThreadParent: (self: Annotation) -> boolean,
}

export type WorkspaceAnnotation = Annotation & {
    Adornee: PVInstance,
    AdorneeOffset: datatypes.Vector3,
    GetAbsolutePosition: (self: WorkspaceAnnotation) -> datatypes.Vector3,
    SetAdorneeOffsetFromAbsolutePosition: (self: WorkspaceAnnotation, position: datatypes.Vector3) -> (),
}

export type AnnotationsService = Instance & {
    AnnotationsVisible: boolean,
    Hovered: Annotation,
    Mode: enum.Enum_AnnotationEditingMode,
    Selected: Annotation,
    CreateAnnotation: (self: AnnotationsService, annotation: Annotation) -> (),
    DEPRECATED_EditAnnotation: (self: AnnotationsService, uniqueId: string, contents: string) -> (),
    DEPRECATED_LoadAnnotationReplies: (self: AnnotationsService, annotation: Annotation) -> (),
    DeleteAnnotation: (self: AnnotationsService, annotation: Annotation) -> (),
    EditAnnotation: (self: AnnotationsService, uniqueId: string, contents: string, taggedUsers: string) -> (),
    GetAnnotationThreads: (self: AnnotationsService) -> any,
    LoadAnnotationReplies: (self: AnnotationsService, annotation: Annotation, reverseOrder: boolean, loadAll: boolean) -> (),
    LoadResolvedAnnotations: (self: AnnotationsService, count: number) -> (),
    ResolveAnnotation: (self: AnnotationsService, annotation: Annotation, resolved: boolean) -> (),
}

export type AppLifecycleObserverService = Instance & {
    GetCurrentState: (self: AppLifecycleObserverService) -> enum.Enum_AppLifecycleManagerState,
    IsDidDetachSupported: (self: AppLifecycleObserverService) -> boolean,
    TriggerOnLandingPageMount: (self: AppLifecycleObserverService) -> (),
    TriggerOnLuaAppInteractive: (self: AppLifecycleObserverService) -> (),
}

export type AppUpdateService = Instance & {
    CanPerformBinaryUpdate: (self: AppUpdateService) -> boolean,
    CheckForUpdate: (self: AppUpdateService, handler: any) -> (),
    PerformManagedUpdate: (self: AppUpdateService) -> boolean,
}

export type AssetCounterService = Instance & {
}

export type AssetDeliveryProxy = Instance & {
    Interface: string,
    Port: number,
    StartServer: boolean,
}

export type AssetImportService = Instance & {
    GetAllPresets: (self: AssetImportService) -> {[string]: any},
    GetPreset: (self: AssetImportService, name: string) -> {[string]: any},
    RemovePreset: (self: AssetImportService, name: string) -> (),
    SavePreset: (self: AssetImportService, name: string, preset: {[string]: any}) -> boolean,
    StartSessionWithPath: (self: AssetImportService, filePath: string) -> AssetImportSession,
    PickImageFileWithPrompt: (self: AssetImportService) -> string,
    PickMeshFileWithPrompt: (self: AssetImportService) -> string,
    PickMultipleFilesWithPrompt: (self: AssetImportService) -> {any},
    StartSessionWithPathAsync: (self: AssetImportService, filePath: string) -> AssetImportSession,
    StartSessionWithPrompt: (self: AssetImportService) -> AssetImportSession,
}

export type AssetImportSession = Instance & {
    ApplyPreset: (self: AssetImportSession, preset: {[string]: any}) -> (),
    Cancel: (self: AssetImportSession) -> (),
    CreatePresetFromData: (self: AssetImportSession, importData: any) -> {[string]: any},
    GetFilename: (self: AssetImportSession) -> string,
    GetImportTree: (self: AssetImportSession) -> any,
    GetRigVisualization: (self: AssetImportSession, importDataInstance: any) -> any,
    GetStatuses: (self: AssetImportSession) -> {[string]: any},
    HasAnimation: (self: AssetImportSession) -> boolean,
    IsAvatar: (self: AssetImportSession) -> boolean,
    IsGltf: (self: AssetImportSession) -> boolean,
    IsR15: (self: AssetImportSession) -> boolean,
    Reset: (self: AssetImportSession) -> (),
    Upload: (self: AssetImportSession) -> (),
    usesCustomRestPoseLua: (self: AssetImportSession) -> boolean,
}

export type AssetManagerService = Instance & {
    GetMeshIdFromAliasName: (self: AssetManagerService, aliasName: string) -> buffer,
    GetMeshIdFromAssetId: (self: AssetManagerService, assetId: buffer) -> buffer,
    GetTextureIdFromAliasName: (self: AssetManagerService, aliasName: string) -> buffer,
    GetTextureIdFromAssetId: (self: AssetManagerService, assetId: buffer) -> buffer,
    InsertAudio: (self: AssetManagerService, assetId: buffer, assetName: string) -> (),
    InsertImage: (self: AssetManagerService, assetId: buffer) -> (),
    InsertImages: (self: AssetManagerService, assetIds: {any}) -> (),
    InsertMesh: (self: AssetManagerService, aliasName: string, insertWithLocation: boolean, sourceAssetId: buffer) -> (),
    InsertMeshesWithLocation: (self: AssetManagerService, aliasNames: {any}, meshIds: {any}) -> (),
    InsertModel: (self: AssetManagerService, modelId: buffer) -> (),
    InsertPackage: (self: AssetManagerService, packageId: buffer) -> (),
    InsertVideo: (self: AssetManagerService, assetId: buffer, assetName: string) -> (),
    OpenPlace: (self: AssetManagerService, placeId: buffer) -> (),
    ShowPackageDetails: (self: AssetManagerService, packageId: buffer) -> (),
    UpdateAllPackages: (self: AssetManagerService, packageId: buffer) -> (),
    ViewPackageOnWebsite: (self: AssetManagerService, packageId: buffer) -> (),
    AddNewPlace: (self: AssetManagerService) -> buffer,
    CreateAlias: (self: AssetManagerService, assetType: number, assetId: buffer, aliasName: string) -> (),
    DeleteAlias: (self: AssetManagerService, aliasName: string) -> (),
    RemovePlace: (self: AssetManagerService, placeId: buffer) -> (),
    RenameAlias: (self: AssetManagerService, assetType: number, assetId: buffer, oldAliasName: string, newAliasName: string) -> (),
    RenameModel: (self: AssetManagerService, modelId: buffer, newName: string) -> (),
    RenamePlace: (self: AssetManagerService, placeId: buffer, newName: string) -> (),
}

export type AssetPatchSettings = Instance & {
    ContentId: string,
    OutputPath: string,
    PatchId: string,
}

export type AssetService = Instance & {
    CreateEditableImage: (self: AssetService, editableImageOptions: {[string]: any}) -> EditableImage,
    CreateEditableMesh: (self: AssetService, editableMeshOptions: {[string]: any}) -> EditableMesh,
    DeserializeInstance: (self: AssetService, serializedInstance: string) -> any,
    GetBundleDetailsSync: (self: AssetService, bundleId: buffer) -> {[string]: any},
    RegisterUGCValidationFunction: (self: AssetService, callback: any) -> (),
    CanEditAssetAsync: (self: AssetService, content: any) -> boolean,
    CheckTextureAlphaAsync: (self: AssetService, textureId: any) -> boolean,
    CreateAssetAsync: (self: AssetService, object: Object, assetType: enum.Enum_AssetType, requestParameters: {[string]: any}) -> ...any,
    CreateAssetVersionAsync: (self: AssetService, object: Object, assetType: enum.Enum_AssetType, assetId: buffer, requestParameters: {[string]: any}) -> ...any,
    CreateEditableImageAsync: (self: AssetService, content: any, editableImageOptions: {[string]: any}) -> EditableImage,
    CreateEditableMeshAsync: (self: AssetService, content: any, editableMeshOptions: {[string]: any}) -> EditableMesh,
    CreateEditableMeshStripSkinningAsync: (self: AssetService, meshId: any) -> EditableMesh,
    CreateMeshPartAsync: (self: AssetService, meshContent: any, options: {[string]: any}) -> MeshPart,
    CreatePlaceAsync: (self: AssetService, placeName: string, templatePlaceID: buffer, description: string) -> buffer,
    CreatePlaceInPlayerInventoryAsync: (self: AssetService, player: any, placeName: string, templatePlaceID: buffer, description: string) -> buffer,
    GetAssetIdsForPackage: (self: AssetService, packageAssetId: buffer) -> {any},
    GetAudioMetadataAsync: (self: AssetService, idList: {any}) -> {any},
    GetBundleDetailsAsync: (self: AssetService, bundleId: buffer) -> {[string]: any},
    GetGamePlacesAsync: (self: AssetService) -> any,
    PromptCreateAssetAsync: (self: AssetService, player: Player, instance: any, assetType: enum.Enum_AssetType) -> ...any,
    PromptImportAnimationClipFromVideoAsync: (self: AssetService, player: Player, progressCallback: any) -> ...any,
    SavePlaceAsync: (self: AssetService) -> (),
    SearchAudio: (self: AssetService, searchParameters: AudioSearchParams) -> AudioPages,
}

export type Atmosphere = Instance & {
    Color: datatypes.Color3,
    Decay: datatypes.Color3,
    Density: number,
    Glare: number,
    Haze: number,
    Offset: number,
}

export type Attachment = Instance & {
    Axis: datatypes.Vector3,
    CFrame: datatypes.CFrame,
    Orientation: datatypes.Vector3,
    Position: datatypes.Vector3,
    SecondaryAxis: datatypes.Vector3,
    Visible: boolean,
    WorldAxis: datatypes.Vector3,
    WorldCFrame: datatypes.CFrame,
    WorldOrientation: datatypes.Vector3,
    WorldPosition: datatypes.Vector3,
    WorldSecondaryAxis: datatypes.Vector3,
    GetConstraints: (self: Attachment) -> any,
}

export type Bone = Attachment & {
    Transform: datatypes.CFrame,
    TransformedCFrame: datatypes.CFrame,
    TransformedWorldCFrame: datatypes.CFrame,
}

export type AudioAnalyzer = Instance & {
    PeakLevel: number,
    RmsLevel: number,
    SpectrumEnabled: boolean,
    WindowSize: enum.Enum_AudioWindowSize,
    GetConnectedWires: (self: AudioAnalyzer, pin: string) -> any,
    GetInputPins: (self: AudioAnalyzer) -> {any},
    GetOutputPins: (self: AudioAnalyzer) -> {any},
    GetSpectrum: (self: AudioAnalyzer) -> {any},
}

export type AudioChannelMixer = Instance & {
    Layout: enum.Enum_AudioChannelLayout,
    GetConnectedWires: (self: AudioChannelMixer, pin: string) -> any,
    GetInputPins: (self: AudioChannelMixer) -> {any},
    GetOutputPins: (self: AudioChannelMixer) -> {any},
}

export type AudioChannelSplitter = Instance & {
    Layout: enum.Enum_AudioChannelLayout,
    GetConnectedWires: (self: AudioChannelSplitter, pin: string) -> any,
    GetInputPins: (self: AudioChannelSplitter) -> {any},
    GetOutputPins: (self: AudioChannelSplitter) -> {any},
}

export type AudioChorus = Instance & {
    Bypass: boolean,
    Depth: number,
    Mix: number,
    Rate: number,
    GetConnectedWires: (self: AudioChorus, pin: string) -> any,
    GetInputPins: (self: AudioChorus) -> {any},
    GetOutputPins: (self: AudioChorus) -> {any},
}

export type AudioCompressor = Instance & {
    Attack: number,
    Bypass: boolean,
    Editor: boolean,
    MakeupGain: number,
    Ratio: number,
    Release: number,
    Threshold: number,
    GetConnectedWires: (self: AudioCompressor, pin: string) -> any,
    GetInputPins: (self: AudioCompressor) -> {any},
    GetOutputPins: (self: AudioCompressor) -> {any},
}

export type AudioDeviceInput = Instance & {
    AccessList: buffer,
    AccessType: enum.Enum_AccessModifierType,
    Active: boolean,
    IsReady: boolean,
    Muted: boolean,
    MutedByLocalUser: boolean,
    Player: Player,
    Volume: number,
    GetConnectedWires: (self: AudioDeviceInput, pin: string) -> any,
    GetInputPins: (self: AudioDeviceInput) -> {any},
    GetOutputPins: (self: AudioDeviceInput) -> {any},
    GetUserIdAccessList: (self: AudioDeviceInput) -> {any},
    SetUserIdAccessList: (self: AudioDeviceInput, userIds: {any}) -> (),
}

export type AudioDeviceOutput = Instance & {
    Player: Player,
    GetConnectedWires: (self: AudioDeviceOutput, pin: string) -> any,
    GetInputPins: (self: AudioDeviceOutput) -> {any},
    GetOutputPins: (self: AudioDeviceOutput) -> {any},
}

export type AudioDistortion = Instance & {
    Bypass: boolean,
    Level: number,
    GetConnectedWires: (self: AudioDistortion, pin: string) -> any,
    GetInputPins: (self: AudioDistortion) -> {any},
    GetOutputPins: (self: AudioDistortion) -> {any},
}

export type AudioEcho = Instance & {
    Bypass: boolean,
    DelayTime: number,
    DryLevel: number,
    Feedback: number,
    RampTime: number,
    WetLevel: number,
    GetConnectedWires: (self: AudioEcho, pin: string) -> any,
    GetInputPins: (self: AudioEcho) -> {any},
    GetOutputPins: (self: AudioEcho) -> {any},
    Reset: (self: AudioEcho) -> (),
}

export type AudioEmitter = Instance & {
    AngleAttenuation: buffer,
    AudioInteractionGroup: string,
    DistanceAttenuation: buffer,
    SimulationFidelity: enum.Enum_AudioSimulationFidelity,
    GetAngleAttenuation: (self: AudioEmitter) -> {[string]: any},
    GetAudibilityFor: (self: AudioEmitter, listener: AudioListener) -> number,
    GetConnectedWires: (self: AudioEmitter, pin: string) -> any,
    GetDistanceAttenuation: (self: AudioEmitter) -> {[string]: any},
    GetInputPins: (self: AudioEmitter) -> {any},
    GetInteractingListeners: (self: AudioEmitter) -> any,
    GetOutputPins: (self: AudioEmitter) -> {any},
    SetAngleAttenuation: (self: AudioEmitter, curve: {[string]: any}) -> (),
    SetDistanceAttenuation: (self: AudioEmitter, curve: {[string]: any}) -> (),
}

export type AudioEqualizer = Instance & {
    Bypass: boolean,
    Editor: boolean,
    HighGain: number,
    LowGain: number,
    MidGain: number,
    MidRange: datatypes.NumberRange,
    GetConnectedWires: (self: AudioEqualizer, pin: string) -> any,
    GetInputPins: (self: AudioEqualizer) -> {any},
    GetOutputPins: (self: AudioEqualizer) -> {any},
}

export type AudioFader = Instance & {
    Bypass: boolean,
    Volume: number,
    GetConnectedWires: (self: AudioFader, pin: string) -> any,
    GetInputPins: (self: AudioFader) -> {any},
    GetOutputPins: (self: AudioFader) -> {any},
}

export type AudioFilter = Instance & {
    Bypass: boolean,
    Editor: boolean,
    FilterType: enum.Enum_AudioFilterType,
    Frequency: number,
    Gain: number,
    Q: number,
    GetConnectedWires: (self: AudioFilter, pin: string) -> any,
    GetGainAt: (self: AudioFilter, frequency: number) -> number,
    GetInputPins: (self: AudioFilter) -> {any},
    GetOutputPins: (self: AudioFilter) -> {any},
}

export type AudioFlanger = Instance & {
    Bypass: boolean,
    Depth: number,
    Mix: number,
    Rate: number,
    GetConnectedWires: (self: AudioFlanger, pin: string) -> any,
    GetInputPins: (self: AudioFlanger) -> {any},
    GetOutputPins: (self: AudioFlanger) -> {any},
}

export type AudioFocusService = Instance & {
    AcquireFocus: (self: AudioFocusService, contextId: number) -> boolean,
    GetFocusedContextId: (self: AudioFocusService) -> number,
    GetRegisteredContexts: (self: AudioFocusService) -> {any},
    RegisterContextIdFromLua: (self: AudioFocusService, contextId: number) -> (),
    RequestFocus: (self: AudioFocusService, contextId: number, priority: number) -> boolean,
}

export type AudioLimiter = Instance & {
    Bypass: boolean,
    Editor: boolean,
    MaxLevel: number,
    Release: number,
    GetConnectedWires: (self: AudioLimiter, pin: string) -> any,
    GetInputPins: (self: AudioLimiter) -> {any},
    GetOutputPins: (self: AudioLimiter) -> {any},
}

export type AudioListener = Instance & {
    AngleAttenuation: buffer,
    AudioInteractionGroup: string,
    DistanceAttenuation: buffer,
    SimulationFidelity: enum.Enum_AudioSimulationFidelity,
    GetAngleAttenuation: (self: AudioListener) -> {[string]: any},
    GetAudibilityFor: (self: AudioListener, emitter: AudioEmitter) -> number,
    GetConnectedWires: (self: AudioListener, pin: string) -> any,
    GetDistanceAttenuation: (self: AudioListener) -> {[string]: any},
    GetInputPins: (self: AudioListener) -> {any},
    GetInteractingEmitters: (self: AudioListener) -> any,
    GetOutputPins: (self: AudioListener) -> {any},
    Reset: (self: AudioListener) -> (),
    SetAngleAttenuation: (self: AudioListener, curve: {[string]: any}) -> (),
    SetDistanceAttenuation: (self: AudioListener, curve: {[string]: any}) -> (),
}

export type AudioPitchShifter = Instance & {
    Bypass: boolean,
    Pitch: number,
    WindowSize: enum.Enum_AudioWindowSize,
    GetConnectedWires: (self: AudioPitchShifter, pin: string) -> any,
    GetInputPins: (self: AudioPitchShifter) -> {any},
    GetOutputPins: (self: AudioPitchShifter) -> {any},
}

export type AudioPlayer = Instance & {
    Asset: any,
    AutoLoad: boolean,
    IsPlaying: boolean,
    IsReady: boolean,
    LoopRegion: datatypes.NumberRange,
    Looping: boolean,
    PlaybackRegion: datatypes.NumberRange,
    PlaybackSpeed: number,
    TimeLength: number,
    TimePosition: number,
    Volume: number,
    GetConnectedWires: (self: AudioPlayer, pin: string) -> any,
    GetInputPins: (self: AudioPlayer) -> {any},
    GetOutputPins: (self: AudioPlayer) -> {any},
    Play: (self: AudioPlayer) -> (),
    Stop: (self: AudioPlayer) -> (),
    GetWaveformAsync: (self: AudioPlayer, timeRange: datatypes.NumberRange, samples: number) -> {any},
}

export type AudioReverb = Instance & {
    Bypass: boolean,
    DecayRatio: number,
    DecayTime: number,
    Density: number,
    Diffusion: number,
    DryLevel: number,
    EarlyDelayTime: number,
    HighCutFrequency: number,
    LateDelayTime: number,
    LowShelfFrequency: number,
    LowShelfGain: number,
    ReferenceFrequency: number,
    WetLevel: number,
    GetConnectedWires: (self: AudioReverb, pin: string) -> any,
    GetInputPins: (self: AudioReverb) -> {any},
    GetOutputPins: (self: AudioReverb) -> {any},
    Reset: (self: AudioReverb) -> (),
}

export type AudioSearchParams = Instance & {
    Album: string,
    Artist: string,
    AudioSubType: enum.Enum_AudioSubType,
    MaxDuration: number,
    MinDuration: number,
    SearchKeyword: string,
    Tag: string,
    Title: string,
}

export type AudioTextToSpeech = Instance & {
    IsLoaded: boolean,
    IsPlaying: boolean,
    Looping: boolean,
    Pitch: number,
    PlaybackSpeed: number,
    Speed: number,
    Text: string,
    TimeLength: number,
    TimePosition: number,
    VoiceId: string,
    Volume: number,
    GetConnectedWires: (self: AudioTextToSpeech, pin: string) -> any,
    Pause: (self: AudioTextToSpeech) -> (),
    Play: (self: AudioTextToSpeech) -> (),
    Unload: (self: AudioTextToSpeech) -> (),
    GetWaveformAsync: (self: AudioTextToSpeech, timeRange: datatypes.NumberRange, samples: number) -> {any},
    LoadAsync: (self: AudioTextToSpeech) -> enum.Enum_AssetFetchStatus,
}

export type AuroraScriptService = Instance & {
    BufferSize: number,
    GetLocalFrameId: (self: AuroraScriptService) -> number,
    GetProperty: (self: AuroraScriptService, instance: any, name: string) -> any,
    GetTime: (self: AuroraScriptService) -> number,
    SendMessage: (self: AuroraScriptService, instance: any, behaviorName: string, functionName: string, ...any) -> (),
    SetProperty: (self: AuroraScriptService, instance: any, name: string, value: any) -> (),
}

export type AuroraService = Instance & {
    GetPredictedInstances: (self: AuroraService) -> {any},
    GetRemoteWorldStepId: (self: AuroraService) -> number,
    GetServerView: (self: AuroraService, target: any) -> any,
    GetWorldStepId: (self: AuroraService) -> number,
    IsPredicted: (self: AuroraService, target: any) -> boolean,
    SetIncomingReplicationLag: (self: AuroraService, seconds: number) -> (),
    SetPropertyIsInput: (self: AuroraService, target: any, propertyName: string, isInput: boolean) -> (),
    StartPrediction: (self: AuroraService, target: any) -> (),
    StepPhysics: (self: AuroraService, worldSteps: number, parts: any) -> (),
    StopPrediction: (self: AuroraService, target: any) -> (),
    UpdateProperties: (self: AuroraService, target: any) -> (),
}

export type AvatarChatService = Instance & {
    ClientFeatures: number,
    ClientFeaturesInitialized: boolean,
    ServerFeatures: number,
    DebugCounterGet: (self: AvatarChatService, label: string, playerId: buffer) -> buffer,
    EnableVoice: (self: AvatarChatService) -> boolean,
    IsEnabled: (self: AvatarChatService, mask: number, feature: enum.Enum_AvatarChatServiceFeature) -> boolean,
    IsPlaceEnabled: (self: AvatarChatService) -> boolean,
    IsUniverseEnabled: (self: AvatarChatService) -> boolean,
    PollClientFeatures: (self: AvatarChatService) -> number,
    PollServerFeatures: (self: AvatarChatService) -> number,
    deviceMeetsRequirementsForFeature: (self: AvatarChatService, feature: enum.Enum_DeviceFeatureType) -> boolean,
    GetClientFeaturesAsync: (self: AvatarChatService) -> number,
    GetServerFeaturesAsync: (self: AvatarChatService) -> number,
}

export type AvatarCreationService = Instance & {
    DeserializeAvatarModel: (self: AvatarCreationService, serializedModel: string) -> any,
    GetValidationRules: (self: AvatarCreationService) -> {[string]: any},
    SendAnalyticsEvent: (self: AvatarCreationService, eventName: string, params: {[string]: any}) -> (),
    GenerateAvatar2DPreviewAsync: (self: AvatarCreationService, avatarGeneration2dPreviewParams: {[string]: any}) -> string,
    GenerateAvatarAsync: (self: AvatarCreationService, avatarGenerationParams: {[string]: any}) -> string,
    GetAvatarGenerationConfig: (self: AvatarCreationService) -> {[string]: any},
    GetBatchTokenDetailsAsync: (self: AvatarCreationService, tokenIds: {any}) -> {any},
    LoadAvatar2DPreviewAsync: (self: AvatarCreationService, previewId: string) -> EditableImage,
    LoadGeneratedAvatarAsync: (self: AvatarCreationService, generationId: string) -> HumanoidDescription,
    PrepareAvatarForPreviewAsync: (self: AvatarCreationService, humanoidModel: Model) -> (),
    PromptCreateAvatarAsync: (self: AvatarCreationService, tokenId: string, player: Player, humanoidDescription: HumanoidDescription) -> ...any,
    PromptSelectAvatarGenerationImageAsync: (self: AvatarCreationService, player: Player) -> string,
    RequestAvatarGenerationSessionAsync: (self: AvatarCreationService, player: Player, callback: any) -> ...any,
    ValidateUGCAccessoryAsync: (self: AvatarCreationService, player: Player, accessory: any, accessoryType: enum.Enum_AccessoryType) -> ...any,
    ValidateUGCBodyPartAsync: (self: AvatarCreationService, player: Player, instance: any, bodyPart: enum.Enum_BodyPart) -> ...any,
    ValidateUGCFullBodyAsync: (self: AvatarCreationService, player: Player, humanoidDescription: HumanoidDescription) -> ...any,
}

export type AvatarEditorService = Instance & {
    GetAccessoryType: (self: AvatarEditorService, avatarAssetType: enum.Enum_AvatarAssetType) -> enum.Enum_AccessoryType,
    NoPromptCreateOutfit: (self: AvatarEditorService, humanoidDescription: HumanoidDescription, rigType: enum.Enum_HumanoidRigType, name: string, gearAssetId: buffer) -> boolean,
    NoPromptDeleteOutfit: (self: AvatarEditorService, outfitId: buffer) -> boolean,
    NoPromptRenameOutfit: (self: AvatarEditorService, outfitId: buffer, name: string) -> boolean,
    NoPromptSaveAvatar: (self: AvatarEditorService, humanoidDescription: HumanoidDescription, rigType: enum.Enum_HumanoidRigType, saveDict: {[string]: any}, gearAssetId: buffer) -> boolean,
    NoPromptSaveAvatarThumbnailCustomization: (self: AvatarEditorService, thumbnailType: enum.Enum_AvatarThumbnailCustomizationType, emoteAssetId: buffer, cameraDistanceScale: number, yRotDeg: number, fieldOfViewDeg: number) -> boolean,
    NoPromptSetFavorite: (self: AvatarEditorService, itemId: buffer, itemType: enum.Enum_AvatarItemType, shouldFavorite: boolean) -> boolean,
    NoPromptUpdateOutfit: (self: AvatarEditorService, outfitId: buffer, humanoidDescription: HumanoidDescription, rigType: enum.Enum_HumanoidRigType, gearAssetId: buffer) -> boolean,
    PerformCreateOutfitWithDescription: (self: AvatarEditorService, humanoidDescription: HumanoidDescription, name: string) -> (),
    PerformDeleteOutfit: (self: AvatarEditorService) -> (),
    PerformRenameOutfit: (self: AvatarEditorService, name: string) -> (),
    PerformSaveAvatarWithDescription: (self: AvatarEditorService, humanoidDescription: HumanoidDescription, addedAssets: {any}, removedAssets: {any}) -> (),
    PerformSetFavorite: (self: AvatarEditorService) -> (),
    PerformUpdateOutfit: (self: AvatarEditorService, humanoidDescription: HumanoidDescription) -> (),
    PromptAllowInventoryReadAccess: (self: AvatarEditorService) -> (),
    PromptCreateOutfit: (self: AvatarEditorService, outfit: HumanoidDescription, rigType: enum.Enum_HumanoidRigType) -> (),
    PromptDeleteOutfit: (self: AvatarEditorService, outfitId: buffer) -> (),
    PromptRenameOutfit: (self: AvatarEditorService, outfitId: buffer) -> (),
    PromptSaveAvatar: (self: AvatarEditorService, humanoidDescription: HumanoidDescription, rigType: enum.Enum_HumanoidRigType) -> (),
    PromptSetFavorite: (self: AvatarEditorService, itemId: buffer, itemType: enum.Enum_AvatarItemType, shouldFavorite: boolean) -> (),
    PromptUpdateOutfit: (self: AvatarEditorService, outfitId: buffer, updatedOutfit: HumanoidDescription, rigType: enum.Enum_HumanoidRigType) -> (),
    SetAllowInventoryReadAccess: (self: AvatarEditorService, inventoryReadAccessGranted: boolean) -> (),
    SignalCreateOutfitFailed: (self: AvatarEditorService) -> (),
    SignalCreateOutfitPermissionDenied: (self: AvatarEditorService) -> (),
    SignalDeleteOutfitFailed: (self: AvatarEditorService) -> (),
    SignalDeleteOutfitPermissionDenied: (self: AvatarEditorService) -> (),
    SignalRenameOutfitFailed: (self: AvatarEditorService) -> (),
    SignalRenameOutfitPermissionDenied: (self: AvatarEditorService) -> (),
    SignalSaveAvatarFailed: (self: AvatarEditorService) -> (),
    SignalSaveAvatarPermissionDenied: (self: AvatarEditorService) -> (),
    SignalSetFavoriteFailed: (self: AvatarEditorService) -> (),
    SignalSetFavoritePermissionDenied: (self: AvatarEditorService) -> (),
    SignalUpdateOutfitFailed: (self: AvatarEditorService) -> (),
    SignalUpdateOutfitPermissionDenied: (self: AvatarEditorService) -> (),
    refreshAvatarThumbnails: (self: AvatarEditorService, thumbnailTypes: {any}) -> (),
    CheckApplyDefaultClothing: (self: AvatarEditorService, humanoidDescription: HumanoidDescription) -> HumanoidDescription,
    ConformToAvatarRules: (self: AvatarEditorService, humanoidDescription: HumanoidDescription) -> HumanoidDescription,
    GetAvatarRules: (self: AvatarEditorService) -> {[string]: any},
    GetBatchItemDetails: (self: AvatarEditorService, itemIds: {any}, itemType: enum.Enum_AvatarItemType) -> {any},
    GetFavorite: (self: AvatarEditorService, itemId: buffer, itemType: enum.Enum_AvatarItemType) -> boolean,
    GetInventory: (self: AvatarEditorService, assetTypes: {any}) -> InventoryPages,
    GetItemDetails: (self: AvatarEditorService, itemId: buffer, itemType: enum.Enum_AvatarItemType) -> {[string]: any},
    GetOutfitDetails: (self: AvatarEditorService, outfitId: buffer) -> {[string]: any},
    GetOutfits: (self: AvatarEditorService, outfitSource: enum.Enum_OutfitSource, outfitType: enum.Enum_OutfitType) -> OutfitPages,
    GetRecommendedAssets: (self: AvatarEditorService, assetType: enum.Enum_AvatarAssetType, contextAssetId: buffer) -> {any},
    GetRecommendedBundles: (self: AvatarEditorService, bundleId: buffer) -> {any},
    SearchCatalog: (self: AvatarEditorService, searchParameters: any) -> CatalogPages,
}

export type AvatarImportService = Instance & {
    ImportFBXAnimationFromFilePathUserMayChooseModel: (self: AvatarImportService, fbxFilePath: string, selectedRig: any, userChooseModelThenImportCB: any) -> any,
    ImportFBXAnimationUserMayChooseModel: (self: AvatarImportService, selectedRig: any, userChooseModelThenImportCB: any) -> any,
    ImportFbxRigWithoutSceneLoad: (self: AvatarImportService, isR15: boolean) -> any,
    ImportLoadedFBXAnimation: (self: AvatarImportService, useFBXModel: boolean) -> any,
    LoadRigAndDetectType: (self: AvatarImportService, promptR15Callback: any) -> any,
}

export type AvatarPreloader = Instance & {
    PreloadModelAssets: (self: AvatarPreloader, models: any) -> {any},
}

export type Backpack = Instance & {
}

export type BadgeService = Instance & {
    AwardBadge: (self: BadgeService, userId: buffer, badgeId: buffer) -> boolean,
    CheckUserBadgesAsync: (self: BadgeService, userId: buffer, badgeIds: {any}) -> {any},
    GetBadgeInfoAsync: (self: BadgeService, badgeId: buffer) -> {[string]: any},
    UserHasBadgeAsync: (self: BadgeService, userId: buffer, badgeId: buffer) -> boolean,
}

export type BaseImportData = Instance & {
    Id: string,
    ImportName: string,
    ShouldImport: boolean,
    CreatePresetFromData: (self: BaseImportData) -> {[string]: any},
    GetPreview: (self: BaseImportData) -> any,
    GetStatuses: (self: BaseImportData) -> {[string]: any},
}

export type AnimationImportData = BaseImportData & {
}

export type FacsImportData = BaseImportData & {
}

export type GroupImportData = BaseImportData & {
    Anchored: boolean,
    ImportAsModelAsset: boolean,
    InsertInWorkspace: boolean,
}

export type JointImportData = BaseImportData & {
}

export type MaterialImportData = BaseImportData & {
    DiffuseFilePath: string,
    IsPbr: boolean,
    MetalnessFilePath: string,
    NormalFilePath: string,
    RoughnessFilePath: string,
}

export type MeshImportData = BaseImportData & {
    Anchored: boolean,
    CageManifold: boolean,
    CageMeshIntersectedPreview: boolean,
    CageMeshNotIntersected: boolean,
    CageNoOverlappingVertices: boolean,
    CageNonManifoldPreview: boolean,
    CageOverlappingVerticesPreview: boolean,
    CageUVMatched: boolean,
    CageUVMisMatchedPreview: boolean,
    Dimensions: datatypes.Vector3,
    DoubleSided: boolean,
    IgnoreVertexColors: boolean,
    IrrelevantCageModifiedPreview: boolean,
    MeshHoleDetectedPreview: boolean,
    MeshNoHoleDetected: boolean,
    NoIrrelevantCageModified: boolean,
    NoOuterCageFarExtendedFromMesh: boolean,
    OuterCageFarExtendedFromMeshPreview: boolean,
    PolygonCount: number,
    UseImportedPivot: boolean,
}

export type RootImportData = BaseImportData & {
    AddModelToInventory: boolean,
    Anchored: boolean,
    AnimationIdForRestPose: number,
    ExistingPackageId: string,
    FileDimensions: datatypes.Vector3,
    ImportAsModelAsset: boolean,
    ImportAsPackage: boolean,
    InsertInWorkspace: boolean,
    InsertWithScenePosition: boolean,
    InvertNegativeFaces: boolean,
    KeepZeroInfluenceBones: boolean,
    MergeMeshes: boolean,
    PolygonCount: number,
    PreferredUploadId: buffer,
    RestPose: enum.Enum_RestPose,
    RigScale: enum.Enum_RigScale,
    RigType: enum.Enum_RigType,
    RigVisualization: boolean,
    ScaleUnit: enum.Enum_MeshScaleUnit,
    UseSceneOriginAsCFrame: boolean,
    UseSceneOriginAsPivot: boolean,
    UsesCages: boolean,
    ValidateUgcBody: boolean,
    WorldForward: enum.Enum_NormalId,
    WorldUp: enum.Enum_NormalId,
}

export type BasePlayerGui = Instance & {
    GetGuiObjectsAtPosition: (self: BasePlayerGui, x: number, y: number) -> any,
    GetGuiObjectsInCircle: (self: BasePlayerGui, position: datatypes.Vector2, radius: number) -> any,
}

export type CoreGui = BasePlayerGui & {
    SelectionImageObject: GuiObject,
    Version: number,
    SetUserGuiRendering: (self: CoreGui, enabled: boolean, guiAdornee: any, faceId: enum.Enum_NormalId, horizontalCurvature: number) -> (),
    TakeScreenshot: (self: CoreGui) -> (),
    ToggleRecording: (self: CoreGui) -> (),
}

export type PlayerGui = BasePlayerGui & {
    CurrentScreenOrientation: enum.Enum_ScreenOrientation,
    ScreenOrientation: enum.Enum_ScreenOrientation,
    SelectionImageObject: GuiObject,
}

export type StarterGui = BasePlayerGui & {
    ProcessUserInput: boolean,
    RtlTextSupport: enum.Enum_RtlTextSupport,
    ScreenOrientation: enum.Enum_ScreenOrientation,
    ShowDevelopmentGui: boolean,
    StudioDefaultStyleSheet: StyleSheet,
    StudioInsertWidgetLayerCollectorAutoLinkStyleSheet: StyleSheet,
    VirtualCursorMode: enum.Enum_VirtualCursorMode,
    GetCoreGuiEnabled: (self: StarterGui, coreGuiType: enum.Enum_CoreGuiType) -> boolean,
    RegisterGetCore: (self: StarterGui, parameterName: string, getFunction: any) -> (),
    RegisterSetCore: (self: StarterGui, parameterName: string, setFunction: any) -> (),
    SetCore: (self: StarterGui, parameterName: string, value: any) -> (),
    SetCoreGuiEnabled: (self: StarterGui, coreGuiType: enum.Enum_CoreGuiType, enabled: boolean) -> (),
    GetCore: (self: StarterGui, parameterName: string) -> any,
}

export type BaseRemoteEvent = Instance & {
}

export type RemoteEvent = BaseRemoteEvent & {
    FireAllClients: (self: RemoteEvent, ...any) -> (),
    FireClient: (self: RemoteEvent, player: Player, ...any) -> (),
    FireServer: (self: RemoteEvent, ...any) -> (),
}

export type UnreliableRemoteEvent = BaseRemoteEvent & {
    FireAllClients: (self: UnreliableRemoteEvent, ...any) -> (),
    FireClient: (self: UnreliableRemoteEvent, player: Player, ...any) -> (),
    FireServer: (self: UnreliableRemoteEvent, ...any) -> (),
}

export type BaseWrap = Instance & {
    CageMeshContent: any,
    CageMeshId: any,
    CageOrigin: datatypes.CFrame,
    CageOriginWorld: datatypes.CFrame,
    HSRAssetId: any,
    ImportInProcess: boolean,
    ImportOrigin: datatypes.CFrame,
    ImportOriginWorld: datatypes.CFrame,
    TemporaryCageMeshId: any,
    GetCageOffset: (self: BaseWrap) -> datatypes.Vector3,
    GetFaces: (self: BaseWrap, cageType: enum.Enum_CageType) -> {any},
    GetUVs: (self: BaseWrap, cageType: enum.Enum_CageType) -> {any},
    GetVertices: (self: BaseWrap, cageType: enum.Enum_CageType) -> {any},
    IsHSRReady: (self: BaseWrap) -> boolean,
    ModifyVertices: (self: BaseWrap, cageType: enum.Enum_CageType, vertices: {any}) -> (),
}

export type WrapDeformer = BaseWrap & {
    SetCageMeshContent: (self: WrapDeformer, content: any, cageOrigin: any) -> (),
    CreateEditableMeshAsync: (self: WrapDeformer) -> EditableMesh,
    GetDeformedCFrameAsync: (self: WrapDeformer, originalCFrame: datatypes.CFrame) -> datatypes.CFrame,
}

export type WrapLayer = BaseWrap & {
    AutoSkin: enum.Enum_WrapLayerAutoSkin,
    BindOffset: datatypes.CFrame,
    Color: datatypes.Color3,
    DebugMode: enum.Enum_WrapLayerDebugMode,
    Enabled: boolean,
    Order: number,
    Puffiness: number,
    ReferenceMeshContent: any,
    ReferenceMeshId: any,
    ReferenceOrigin: datatypes.CFrame,
    ReferenceOriginWorld: datatypes.CFrame,
    ShrinkFactor: number,
    TemporaryReferenceId: any,
}

export type WrapTarget = BaseWrap & {
    Color: datatypes.Color3,
    DebugMode: enum.Enum_WrapTargetDebugMode,
    Stiffness: number,
}

export type Beam = Instance & {
    Attachment0: Attachment,
    Attachment1: Attachment,
    Brightness: number,
    Color: datatypes.ColorSequence,
    CurveSize0: number,
    CurveSize1: number,
    Enabled: boolean,
    FaceCamera: boolean,
    LightEmission: number,
    LightInfluence: number,
    LocalTransparencyModifier: number,
    Segments: number,
    Texture: any,
    TextureLength: number,
    TextureMode: enum.Enum_TextureMode,
    TextureSpeed: number,
    Transparency: datatypes.NumberSequence,
    Width0: number,
    Width1: number,
    ZOffset: number,
    SetTextureOffset: (self: Beam, offset: number) -> (),
}

export type BindableEvent = Instance & {
    Fire: (self: BindableEvent, ...any) -> (),
}

export type BindableFunction = Instance & {
    Invoke: (self: BindableFunction, ...any) -> ...any,
}

export type BodyMover = Instance & {
}

export type BodyAngularVelocity = BodyMover & {
    AngularVelocity: datatypes.Vector3,
    MaxTorque: datatypes.Vector3,
    P: number,
}

export type BodyForce = BodyMover & {
    Force: datatypes.Vector3,
}

export type BodyGyro = BodyMover & {
    CFrame: datatypes.CFrame,
    D: number,
    MaxTorque: datatypes.Vector3,
    P: number,
}

export type BodyPosition = BodyMover & {
    D: number,
    MaxForce: datatypes.Vector3,
    P: number,
    Position: datatypes.Vector3,
    GetLastForce: (self: BodyPosition) -> datatypes.Vector3,
}

export type BodyThrust = BodyMover & {
    Force: datatypes.Vector3,
    Location: datatypes.Vector3,
}

export type BodyVelocity = BodyMover & {
    MaxForce: datatypes.Vector3,
    P: number,
    Velocity: datatypes.Vector3,
    GetLastForce: (self: BodyVelocity) -> datatypes.Vector3,
    lastForce: (self: BodyVelocity) -> datatypes.Vector3,
}

export type RocketPropulsion = BodyMover & {
    Active: boolean,
    CartoonFactor: number,
    MaxSpeed: number,
    MaxThrust: number,
    MaxTorque: datatypes.Vector3,
    Target: BasePart,
    TargetOffset: datatypes.Vector3,
    TargetRadius: number,
    ThrustD: number,
    ThrustP: number,
    TurnD: number,
    TurnP: number,
    Abort: (self: RocketPropulsion) -> (),
    Fire: (self: RocketPropulsion) -> (),
}

export type BodyPartDescription = Instance & {
    AssetId: buffer,
    BodyPart: enum.Enum_BodyPart,
    Color: datatypes.Color3,
    Instance: any,
}

export type Breakpoint = Instance & {
    Condition: string,
    ContinueExecution: boolean,
    Enabled: boolean,
    Id: number,
    Line: number,
    LogMessage: string,
    MetaBreakpointId: number,
    RemoveOnHit: boolean,
    Script: string,
    Valid: boolean,
    Verified: boolean,
}

export type BrowserService = Instance & {
    CloseBrowserWindow: (self: BrowserService) -> (),
    CopyAuthCookieFromBrowserToEngine: (self: BrowserService) -> (),
    EmitHybridEvent: (self: BrowserService, moduleName: string, eventName: string, params: string) -> (),
    ExecuteJavaScript: (self: BrowserService, javascript: string) -> (),
    OpenBrowserWindow: (self: BrowserService, url: string) -> (),
    OpenNativeOverlay: (self: BrowserService, title: string, url: string) -> (),
    OpenWeChatAuthWindow: (self: BrowserService) -> (),
    ReturnToJavaScript: (self: BrowserService, callbackId: string, success: boolean, params: string) -> (),
    SendCommand: (self: BrowserService, command: string) -> (),
}

export type BugReporterService = Instance & {
    IsAvailable: (self: BugReporterService) -> boolean,
}

export type BulkImportService = Instance & {
    LaunchBulkImport: (self: BulkImportService, assetTypeToImport: number) -> (),
    ShowBulkImportView: (self: BulkImportService) -> (),
}

export type CacheableContentProvider = Instance & {
}

export type HSRDataContentProvider = CacheableContentProvider & {
}

export type MeshContentProvider = CacheableContentProvider & {
    GetContentMemoryData: (self: MeshContentProvider) -> {[string]: any},
}

export type SolidModelContentProvider = CacheableContentProvider & {
}

export type CalloutService = Instance & {
    AttachCallout: (self: CalloutService, definitionId: string, locationId: string, target: any) -> (),
    DefineCallout: (self: CalloutService, definitionId: string, title: string, description: string, learnMoreURL: string) -> (),
    DetachCalloutsByDefinitionId: (self: CalloutService, definitionId: string) -> (),
}

export type CaptureService = Instance & {
    CaptureScreenshot: (self: CaptureService, onCaptureReady: any) -> (),
    DeleteCapture: (self: CaptureService, capturePath: string) -> (),
    OnCaptureBegan: (self: CaptureService) -> (),
    OnCaptureEnded: (self: CaptureService) -> (),
    OnCaptureShared: (self: CaptureService, capturePath: string) -> (),
    OnSavePromptFinished: (self: CaptureService, promptId: buffer, results: {[string]: any}) -> (),
    OnSharePromptFinished: (self: CaptureService, promptId: buffer, accepted: boolean) -> (),
    PromptSaveCapturesToGallery: (self: CaptureService, captures: {any}, resultCallback: any) -> (),
    PromptShareCapture: (self: CaptureService, captureContent: any, launchData: string, onAcceptedCallback: any, onDeniedCallback: any) -> (),
    RetrieveCaptures: (self: CaptureService) -> {any},
    SaveCaptureToExternalStorage: (self: CaptureService, capturePath: string) -> (),
    SaveScreenshotCapture: (self: CaptureService, additionalInfo: string) -> (),
    TakeCapture: (self: CaptureService, onCaptureReady: any, captureParams: {[string]: any}) -> (),
    CreatePostAsync: (self: CaptureService, pathArr: {any}, caption: string) -> {[string]: any},
    DeleteCapturesAsync: (self: CaptureService, pathArr: {any}) -> buffer,
    GetCaptureFilePathAsync: (self: CaptureService, captureContent: any) -> string,
    GetCaptureSizeAsync: (self: CaptureService, captureContent: any) -> datatypes.Vector2,
    GetCaptureStorageSizeAsync: (self: CaptureService, pathArr: {any}) -> buffer,
    GetCaptureUploadDataAsync: (self: CaptureService, capturePath: string) -> {[string]: any},
    SaveCapturesToExternalStorageAsync: (self: CaptureService, pathArr: {any}) -> buffer,
}

export type ChangeHistoryService = Instance & {
    FinishRecording: (self: ChangeHistoryService, identifier: string, operation: enum.Enum_FinishRecordingOperation, finalOptions: {[string]: any}) -> (),
    GetCanRedo: (self: ChangeHistoryService) -> ...any,
    GetCanUndo: (self: ChangeHistoryService) -> ...any,
    IsRecordingInProgress: (self: ChangeHistoryService, identifier: string) -> boolean,
    Redo: (self: ChangeHistoryService) -> (),
    ResetWaypoints: (self: ChangeHistoryService) -> (),
    SetEnabled: (self: ChangeHistoryService, state: boolean) -> (),
    SetWaypoint: (self: ChangeHistoryService, name: string) -> (),
    TryBeginRecording: (self: ChangeHistoryService, name: string, displayName: string) -> string,
    Undo: (self: ChangeHistoryService) -> (),
}

export type CharacterAppearance = Instance & {
}

export type BodyColors = CharacterAppearance & {
    HeadColor: datatypes.BrickColor,
    HeadColor3: datatypes.Color3,
    LeftArmColor: datatypes.BrickColor,
    LeftArmColor3: datatypes.Color3,
    LeftLegColor: datatypes.BrickColor,
    LeftLegColor3: datatypes.Color3,
    RightArmColor: datatypes.BrickColor,
    RightArmColor3: datatypes.Color3,
    RightLegColor: datatypes.BrickColor,
    RightLegColor3: datatypes.Color3,
    TorsoColor: datatypes.BrickColor,
    TorsoColor3: datatypes.Color3,
}

export type CharacterMesh = CharacterAppearance & {
    BaseTextureId: buffer,
    BodyPart: enum.Enum_BodyPart,
    MeshId: buffer,
    OverlayTextureId: buffer,
}

export type Clothing = CharacterAppearance & {
    Color3: datatypes.Color3,
    Outfit1: any,
    Outfit2: any,
}

export type Pants = Clothing & {
    PantsTemplate: any,
}

export type Shirt = Clothing & {
    ShirtTemplate: any,
}

export type ShirtGraphic = CharacterAppearance & {
    Color3: datatypes.Color3,
    Graphic: any,
}

export type Skin = CharacterAppearance & {
    SkinColor: datatypes.BrickColor,
}

export type Chat = Instance & {
    BubbleChatEnabled: boolean,
    IsAutoMigrated: boolean,
    LoadDefaultChat: boolean,
    Chat: (self: Chat, partOrCharacter: any, message: string, color: enum.Enum_ChatColor) -> (),
    ChatLocal: (self: Chat, partOrCharacter: any, message: string, color: enum.Enum_ChatColor) -> (),
    GetShouldUseLuaChat: (self: Chat) -> boolean,
    InvokeChatCallback: (self: Chat, callbackType: enum.Enum_ChatCallbackType, ...any) -> ...any,
    RegisterChatCallback: (self: Chat, callbackType: enum.Enum_ChatCallbackType, callbackFunction: any) -> (),
    SetBubbleChatSettings: (self: Chat, settings: any) -> (),
    CanUserChatAsync: (self: Chat, userId: buffer) -> boolean,
    CanUsersChatAsync: (self: Chat, userIdFrom: buffer, userIdTo: buffer) -> boolean,
    FilterStringAsync: (self: Chat, stringToFilter: string, playerFrom: Player, playerTo: Player) -> string,
    FilterStringForBroadcast: (self: Chat, stringToFilter: string, playerFrom: Player) -> string,
}

export type ChatbotUIService = Instance & {
    DisplayContent: (self: ChatbotUIService, contentType: string, data: {[string]: any}) -> (),
    GetSettings: (self: ChatbotUIService) -> {[string]: any},
}

export type ClickDetector = Instance & {
    CursorIcon: any,
    MaxActivationDistance: number,
}

export type DragDetector = ClickDetector & {
    ActivatedCursorIcon: any,
    ApplyAtCenterOfMass: boolean,
    Axis: datatypes.Vector3,
    DragFrame: datatypes.CFrame,
    DragStyle: enum.Enum_DragDetectorDragStyle,
    Enabled: boolean,
    GamepadModeSwitchKeyCode: enum.Enum_KeyCode,
    KeyboardModeSwitchKeyCode: enum.Enum_KeyCode,
    MaxDragAngle: number,
    MaxDragTranslation: datatypes.Vector3,
    MaxForce: number,
    MaxTorque: number,
    MinDragAngle: number,
    MinDragTranslation: datatypes.Vector3,
    Orientation: datatypes.Vector3,
    PermissionPolicy: enum.Enum_DragDetectorPermissionPolicy,
    PhysicalDragClickedPart: any,
    PhysicalDragHitPoint: datatypes.Vector3,
    PhysicalDragIsInVR: boolean,
    PhysicalDragTargetFrame: datatypes.CFrame,
    ReferenceInstance: any,
    ResponseStyle: enum.Enum_DragDetectorResponseStyle,
    Responsiveness: number,
    RunLocally: boolean,
    SecondaryAxis: datatypes.Vector3,
    TrackballRadialPullFactor: number,
    TrackballRollFactor: number,
    VRSwitchKeyCode: enum.Enum_KeyCode,
    WorldAxis: datatypes.Vector3,
    WorldSecondaryAxis: datatypes.Vector3,
    AddConstraintFunction: (self: DragDetector, priority: number, callback: any) -> any,
    GetReferenceFrame: (self: DragDetector) -> datatypes.CFrame,
    RestartDrag: (self: DragDetector) -> (),
    SetDragStyleFunction: (self: DragDetector, callback: any) -> (),
    SetPermissionPolicyFunction: (self: DragDetector, callback: any) -> (),
}

export type CloudCRUDService = Instance & {
}

export type Clouds = Instance & {
    Color: datatypes.Color3,
    Cover: number,
    Density: number,
    Enabled: boolean,
}

export type ClusterPacketCache = Instance & {
}

export type Collaborator = Instance & {
    CFrame: datatypes.CFrame,
    CollaboratorColor3: datatypes.Color3,
    CurDocGUID: string,
    CurScriptLineNumber: number,
    IsIdle: boolean,
    Status: enum.Enum_CollaboratorStatus,
    UserId: buffer,
    Username: string,
}

export type CollaboratorsService = Instance & {
    GetCollaboratorsList: (self: CollaboratorsService) -> any,
    GetSelectionHighlightsEnabled: (self: CollaboratorsService) -> boolean,
    RequestFlyToCollaborator: (self: CollaboratorsService, collaboratorId: buffer) -> (),
    ToggleSelectionHighlights: (self: CollaboratorsService, showHighlights: boolean) -> (),
    ToggleTeamCreate: (self: CollaboratorsService, on: boolean) -> (),
}

export type CollectionService = Instance & {
    AddTag: (self: CollectionService, instance: any, tag: string) -> (),
    GetAllTags: (self: CollectionService) -> {any},
    GetInstanceAddedSignal: (self: CollectionService, tag: string) -> any,
    GetInstanceRemovedSignal: (self: CollectionService, tag: string) -> any,
    GetTagged: (self: CollectionService, tag: string) -> any,
    GetTags: (self: CollectionService, instance: any) -> {any},
    HasTag: (self: CollectionService, instance: any, tag: string) -> boolean,
    RemoveTag: (self: CollectionService, instance: any, tag: string) -> (),
}

export type CommandInstance = Instance & {
    AllowGUIAccessPoints: boolean,
    Checked: boolean,
    DefaultShortcut: string,
    DisplayName: string,
    Enabled: boolean,
    Icon: string,
    Name: string,
    Permission: enum.Enum_CommandPermission,
    StatusTip: string,
    EnableGuiAccess: (self: CommandInstance, displayName: string, statusTip: string, defaultShortcut: string) -> (),
    RegisterExecutionCallback: (self: CommandInstance, callbackFunction: any) -> (),
}

export type CommandService = Instance & {
    Execute: (self: CommandService, name: string, params: any) -> any,
    RegisterCommand: (self: CommandService, plugin: Plugin, name: string, context: string, permission: enum.Enum_CommandPermission) -> CommandInstance,
}

export type CommerceService = Instance & {
    PromptCommerceProductPurchase: (self: CommerceService, user: Player, commerceProductId: string) -> (),
    PromptRealWorldCommerceBrowser: (self: CommerceService, player: Player, url: string) -> (),
    SignalPromptCommerceProductPurchaseFinished: (self: CommerceService, productId: string, didTryPurchase: boolean, checkoutSessionId: string) -> (),
    GetCommerceProductInfoAsync: (self: CommerceService, commerceProductId: string) -> {[string]: any},
    PrepareCommerceProductPurchase: (self: CommerceService, commerceProductId: string) -> {[string]: any},
    UserEligibleForRealWorldCommerceAsync: (self: CommerceService) -> boolean,
}

export type ConfigService = Instance & {
    GetConfigAsync: (self: ConfigService) -> ConfigSnapshot,
    GetConfigForPlayerAsync: (self: ConfigService, player: Player) -> ConfigSnapshot,
}

export type Configuration = Instance & {
}

export type ConfigureServerService = Instance & {
}

export type ConnectivityService = Instance & {
    NetworkStatus: enum.Enum_NetworkStatus,
    IsNetworkStateAvailable: (self: ConnectivityService) -> boolean,
}

export type Constraint = Instance & {
    Active: boolean,
    Attachment0: Attachment,
    Attachment1: Attachment,
    Color: datatypes.BrickColor,
    Enabled: boolean,
    Visible: boolean,
}

export type AlignOrientation = Constraint & {
    AlignType: enum.Enum_AlignType,
    CFrame: datatypes.CFrame,
    LookAtPosition: datatypes.Vector3,
    MaxAngularVelocity: number,
    MaxTorque: number,
    Mode: enum.Enum_OrientationAlignmentMode,
    PrimaryAxis: datatypes.Vector3,
    PrimaryAxisOnly: boolean,
    ReactionTorqueEnabled: boolean,
    Responsiveness: number,
    RigidityEnabled: boolean,
    SecondaryAxis: datatypes.Vector3,
}

export type AlignPosition = Constraint & {
    ApplyAtCenterOfMass: boolean,
    ForceLimitMode: enum.Enum_ForceLimitMode,
    ForceRelativeTo: enum.Enum_ActuatorRelativeTo,
    MaxAxesForce: datatypes.Vector3,
    MaxForce: number,
    MaxVelocity: number,
    Mode: enum.Enum_PositionAlignmentMode,
    Position: datatypes.Vector3,
    ReactionForceEnabled: boolean,
    Responsiveness: number,
    RigidityEnabled: boolean,
}

export type AngularVelocity = Constraint & {
    AngularVelocity: datatypes.Vector3,
    MaxTorque: number,
    ReactionTorqueEnabled: boolean,
    RelativeTo: enum.Enum_ActuatorRelativeTo,
}

export type AnimationConstraint = Constraint & {
    IsKinematic: boolean,
    MaxForce: number,
    MaxTorque: number,
    Transform: datatypes.CFrame,
}

export type BallSocketConstraint = Constraint & {
    LimitsEnabled: boolean,
    MaxFrictionTorque: number,
    MaxFrictionTorqueXml: number,
    Radius: number,
    Restitution: number,
    TwistLimitsEnabled: boolean,
    TwistLowerAngle: number,
    TwistUpperAngle: number,
    UpperAngle: number,
}

export type HingeConstraint = Constraint & {
    ActuatorType: enum.Enum_ActuatorType,
    AngularResponsiveness: number,
    AngularSpeed: number,
    AngularVelocity: number,
    CurrentAngle: number,
    LimitsEnabled: boolean,
    LowerAngle: number,
    MotorMaxAcceleration: number,
    MotorMaxTorque: number,
    Radius: number,
    Restitution: number,
    ServoMaxTorque: number,
    TargetAngle: number,
    UpperAngle: number,
}

export type LineForce = Constraint & {
    ApplyAtCenterOfMass: boolean,
    InverseSquareLaw: boolean,
    Magnitude: number,
    MaxForce: number,
    ReactionForceEnabled: boolean,
}

export type LinearVelocity = Constraint & {
    ForceLimitMode: enum.Enum_ForceLimitMode,
    ForceLimitsEnabled: boolean,
    LineDirection: datatypes.Vector3,
    LineVelocity: number,
    MaxAxesForce: datatypes.Vector3,
    MaxForce: number,
    MaxPlanarAxesForce: datatypes.Vector2,
    PlaneVelocity: datatypes.Vector2,
    PrimaryTangentAxis: datatypes.Vector3,
    RelativeTo: enum.Enum_ActuatorRelativeTo,
    SecondaryTangentAxis: datatypes.Vector3,
    VectorVelocity: datatypes.Vector3,
    VelocityConstraintMode: enum.Enum_VelocityConstraintMode,
}

export type PlaneConstraint = Constraint & {
}

export type Plane = PlaneConstraint & {
}

export type RigidConstraint = Constraint & {
}

export type RodConstraint = Constraint & {
    CurrentDistance: number,
    Length: number,
    LimitAngle0: number,
    LimitAngle1: number,
    LimitsEnabled: boolean,
    Thickness: number,
}

export type RopeConstraint = Constraint & {
    CurrentDistance: number,
    Length: number,
    Restitution: number,
    Thickness: number,
    WinchEnabled: boolean,
    WinchForce: number,
    WinchResponsiveness: number,
    WinchSpeed: number,
    WinchTarget: number,
}

export type SlidingBallConstraint = Constraint & {
    ActuatorType: enum.Enum_ActuatorType,
    CurrentPosition: number,
    LimitsEnabled: boolean,
    LinearResponsiveness: number,
    LowerLimit: number,
    MotorMaxAcceleration: number,
    MotorMaxForce: number,
    Restitution: number,
    ServoMaxForce: number,
    Size: number,
    Speed: number,
    TargetPosition: number,
    UpperLimit: number,
    Velocity: number,
}

export type CylindricalConstraint = SlidingBallConstraint & {
    AngularActuatorType: enum.Enum_ActuatorType,
    AngularLimitsEnabled: boolean,
    AngularResponsiveness: number,
    AngularRestitution: number,
    AngularSpeed: number,
    AngularVelocity: number,
    CurrentAngle: number,
    InclinationAngle: number,
    LowerAngle: number,
    MotorMaxAngularAcceleration: number,
    MotorMaxTorque: number,
    RotationAxisVisible: boolean,
    ServoMaxTorque: number,
    TargetAngle: number,
    UpperAngle: number,
    WorldRotationAxis: datatypes.Vector3,
}

export type PrismaticConstraint = SlidingBallConstraint & {
}

export type SpringConstraint = Constraint & {
    Coils: number,
    CurrentLength: number,
    Damping: number,
    FreeLength: number,
    LimitsEnabled: boolean,
    MaxForce: number,
    MaxLength: number,
    MinLength: number,
    Radius: number,
    Stiffness: number,
    Thickness: number,
}

export type Torque = Constraint & {
    RelativeTo: enum.Enum_ActuatorRelativeTo,
    Torque: datatypes.Vector3,
}

export type TorsionSpringConstraint = Constraint & {
    Coils: number,
    CurrentAngle: number,
    Damping: number,
    LimitsEnabled: boolean,
    MaxAngle: number,
    MaxTorque: number,
    Radius: number,
    Restitution: number,
    Stiffness: number,
}

export type UniversalConstraint = Constraint & {
    LimitsEnabled: boolean,
    MaxAngle: number,
    Radius: number,
    Restitution: number,
}

export type VectorForce = Constraint & {
    ApplyAtCenterOfMass: boolean,
    Force: datatypes.Vector3,
    RelativeTo: enum.Enum_ActuatorRelativeTo,
}

export type ContentProvider = Instance & {
    BaseUrl: string,
    RequestQueueSize: number,
    GetAssetFetchStatus: (self: ContentProvider, contentId: any) -> enum.Enum_AssetFetchStatus,
    GetAssetFetchStatusChangedSignal: (self: ContentProvider, contentId: any) -> any,
    GetDependencyContentIds: (self: ContentProvider, root: any) -> {any},
    GetFailedRequests: (self: ContentProvider) -> {any},
    ListEncryptedAssets: (self: ContentProvider) -> {any},
    RegisterDefaultEncryptionKey: (self: ContentProvider, encryptionKey: string) -> (),
    RegisterDefaultSessionKey: (self: ContentProvider, sessionKey: string) -> (),
    RegisterEncryptedAsset: (self: ContentProvider, assetId: any, encryptionKey: string) -> (),
    RegisterSessionEncryptedAsset: (self: ContentProvider, contentId: any, sessionKey: string) -> (),
    SetBaseUrl: (self: ContentProvider, url: string) -> (),
    UnregisterDefaultEncryptionKey: (self: ContentProvider) -> (),
    UnregisterEncryptedAsset: (self: ContentProvider, assetId: any) -> (),
    PreloadAsync: (self: ContentProvider, contentIdList: {any}, callbackFunction: any) -> (),
}

export type ContextActionService = Instance & {
    BindAction: (self: ContextActionService, actionName: string, functionToBind: any, createTouchButton: boolean, ...any) -> (),
    BindActionAtPriority: (self: ContextActionService, actionName: string, functionToBind: any, createTouchButton: boolean, priorityLevel: number, ...any) -> (),
    BindActivate: (self: ContextActionService, userInputTypeForActivation: enum.Enum_UserInputType, ...any) -> (),
    BindCoreAction: (self: ContextActionService, actionName: string, functionToBind: any, createTouchButton: boolean, ...any) -> (),
    BindCoreActionAtPriority: (self: ContextActionService, actionName: string, functionToBind: any, createTouchButton: boolean, priorityLevel: number, ...any) -> (),
    BindCoreActivate: (self: ContextActionService, userInputTypeForActivation: enum.Enum_UserInputType, ...any) -> (),
    CallFunction: (self: ContextActionService, actionName: string, state: enum.Enum_UserInputState, inputObject: any) -> ...any,
    FireActionButtonFoundSignal: (self: ContextActionService, actionName: string, actionButton: any) -> (),
    GetAllBoundActionInfo: (self: ContextActionService) -> {[string]: any},
    GetAllBoundCoreActionInfo: (self: ContextActionService) -> {[string]: any},
    GetBoundActionInfo: (self: ContextActionService, actionName: string) -> {[string]: any},
    GetBoundCoreActionInfo: (self: ContextActionService, actionName: string) -> {[string]: any},
    GetCurrentLocalToolIcon: (self: ContextActionService) -> string,
    SetDescription: (self: ContextActionService, actionName: string, description: string) -> (),
    SetImage: (self: ContextActionService, actionName: string, image: string) -> (),
    SetPosition: (self: ContextActionService, actionName: string, position: datatypes.UDim2) -> (),
    SetTitle: (self: ContextActionService, actionName: string, title: string) -> (),
    UnbindAction: (self: ContextActionService, actionName: string) -> (),
    UnbindActivate: (self: ContextActionService, userInputTypeForActivation: enum.Enum_UserInputType, keyCodeForActivation: enum.Enum_KeyCode) -> (),
    UnbindAllActions: (self: ContextActionService) -> (),
    UnbindCoreAction: (self: ContextActionService, actionName: string) -> (),
    UnbindCoreActivate: (self: ContextActionService, userInputTypeForActivation: enum.Enum_UserInputType, keyCodeForActivation: enum.Enum_KeyCode) -> (),
    GetButton: (self: ContextActionService, actionName: string) -> any,
}

export type Controller = Instance & {
    BindButton: (self: Controller, button: enum.Enum_Button, caption: string) -> (),
    GetButton: (self: Controller, button: enum.Enum_Button) -> boolean,
    UnbindButton: (self: Controller, button: enum.Enum_Button) -> (),
}

export type HumanoidController = Controller & {
}

export type SkateboardController = Controller & {
    Steer: number,
    Throttle: number,
}

export type VehicleController = Controller & {
}

export type ControllerBase = Instance & {
    Active: boolean,
    BalanceRigidityEnabled: boolean,
    MoveSpeedFactor: number,
}

export type AirController = ControllerBase & {
    BalanceMaxTorque: number,
    BalanceSpeed: number,
    LinearImpulse: datatypes.Vector3,
    MaintainAngularMomentum: boolean,
    MaintainLinearMomentum: boolean,
    MoveMaxForce: number,
    TurnMaxTorque: number,
    TurnSpeedFactor: number,
}

export type ClimbController = ControllerBase & {
    AccelerationTime: number,
    BalanceMaxTorque: number,
    BalanceSpeed: number,
    MoveMaxForce: number,
}

export type GroundController = ControllerBase & {
    AccelerationLean: number,
    AccelerationTime: number,
    BalanceMaxTorque: number,
    BalanceSpeed: number,
    DecelerationTime: number,
    Friction: number,
    FrictionWeight: number,
    GroundOffset: number,
    StandForce: number,
    StandSpeed: number,
    TurnSpeedFactor: number,
}

export type SwimController = ControllerBase & {
    AccelerationTime: number,
    PitchMaxTorque: number,
    PitchSpeedFactor: number,
    RollMaxTorque: number,
    RollSpeedFactor: number,
}

export type ControllerManager = Instance & {
    ActiveController: ControllerBase,
    BaseMoveSpeed: number,
    BaseTurnSpeed: number,
    ClimbSensor: ControllerSensor,
    FacingDirection: datatypes.Vector3,
    GroundSensor: ControllerSensor,
    MovingDirection: datatypes.Vector3,
    RootPart: BasePart,
    UpDirection: datatypes.Vector3,
}

export type ControllerService = Instance & {
}

export type ConversationalAIAcceptanceService = Instance & {
    AlternativeAssetSelected: (self: ConversationalAIAcceptanceService, requestId: string, previousAssetId: buffer, assetId: buffer) -> (),
    AssetInserted: (self: ConversationalAIAcceptanceService, requestId: string, assetId: buffer) -> (),
    CodeRunnerActivated: (self: ConversationalAIAcceptanceService, requestId: string, code: string, serverAutorun: boolean, autorunEnabled: boolean, autoExpandDropdowns: boolean) -> (),
    CodeRunnerCompleted: (self: ConversationalAIAcceptanceService, requestId: string, success: boolean, errorMessage: string) -> (),
    CodeRunnerUndone: (self: ConversationalAIAcceptanceService, requestId: string) -> (),
    DataModelHierarchyLatency: (self: ConversationalAIAcceptanceService, requestId: string, latency: number) -> (),
    ErrorTelemetry: (self: ConversationalAIAcceptanceService, requestId: string, errorId: string, errorType: string, errorMessage: string) -> (),
    InstanceInserted: (self: ConversationalAIAcceptanceService, requestId: string) -> (),
    RecordingActionEnded: (self: ConversationalAIAcceptanceService, requestId: string, waypointName: string) -> (),
    ReportJSONEncodeFailure: (self: ConversationalAIAcceptanceService, instanceName: string, className: string) -> (),
    SendCommandErrorTelemetry: (self: ConversationalAIAcceptanceService, requestId: string, commandName: string, errorMessage: string) -> (),
    SendMeshGenActivatedTelemetry: (self: ConversationalAIAcceptanceService) -> (),
    SendMeshGenCompletedTelemetry: (self: ConversationalAIAcceptanceService, requestId: string, generationId: string, success: boolean, errorMessage: string, prompt: string) -> (),
    SendMeshGenMeshInsertedTelemetry: (self: ConversationalAIAcceptanceService, requestId: string, generationId: string, success: boolean, errorMessage: string) -> (),
    SendMeshGenPublishedAssetsTelemetry: (self: ConversationalAIAcceptanceService, requestId: string, generationId: string, success: boolean, errorMessage: string, meshId: buffer, imageId: buffer) -> (),
}

export type CookiesService = Instance & {
}

export type CorePackages = Instance & {
}

export type CoreScriptDebuggingManagerHelper = Instance & {
}

export type CoreScriptSyncService = Instance & {
    GetScriptFilePath: (self: CoreScriptSyncService, script: any) -> any,
}

export type CreationDBService = Instance & {
}

export type CreatorStoreService = Instance & {
    GetAssetInfoAsync: (self: CreatorStoreService, assetId: buffer) -> {[string]: any},
    GetCreatorStoreProductInfoAsync: (self: CreatorStoreService, productTargetId: buffer, assetType: string) -> {[string]: any},
    PerformCreatorStorePurchase: (self: CreatorStoreService, productTargetId: buffer, assetType: string) -> {[string]: any},
}

export type CrossDMScriptChangeListener = Instance & {
    IsWatchingScriptLine: (self: CrossDMScriptChangeListener, scriptRef: string, lineNumber: number) -> boolean,
    StartWatchingScriptLine: (self: CrossDMScriptChangeListener, scriptRef: string, debuggerConnectionId: number, lineNumber: number) -> (),
}

export type CustomEvent = Instance & {
    PersistedCurrentValue: number,
    GetAttachedReceivers: (self: CustomEvent) -> any,
    SetValue: (self: CustomEvent, newValue: number) -> (),
}

export type CustomEventReceiver = Instance & {
    Source: any,
    GetCurrentValue: (self: CustomEventReceiver) -> number,
}

export type CustomLog = Instance & {
    Close: (self: CustomLog) -> (),
    GetLogPath: (self: CustomLog) -> string,
    Open: (self: CustomLog) -> (),
    WriteAppend: (self: CustomLog, append: string) -> (),
}

export type DataModelMesh = Instance & {
    Offset: datatypes.Vector3,
    Scale: datatypes.Vector3,
    VertexColor: datatypes.Vector3,
}

export type BevelMesh = DataModelMesh & {
    Bevel: number,
    ["Bevel Roundness"]: number,
    Bulge: number,
}

export type BlockMesh = BevelMesh & {
}

export type CylinderMesh = BevelMesh & {
}

export type FileMesh = DataModelMesh & {
    MeshId: any,
    TextureId: any,
}

export type SpecialMesh = FileMesh & {
    MeshType: enum.Enum_MeshType,
}

export type DataModelPatchService = Instance & {
    GetLuaVersion: (self: DataModelPatchService, patchName: string) -> string,
    GetPatch: (self: DataModelPatchService, patchName: string) -> any,
    RegisterPatch: (self: DataModelPatchService, patchName: string, behaviorName: string, localConfigPath: string, userId: buffer) -> (),
    UpdatePatch: (self: DataModelPatchService, userId: buffer, patchName: string, callbackFunction: any) -> (),
}

export type DataModelSession = Instance & {
    CurrentDataModelType: enum.Enum_StudioDataModelType,
    SessionId: string,
}

export type DataStoreGetOptions = Instance & {
    UseCache: boolean,
}

export type DataStoreIncrementOptions = Instance & {
    GetMetadata: (self: DataStoreIncrementOptions) -> {[string]: any},
    SetMetadata: (self: DataStoreIncrementOptions, attributes: {[string]: any}) -> (),
}

export type DataStoreInfo = Instance & {
    CreatedTime: buffer,
    DataStoreName: string,
    UpdatedTime: buffer,
}

export type DataStoreKey = Instance & {
    KeyName: string,
}

export type DataStoreKeyInfo = Instance & {
    CreatedTime: buffer,
    UpdatedTime: buffer,
    Version: string,
    GetMetadata: (self: DataStoreKeyInfo) -> {[string]: any},
    GetUserIds: (self: DataStoreKeyInfo) -> {any},
}

export type DataStoreObjectVersionInfo = Instance & {
    CreatedTime: buffer,
    IsDeleted: boolean,
    Version: string,
}

export type DataStoreOptions = Instance & {
    AllScopes: boolean,
    SetExperimentalFeatures: (self: DataStoreOptions, experimentalFeatures: {[string]: any}) -> (),
}

export type DataStoreService = Instance & {
    AutomaticRetry: boolean,
    GetDataStore: (self: DataStoreService, name: string, scope: string, options: any) -> DataStore,
    GetGlobalDataStore: (self: DataStoreService) -> DataStore,
    GetOrderedDataStore: (self: DataStoreService, name: string, scope: string) -> OrderedDataStore,
    GetRequestBudgetForRequestType: (self: DataStoreService, requestType: enum.Enum_DataStoreRequestType) -> number,
    ListDataStoresAsync: (self: DataStoreService, prefix: string, pageSize: number, cursor: string) -> DataStoreListingPages,
}

export type DataStoreSetOptions = Instance & {
    GetMetadata: (self: DataStoreSetOptions) -> {[string]: any},
    SetMetadata: (self: DataStoreSetOptions, attributes: {[string]: any}) -> (),
}

export type Debris = Instance & {
    AddItem: (self: Debris, item: any, lifetime: number) -> (),
    SetLegacyMaxItems: (self: Debris, enabled: boolean) -> (),
}

export type DebugSettings = Instance & {
    DataModel: number,
    InstanceCount: number,
    IsScriptStackTracingEnabled: boolean,
    JobCount: number,
    PlayerCount: number,
    ReportSoundWarnings: boolean,
    RobloxVersion: string,
    TickCountPreciseOverride: enum.Enum_TickCountSampleMethod,
}

export type DebuggablePluginWatcher = Instance & {
}

export type DebuggerBreakpoint = Instance & {
    Condition: string,
    ContinueExecution: boolean,
    IsEnabled: boolean,
    Line: number,
    LogExpression: string,
    isContextDependentBreakpoint: boolean,
    line: number,
}

export type DebuggerConnection = Instance & {
    ErrorMessage: string,
    HasError: boolean,
    Id: number,
    IsPaused: boolean,
    AddBreakpoint: (self: DebuggerConnection, script: string, line: number, breakpoint: Breakpoint) -> (),
    Close: (self: DebuggerConnection) -> (),
    EvaluateWatch: (self: DebuggerConnection, expression: string, frame: StackFrame, callback: any) -> number,
    GetFrameById: (self: DebuggerConnection, id: number) -> StackFrame,
    GetSource: (self: DebuggerConnection, scriptRef: string, status: any) -> number,
    GetThreadById: (self: DebuggerConnection, id: number) -> ThreadState,
    GetThreads: (self: DebuggerConnection, callback: any) -> number,
    GetVariableById: (self: DebuggerConnection, id: number) -> DebuggerVariable,
    Pause: (self: DebuggerConnection, thread: ThreadState, status: any) -> number,
    Populate: (self: DebuggerConnection, instance: any, callback: any) -> number,
    RemoveBreakpoint: (self: DebuggerConnection, breakpoint: Breakpoint) -> (),
    Resume: (self: DebuggerConnection, thread: ThreadState, status: any) -> number,
    SetExceptionBreakMode: (self: DebuggerConnection, breakMode: enum.Enum_DebuggerExceptionBreakMode, callback: any) -> number,
    SetVariable: (self: DebuggerConnection, variable: DebuggerVariable, value: string, callback: any) -> number,
    Step: (self: DebuggerConnection, thread: ThreadState, callback: any) -> number,
    StepIn: (self: DebuggerConnection, thread: ThreadState, callback: any) -> number,
    StepOut: (self: DebuggerConnection, thread: ThreadState, callback: any) -> number,
    UpdateSelectedFrame: (self: DebuggerConnection, threadId: number, frameNumber: number) -> (),
}

export type LocalDebuggerConnection = DebuggerConnection & {
}

export type DebuggerConnectionManager = Instance & {
    Timeout: number,
    ConnectLocal: (self: DebuggerConnectionManager, dataModel: DataModel) -> number,
    ConnectRemote: (self: DebuggerConnectionManager, host: string, port: number) -> number,
    FocusConnection: (self: DebuggerConnectionManager, connection: DebuggerConnection) -> (),
    GetAvailableConnection: (self: DebuggerConnectionManager) -> DebuggerConnection,
    GetConnectionById: (self: DebuggerConnectionManager, id: number) -> DebuggerConnection,
}

export type DebuggerLuaResponse = Instance & {
    IsError: boolean,
    IsSuccess: boolean,
    Message: string,
    RequestId: number,
    Status: enum.Enum_DebuggerStatus,
    GetArg: (self: DebuggerLuaResponse) -> any,
}

export type DebuggerManager = Instance & {
    DebuggingEnabled: boolean,
    AddDebugger: (self: DebuggerManager, script: any) -> any,
    EnableDebugging: (self: DebuggerManager) -> (),
    GetDebuggers: (self: DebuggerManager) -> any,
    Resume: (self: DebuggerManager) -> (),
}

export type DebuggerUIService = Instance & {
    EditBreakpoint: (self: DebuggerUIService, metaBreakpointId: number) -> (),
    EditWatch: (self: DebuggerUIService, expression: string) -> (),
    IsConnectionForPlayDataModel: (self: DebuggerUIService, debuggerConnectionId: number) -> boolean,
    OpenExceptionMessagePopup: (self: DebuggerUIService, exceptionMessage: string, pausedLine: number) -> (),
    OpenScriptAtLine: (self: DebuggerUIService, guid: string, debuggerConnectionId: number, line: number, showErrorOnFail: boolean) -> (),
    Pause: (self: DebuggerUIService) -> (),
    RemoveScriptLineMarkers: (self: DebuggerUIService, debuggerConnectionId: number, allMarkers: boolean) -> (),
    Resume: (self: DebuggerUIService) -> (),
    SetCurrentThreadId: (self: DebuggerUIService, debuggerThreadId: number) -> (),
    SetScriptLineMarker: (self: DebuggerUIService, guid: string, debuggerConnectionId: number, line: number, lineMarkerType: boolean) -> (),
    SetWatchExpressions: (self: DebuggerUIService, expressions: {any}) -> (),
}

export type DebuggerVariable = Instance & {
    Name: string,
    Populated: boolean,
    Type: string,
    Value: string,
    VariableId: number,
    VariablesCount: number,
    GetVariableByIndex: (self: DebuggerVariable, index: number) -> DebuggerVariable,
    GetVariableByName: (self: DebuggerVariable, name: string) -> DebuggerVariable,
}

export type DebuggerWatch = Instance & {
    Expression: string,
}

export type DeviceIdService = Instance & {
    GetDeviceId: (self: DeviceIdService) -> string,
}

export type Dialog = Instance & {
    BehaviorType: enum.Enum_DialogBehaviorType,
    ConversationDistance: number,
    GoodbyeChoiceActive: boolean,
    GoodbyeDialog: string,
    InUse: boolean,
    InitialPrompt: string,
    Purpose: enum.Enum_DialogPurpose,
    Tone: enum.Enum_DialogTone,
    TriggerDistance: number,
    TriggerOffset: datatypes.Vector3,
    GetCurrentPlayers: (self: Dialog) -> any,
    SetPlayerIsUsing: (self: Dialog, player: any, isUsing: boolean) -> (),
    SignalDialogChoiceSelected: (self: Dialog, player: any, dialogChoice: any) -> (),
}

export type DialogChoice = Instance & {
    GoodbyeChoiceActive: boolean,
    GoodbyeDialog: string,
    ResponseDialog: string,
    UserDialog: string,
}

export type DraftsService = Instance & {
    DiscardEdits: (self: DraftsService, scripts: any) -> (),
    GetDraftStatus: (self: DraftsService, script: any) -> enum.Enum_DraftStatusCode,
    GetEditors: (self: DraftsService, script: any) -> any,
    RestoreScripts: (self: DraftsService, scripts: any) -> (),
    ShowDiffsAgainstBase: (self: DraftsService, scripts: any) -> (),
    ShowDiffsAgainstServer: (self: DraftsService, scripts: any) -> (),
    ShowSourceDiffsAgainstCurrent: (self: DraftsService, sources: {any}, scripts: any) -> (),
    CommitEdits: (self: DraftsService, scripts: any) -> (),
    GetDrafts: (self: DraftsService) -> any,
    UpdateToLatestVersion: (self: DraftsService, scripts: any) -> (),
}

export type Dragger = Instance & {
    AxisRotate: (self: Dragger, axis: enum.Enum_Axis) -> (),
    MouseDown: (self: Dragger, mousePart: any, pointOnMousePart: datatypes.Vector3, parts: any) -> (),
    MouseMove: (self: Dragger, mouseRay: datatypes.Ray) -> (),
    MouseUp: (self: Dragger) -> (),
}

export type DraggerService = Instance & {
    AlignDraggedObjects: boolean,
    AngleSnapEnabled: boolean,
    AngleSnapIncrement: number,
    AnimateHover: boolean,
    CollisionsEnabled: boolean,
    DraggerCoordinateSpace: enum.Enum_DraggerCoordinateSpace,
    DraggerMovementMode: enum.Enum_DraggerMovementMode,
    GeometrySnapColor: datatypes.Color3,
    HoverAnimateFrequency: number,
    HoverLineThickness: number,
    HoverThickness: number,
    JointsEnabled: boolean,
    LinearSnapEnabled: boolean,
    LinearSnapIncrement: number,
    PartSnapEnabled: boolean,
    PivotSnapToGeometry: boolean,
    ShowHover: boolean,
    ShowPivotIndicator: boolean,
}

export type EditableService = Instance & {
    EditableStatus: enum.Enum_EditableStatus,
}

export type EulerRotationCurve = Instance & {
    RotationOrder: enum.Enum_RotationOrder,
    GetAnglesAtTime: (self: EulerRotationCurve, time: number) -> {any},
    GetRotationAtTime: (self: EulerRotationCurve, time: number) -> datatypes.CFrame,
    X: (self: EulerRotationCurve) -> FloatCurve,
    Y: (self: EulerRotationCurve) -> FloatCurve,
    Z: (self: EulerRotationCurve) -> FloatCurve,
}

export type EventIngestService = Instance & {
    SendEventDeferred: (self: EventIngestService, target: string, eventContext: string, eventName: string, additionalArgs: {[string]: any}) -> (),
    SendEventImmediately: (self: EventIngestService, target: string, eventContext: string, eventName: string, additionalArgs: {[string]: any}) -> (),
    SetRBXEvent: (self: EventIngestService, target: string, eventContext: string, eventName: string, additionalArgs: {[string]: any}) -> (),
    SetRBXEventStream: (self: EventIngestService, target: string, eventContext: string, eventName: string, additionalArgs: {[string]: any}) -> (),
}

export type ExampleService = Instance & {
    PrintHello: (self: ExampleService) -> (),
}

export type ExperienceAuthService = Instance & {
    ScopeCheckUIComplete: (self: ExperienceAuthService, guid: string, scopes: {any}, result: enum.Enum_ScopeCheckResult, metadata: {[string]: any}) -> (),
}

export type ExperienceInviteOptions = Instance & {
    InviteMessageId: string,
    InviteUser: buffer,
    LaunchData: string,
    PromptMessage: string,
}

export type ExperienceNotificationService = Instance & {
    InvokeOptInPromptClosed: (self: ExperienceNotificationService) -> (),
    PromptOptIn: (self: ExperienceNotificationService) -> (),
    CanPromptOptInAsync: (self: ExperienceNotificationService) -> boolean,
}

export type ExperienceService = Instance & {
    ExecuteCrossExperienceCall: (self: ExperienceService, callId: string, params: {[string]: any}, successCallback: any, errorCallback: any) -> (),
    GetPendingJoinAttempt: (self: ExperienceService) -> {[string]: any},
    LaunchExperience: (self: ExperienceService, params: {[string]: any}) -> string,
    LaunchExperienceFromSource: (self: ExperienceService, params: {[string]: any}, source: string) -> string,
    LaunchExperienceFromSourceWithCallback: (self: ExperienceService, params: {[string]: any}, source: string, callback: any) -> (),
    RegisterForExperienceJoin: (self: ExperienceService, callback: any) -> any,
    RegisterForExperienceLeave: (self: ExperienceService, callback: any) -> any,
    StartCrossExperience: (self: ExperienceService, type: string, params: {[string]: any}) -> (),
    StopCrossExperience: (self: ExperienceService, type: string, params: {[string]: any}) -> (),
}

export type ExperienceStateCaptureService = Instance & {
    HiddenSelectionEnabled: boolean,
    IsInBackground: boolean,
    IsInCaptureMode: boolean,
    CanEnterCaptureMode: (self: ExperienceStateCaptureService) -> boolean,
    ResetHighlight: (self: ExperienceStateCaptureService) -> (),
    ToggleCaptureMode: (self: ExperienceStateCaptureService) -> (),
}

export type ExplorerFilter = Instance & {
    GetAutocompleter: (self: ExplorerFilter) -> ExplorerFilterAutocompleter,
    GetErrors: (self: ExplorerFilter) -> {any},
    GetLexemes: (self: ExplorerFilter) -> {any},
    InstancePassesFilter: (self: ExplorerFilter, instance: any) -> boolean,
    SetFilter: (self: ExplorerFilter, search: string) -> (),
}

export type ExplorerFilterAutocompleter = Instance & {
    ReplaceRange: datatypes.Vector2,
    RequiresOutsideContext: boolean,
    GetSuggestions: (self: ExplorerFilterAutocompleter) -> {any},
}

export type ExplorerServiceVisibilityService = Instance & {
    GetServiceVisibility: (self: ExplorerServiceVisibilityService, service: any) -> boolean,
}

export type Explosion = Instance & {
    BlastPressure: number,
    BlastRadius: number,
    DestroyJointRadiusPercent: number,
    ExplosionType: enum.Enum_ExplosionType,
    LocalTransparencyModifier: number,
    Position: datatypes.Vector3,
    TimeScale: number,
    Visible: boolean,
}

export type FaceAnimatorService = Instance & {
    AudioAnimationEnabled: boolean,
    FaceTrackingStatusEnum: enum.Enum_TrackerFaceTrackingStatus,
    FlipHeadOrientation: boolean,
    VideoAnimationEnabled: boolean,
    GetTrackerLodController: (self: FaceAnimatorService) -> TrackerLodController,
    Init: (self: FaceAnimatorService, videoEnabled: boolean, audioEnabled: boolean) -> (),
    IsStarted: (self: FaceAnimatorService) -> boolean,
    Start: (self: FaceAnimatorService) -> (),
    Step: (self: FaceAnimatorService) -> (),
    Stop: (self: FaceAnimatorService) -> (),
}

export type FaceControls = Instance & {
    ChinRaiser: number,
    ChinRaiserUpperLip: number,
    Corrugator: number,
    EyesLookDown: number,
    EyesLookLeft: number,
    EyesLookRight: number,
    EyesLookUp: number,
    FlatPucker: number,
    Funneler: number,
    JawDrop: number,
    JawLeft: number,
    JawRight: number,
    LeftBrowLowerer: number,
    LeftCheekPuff: number,
    LeftCheekRaiser: number,
    LeftDimpler: number,
    LeftEyeClosed: number,
    LeftEyeUpperLidRaiser: number,
    LeftInnerBrowRaiser: number,
    LeftLipCornerDown: number,
    LeftLipCornerPuller: number,
    LeftLipStretcher: number,
    LeftLowerLipDepressor: number,
    LeftNoseWrinkler: number,
    LeftOuterBrowRaiser: number,
    LeftUpperLipRaiser: number,
    LipPresser: number,
    LipsTogether: number,
    LowerLipSuck: number,
    MouthLeft: number,
    MouthRight: number,
    Pucker: number,
    RightBrowLowerer: number,
    RightCheekPuff: number,
    RightCheekRaiser: number,
    RightDimpler: number,
    RightEyeClosed: number,
    RightEyeUpperLidRaiser: number,
    RightInnerBrowRaiser: number,
    RightLipCornerDown: number,
    RightLipCornerPuller: number,
    RightLipStretcher: number,
    RightLowerLipDepressor: number,
    RightNoseWrinkler: number,
    RightOuterBrowRaiser: number,
    RightUpperLipRaiser: number,
    TongueDown: number,
    TongueOut: number,
    TongueUp: number,
    UpperLipSuck: number,
}

export type FaceInstance = Instance & {
    Face: enum.Enum_NormalId,
}

export type Decal = FaceInstance & {
    Color3: datatypes.Color3,
    LocalTransparencyModifier: number,
    Texture: any,
    TextureContent: any,
    Transparency: number,
    ZIndex: number,
}

export type Texture = Decal & {
    OffsetStudsU: number,
    OffsetStudsV: number,
    StudsPerTileU: number,
    StudsPerTileV: number,
}

export type FacialAnimationRecordingService = Instance & {
    BiometricDataConsent: boolean,
    IsAgeRestricted: (self: FacialAnimationRecordingService) -> boolean,
    CheckOrRequestCameraPermission: (self: FacialAnimationRecordingService) -> string,
}

export type FacialAnimationStreamingServiceStats = Instance & {
    Get: (self: FacialAnimationStreamingServiceStats, label: string) -> buffer,
    GetWithPlayerId: (self: FacialAnimationStreamingServiceStats, label: string, playerId: buffer) -> buffer,
}

export type FacialAnimationStreamingServiceV2 = Instance & {
    ServiceState: number,
    GetStats: (self: FacialAnimationStreamingServiceV2) -> FacialAnimationStreamingServiceStats,
    IsAudioEnabled: (self: FacialAnimationStreamingServiceV2, mask: number) -> boolean,
    IsPlaceEnabled: (self: FacialAnimationStreamingServiceV2, mask: number) -> boolean,
    IsServerEnabled: (self: FacialAnimationStreamingServiceV2, mask: number) -> boolean,
    IsVideoEnabled: (self: FacialAnimationStreamingServiceV2, mask: number) -> boolean,
    ResolveStateForUser: (self: FacialAnimationStreamingServiceV2, userId: buffer) -> number,
}

export type FacialAnimationStreamingSubsessionStats = Instance & {
}

export type Feature = Instance & {
    FaceId: enum.Enum_NormalId,
    InOut: enum.Enum_InOut,
    LeftRight: enum.Enum_LeftRight,
    TopBottom: enum.Enum_TopBottom,
}

export type Hole = Feature & {
}

export type MotorFeature = Feature & {
}

export type FeatureRestrictionManager = Instance & {
}

export type File = Instance & {
    Size: buffer,
    GetBinaryContents: (self: File) -> string,
    GetTemporaryId: (self: File) -> any,
}

export type Fire = Instance & {
    Color: datatypes.Color3,
    Enabled: boolean,
    Heat: number,
    LocalTransparencyModifier: number,
    SecondaryColor: datatypes.Color3,
    Size: number,
    TimeScale: number,
    heat_xml: number,
    size_xml: number,
    FastForward: (self: Fire, numFrames: number) -> (),
}

export type FlagStandService = Instance & {
}

export type FloatCurve = Instance & {
    Length: number,
    ValuesAndTimes: buffer,
    GetKeyAtIndex: (self: FloatCurve, index: number) -> any,
    GetKeyIndicesAtTime: (self: FloatCurve, time: number) -> {any},
    GetKeys: (self: FloatCurve) -> {any},
    GetValueAtTime: (self: FloatCurve, time: number) -> number,
    InsertKey: (self: FloatCurve, key: any) -> {any},
    RemoveKeyAtIndex: (self: FloatCurve, startingIndex: number, count: number) -> number,
    SetKeys: (self: FloatCurve, keys: {any}) -> number,
}

export type FlyweightService = Instance & {
}

export type CSGDictionaryService = FlyweightService & {
}

export type NonReplicatedCSGDictionaryService = FlyweightService & {
}

export type Folder = Instance & {
    ReplicatedGuiInsertionOrder: number,
}

export type ForceField = Instance & {
    Visible: boolean,
}

export type FriendService = Instance & {
    GetPlatformFriends: (self: FriendService) -> {any},
}

export type FunctionalTest = Instance & {
    AllowSleep: boolean,
    Description: string,
    HasMigratedSettingsToTestService: boolean,
    Is30FpsThrottleEnabled: boolean,
    PhysicsEnvironmentalThrottle: boolean,
    Timeout: number,
    Error: (self: FunctionalTest, message: string) -> (),
    Failed: (self: FunctionalTest, message: string) -> (),
    Pass: (self: FunctionalTest, message: string) -> (),
    Passed: (self: FunctionalTest, message: string) -> (),
    Warn: (self: FunctionalTest, message: string) -> (),
}

export type GamePassService = Instance & {
}

export type GameSettings = Instance & {
    VideoCaptureEnabled: boolean,
    VideoRecording: boolean,
}

export type GamepadService = Instance & {
    GamepadCursorEnabled: boolean,
    DisableGamepadCursor: (self: GamepadService) -> (),
    EnableGamepadCursor: (self: GamepadService, guiObject: any) -> (),
    GetGamepadCursorPosition: (self: GamepadService) -> datatypes.Vector2,
    SetGamepadCursorPosition: (self: GamepadService, position: datatypes.Vector2) -> (),
}

export type GenerationService = Instance & {
    GenerateMeshAsync: (self: GenerationService, inputs: {[string]: any}, player: Player, options: {[string]: any}, intermediateResultCallback: any) -> ...any,
    InternalGenerateMeshAsync: (self: GenerationService, inputs: {[string]: any}, userId: buffer, options: {[string]: any}, intermediateResultCallback: any) -> ...any,
    LoadGeneratedMeshAsync: (self: GenerationService, generationId: string) -> MeshPart,
}

export type GenericChallengeService = Instance & {
    SignalChallengeAbandoned: (self: GenericChallengeService, challengeID: string) -> (),
    SignalChallengeCompleted: (self: GenericChallengeService, challengeID: string, challengeType: string, challengeMetadata: string) -> (),
    SignalChallengeInvalidated: (self: GenericChallengeService, challengeID: string) -> (),
    SignalChallengeLoaded: (self: GenericChallengeService, challengeID: string, success: boolean) -> (),
    SignalChallengeRequired: (self: GenericChallengeService, challengeID: string, challengeType: string, challengeMetadata: string) -> (),
}

export type Geometry = Instance & {
}

export type GeometryService = Instance & {
    CalculateConstraintsToPreserve: (self: GeometryService, source: any, destination: {any}, options: {[string]: any}) -> {any},
    HashMeshAsync: (self: GeometryService, meshId: any) -> string,
    IntersectAsync: (self: GeometryService, part: any, parts: {any}, options: {[string]: any}) -> {any},
    SubtractAsync: (self: GeometryService, part: any, parts: {any}, options: {[string]: any}) -> {any},
    UnionAsync: (self: GeometryService, part: any, parts: {any}, options: {[string]: any}) -> {any},
}

export type GetTextBoundsParams = Instance & {
    Font: datatypes.Font,
    RichText: boolean,
    Size: number,
    Text: string,
    Width: number,
}

export type GlobalDataStore = Instance & {
    GetAsync: (self: GlobalDataStore, key: string, options: DataStoreGetOptions) -> ...any,
    IncrementAsync: (self: GlobalDataStore, key: string, delta: number, userIds: {any}, options: DataStoreIncrementOptions) -> any,
    RemoveAsync: (self: GlobalDataStore, key: string) -> ...any,
    SetAsync: (self: GlobalDataStore, key: string, value: any, userIds: {any}, options: DataStoreSetOptions) -> any,
    UpdateAsync: (self: GlobalDataStore, key: string, transformFunction: any) -> ...any,
}

export type DataStore = GlobalDataStore & {
    GetVersionAsync: (self: DataStore, key: string, version: string) -> ...any,
    GetVersionAtTimeAsync: (self: DataStore, key: string, timestamp: buffer) -> ...any,
    ListKeysAsync: (self: DataStore, prefix: string, pageSize: number, cursor: string, excludeDeleted: boolean) -> DataStoreKeyPages,
    ListVersionsAsync: (self: DataStore, key: string, sortDirection: enum.Enum_SortDirection, minDate: buffer, maxDate: buffer, pageSize: number) -> DataStoreVersionPages,
    RemoveVersionAsync: (self: DataStore, key: string, version: string) -> (),
}

export type OrderedDataStore = GlobalDataStore & {
    GetSortedAsync: (self: OrderedDataStore, ascending: boolean, pagesize: number, minValue: any, maxValue: any) -> DataStorePages,
}

export type GoogleAnalyticsConfiguration = Instance & {
    gaID: string,
}

export type GroupService = Instance & {
    GetAlliesAsync: (self: GroupService, groupId: buffer) -> StandardPages,
    GetEnemiesAsync: (self: GroupService, groupId: buffer) -> StandardPages,
    GetGroupInfoAsync: (self: GroupService, groupId: buffer) -> any,
    GetGroupsAsync: (self: GroupService, userId: buffer) -> {any},
}

export type GuiBase = Instance & {
}

export type GuiBase2d = GuiBase & {
    AbsolutePosition: datatypes.Vector2,
    AbsoluteRotation: number,
    AbsoluteSize: datatypes.Vector2,
    AutoLocalize: boolean,
    ClippedRect: datatypes.Rect,
    IsNotOccluded: boolean,
    RawRect2D: datatypes.Rect,
    ReplicatedInsertionOrder: number,
    RootLocalizationTable: LocalizationTable,
    SelectionBehaviorDown: enum.Enum_SelectionBehavior,
    SelectionBehaviorLeft: enum.Enum_SelectionBehavior,
    SelectionBehaviorRight: enum.Enum_SelectionBehavior,
    SelectionBehaviorUp: enum.Enum_SelectionBehavior,
    SelectionGroup: boolean,
    TotalGroupScale: number,
}

export type GuiObject = GuiBase2d & {
    Active: boolean,
    AnchorPoint: datatypes.Vector2,
    AutomaticSize: enum.Enum_AutomaticSize,
    BackgroundColor3: datatypes.Color3,
    BackgroundTransparency: number,
    BorderColor3: datatypes.Color3,
    BorderMode: enum.Enum_BorderMode,
    BorderSizePixel: number,
    ClipsDescendants: boolean,
    DragBeginConnectionCount: number,
    DragStoppedConnectionCount: number,
    GuiState: enum.Enum_GuiState,
    Interactable: boolean,
    LayoutOrder: number,
    MouseEnterConnectionCount: number,
    MouseLeaveConnectionCount: number,
    MouseMovedConnectionCount: number,
    MouseWheelBackwardConnectionCount: number,
    MouseWheelForwardConnectionCount: number,
    NextSelectionDown: GuiObject,
    NextSelectionLeft: GuiObject,
    NextSelectionRight: GuiObject,
    NextSelectionUp: GuiObject,
    Position: datatypes.UDim2,
    Rotation: number,
    Selectable: boolean,
    SelectionImageObject: GuiObject,
    SelectionOrder: number,
    SelectionRect2D: datatypes.Rect,
    Size: datatypes.UDim2,
    SizeConstraint: enum.Enum_SizeConstraint,
    Transparency: number,
    Visible: boolean,
    ZIndex: number,
    TweenPosition: (self: GuiObject, endPosition: datatypes.UDim2, easingDirection: enum.Enum_EasingDirection, easingStyle: enum.Enum_EasingStyle, time: number, override: boolean, callback: any) -> boolean,
    TweenSize: (self: GuiObject, endSize: datatypes.UDim2, easingDirection: enum.Enum_EasingDirection, easingStyle: enum.Enum_EasingStyle, time: number, override: boolean, callback: any) -> boolean,
    TweenSizeAndPosition: (self: GuiObject, endSize: datatypes.UDim2, endPosition: datatypes.UDim2, easingDirection: enum.Enum_EasingDirection, easingStyle: enum.Enum_EasingStyle, time: number, override: boolean, callback: any) -> boolean,
}

export type CanvasGroup = GuiObject & {
    GroupColor3: datatypes.Color3,
    GroupTransparency: number,
    ResolutionScale: number,
}

export type Frame = GuiObject & {
    Style: enum.Enum_FrameStyle,
}

export type GuiButton = GuiObject & {
    AutoButtonColor: boolean,
    HoverHapticEffect: HapticEffect,
    Modal: boolean,
    MouseButton1ClickConnectionCount: number,
    MouseButton1DownConnectionCount: number,
    MouseButton1UpConnectionCount: number,
    MouseButton2ClickConnectionCount: number,
    MouseButton2DownConnectionCount: number,
    MouseButton2UpConnectionCount: number,
    PressHapticEffect: HapticEffect,
    Selected: boolean,
    Style: enum.Enum_ButtonStyle,
}

export type ImageButton = GuiButton & {
    ContentImageSize: datatypes.Vector2,
    HoverImage: any,
    Image: any,
    ImageColor3: datatypes.Color3,
    ImageContent: any,
    ImageRectOffset: datatypes.Vector2,
    ImageRectSize: datatypes.Vector2,
    ImageTransparency: number,
    IsLoaded: boolean,
    PressedImage: any,
    ResampleMode: enum.Enum_ResamplerMode,
    ScaleType: enum.Enum_ScaleType,
    SliceCenter: datatypes.Rect,
    SliceScale: number,
    TileSize: datatypes.UDim2,
    SetEnableContentImageSizeChangedEvents: (self: ImageButton, enabled: boolean) -> (),
}

export type TextButton = GuiButton & {
    Confidential: boolean,
    ContentText: string,
    Font: enum.Enum_Font,
    FontFace: datatypes.Font,
    LineHeight: number,
    LocalizationMatchIdentifier: string,
    LocalizationMatchedSourceText: string,
    LocalizedText: string,
    MaxVisibleGraphemes: number,
    OpenTypeFeatures: string,
    OpenTypeFeaturesError: string,
    RichText: boolean,
    Text: string,
    TextBounds: datatypes.Vector2,
    TextColor3: datatypes.Color3,
    TextDirection: enum.Enum_TextDirection,
    TextFits: boolean,
    TextScaled: boolean,
    TextSize: number,
    TextStrokeColor3: datatypes.Color3,
    TextStrokeTransparency: number,
    TextTransparency: number,
    TextTruncate: enum.Enum_TextTruncate,
    TextWrapped: boolean,
    TextXAlignment: enum.Enum_TextXAlignment,
    TextYAlignment: enum.Enum_TextYAlignment,
    SetTextFromInput: (self: TextButton, text: string) -> (),
}

export type GuiLabel = GuiObject & {
}

export type ImageLabel = GuiLabel & {
    ContentImageSize: datatypes.Vector2,
    Image: any,
    ImageColor3: datatypes.Color3,
    ImageContent: any,
    ImageRectOffset: datatypes.Vector2,
    ImageRectSize: datatypes.Vector2,
    ImageTransparency: number,
    IsLoaded: boolean,
    ResampleMode: enum.Enum_ResamplerMode,
    ScaleType: enum.Enum_ScaleType,
    SliceCenter: datatypes.Rect,
    SliceScale: number,
    TileSize: datatypes.UDim2,
    SetEnableContentImageSizeChangedEvents: (self: ImageLabel, enabled: boolean) -> (),
}

export type TextLabel = GuiLabel & {
    Confidential: boolean,
    ContentText: string,
    Font: enum.Enum_Font,
    FontFace: datatypes.Font,
    LineHeight: number,
    LocalizationMatchIdentifier: string,
    LocalizationMatchedSourceText: string,
    LocalizedText: string,
    MaxVisibleGraphemes: number,
    OpenTypeFeatures: string,
    OpenTypeFeaturesError: string,
    RichText: boolean,
    Text: string,
    TextBounds: datatypes.Vector2,
    TextColor3: datatypes.Color3,
    TextDirection: enum.Enum_TextDirection,
    TextFits: boolean,
    TextScaled: boolean,
    TextSize: number,
    TextStrokeColor3: datatypes.Color3,
    TextStrokeTransparency: number,
    TextTransparency: number,
    TextTruncate: enum.Enum_TextTruncate,
    TextWrapped: boolean,
    TextXAlignment: enum.Enum_TextXAlignment,
    TextYAlignment: enum.Enum_TextYAlignment,
    SetTextFromInput: (self: TextLabel, text: string) -> (),
}

export type RelativeGui = GuiObject & {
}

export type ScrollingFrame = GuiObject & {
    AbsoluteCanvasSize: datatypes.Vector2,
    AbsoluteWindowSize: datatypes.Vector2,
    AutomaticCanvasSize: enum.Enum_AutomaticSize,
    BottomImage: any,
    CanvasPosition: datatypes.Vector2,
    CanvasSize: datatypes.UDim2,
    DraggingScrollBar: enum.Enum_DraggingScrollBar,
    ElasticBehavior: enum.Enum_ElasticBehavior,
    HorizontalBarRect: datatypes.Rect,
    HorizontalScrollBarInset: enum.Enum_ScrollBarInset,
    MaxCanvasPosition: datatypes.Vector2,
    MidImage: any,
    ScrollBarImageColor3: datatypes.Color3,
    ScrollBarImageTransparency: number,
    ScrollBarThickness: number,
    ScrollRate: number,
    ScrollVelocity: datatypes.Vector2,
    ScrollingDirection: enum.Enum_ScrollingDirection,
    ScrollingEnabled: boolean,
    SmoothScroll: boolean,
    TopImage: any,
    VerticalBarRect: datatypes.Rect,
    VerticalScrollBarInset: enum.Enum_ScrollBarInset,
    VerticalScrollBarPosition: enum.Enum_VerticalScrollBarPosition,
    ClearInertialScrolling: (self: ScrollingFrame) -> (),
    GetSampledInertialVelocity: (self: ScrollingFrame) -> datatypes.Vector2,
    ScrollToTop: (self: ScrollingFrame) -> (),
}

export type TextBox = GuiObject & {
    ClearTextOnFocus: boolean,
    Confidential: boolean,
    ContentText: string,
    CursorPosition: number,
    Font: enum.Enum_Font,
    FontFace: datatypes.Font,
    LineHeight: number,
    LocalizationMatchIdentifier: string,
    LocalizationMatchedSourceText: string,
    ManualFocusRelease: boolean,
    MaxVisibleGraphemes: number,
    MultiLine: boolean,
    OpenTypeFeatures: string,
    OpenTypeFeaturesError: string,
    OverlayNativeInput: boolean,
    PlaceholderColor3: datatypes.Color3,
    PlaceholderText: string,
    ReturnKeyType: enum.Enum_ReturnKeyType,
    RichText: boolean,
    SelectionStart: number,
    ShouldEmitReturnEvents: boolean,
    ShouldEmitUpAndDownArrowEvents: boolean,
    ShowNativeInput: boolean,
    Text: string,
    TextBounds: datatypes.Vector2,
    TextColor3: datatypes.Color3,
    TextDirection: enum.Enum_TextDirection,
    TextEditable: boolean,
    TextFits: boolean,
    TextInputType: enum.Enum_TextInputType,
    TextScaled: boolean,
    TextSize: number,
    TextStrokeColor3: datatypes.Color3,
    TextStrokeTransparency: number,
    TextTransparency: number,
    TextTruncate: enum.Enum_TextTruncate,
    TextWrapped: boolean,
    TextXAlignment: enum.Enum_TextXAlignment,
    TextYAlignment: enum.Enum_TextYAlignment,
    CaptureFocus: (self: TextBox) -> (),
    IsFocused: (self: TextBox) -> boolean,
    ReleaseFocus: (self: TextBox, submitted: boolean) -> (),
    ResetKeyboardMode: (self: TextBox) -> (),
    SetTextFromInput: (self: TextBox, text: string) -> (),
}

export type VideoDisplay = GuiObject & {
    ResampleMode: enum.Enum_ResamplerMode,
    ScaleType: enum.Enum_ScaleType,
    TileSize: datatypes.UDim2,
    VideoColor3: datatypes.Color3,
    VideoRectOffset: datatypes.Vector2,
    VideoRectSize: datatypes.Vector2,
    VideoTransparency: number,
    GetConnectedWires: (self: VideoDisplay, pin: string) -> any,
}

export type VideoFrame = GuiObject & {
    IsLoaded: boolean,
    Looped: boolean,
    Playing: boolean,
    PlayingReplicating: boolean,
    Resolution: datatypes.Vector2,
    TimeLength: number,
    TimePosition: number,
    TimePositionReplicating: number,
    Video: any,
    Volume: number,
    Pause: (self: VideoFrame) -> (),
    Play: (self: VideoFrame) -> (),
    SetStudioPreview: (self: VideoFrame, isPreview: boolean) -> (),
}

export type ViewportFrame = GuiObject & {
    Ambient: datatypes.Color3,
    CameraCFrame: datatypes.CFrame,
    CameraFieldOfView: number,
    CurrentCamera: Camera,
    ImageColor3: datatypes.Color3,
    ImageTransparency: number,
    IsMirrored: boolean,
    LightColor: datatypes.Color3,
    LightDirection: datatypes.Vector3,
    CaptureSnapshotAsync: (self: ViewportFrame) -> any,
}

export type LayerCollector = GuiBase2d & {
    Enabled: boolean,
    ResetOnSpawn: boolean,
    ZIndexBehavior: enum.Enum_ZIndexBehavior,
    GetGuiObjectsAtPosition: (self: LayerCollector, x: number, y: number) -> any,
}

export type BillboardGui = LayerCollector & {
    Active: boolean,
    Adornee: any,
    AlwaysOnTop: boolean,
    Brightness: number,
    ClipsDescendants: boolean,
    CurrentDistance: number,
    DistanceLowerLimit: number,
    DistanceStep: number,
    DistanceUpperLimit: number,
    ExtentsOffset: datatypes.Vector3,
    ExtentsOffsetWorldSpace: datatypes.Vector3,
    LightInfluence: number,
    MaxDistance: number,
    PlayerToHideFrom: any,
    Size: datatypes.UDim2,
    SizeOffset: datatypes.Vector2,
    StudsOffset: datatypes.Vector3,
    StudsOffsetWorldSpace: datatypes.Vector3,
    GetScreenSpaceBounds: (self: BillboardGui) -> any,
}

export type PluginGui = LayerCollector & {
    Title: string,
    BindToClose: (self: PluginGui, callback: any) -> (),
    GetRelativeMousePosition: (self: PluginGui) -> datatypes.Vector2,
}

export type DockWidgetPluginGui = PluginGui & {
    HostWidgetWasRestored: boolean,
    RequestRaise: (self: DockWidgetPluginGui) -> (),
}

export type QWidgetPluginGui = PluginGui & {
}

export type ScreenGui = LayerCollector & {
    ClipToDeviceSafeArea: boolean,
    DisplayOrder: number,
    IgnoreGuiInset: boolean,
    OnTopOfCoreBlur: boolean,
    SafeAreaCompatibility: enum.Enum_SafeAreaCompatibility,
    ScreenInsets: enum.Enum_ScreenInsets,
}

export type GuiMain = ScreenGui & {
}

export type SurfaceGuiBase = LayerCollector & {
    Active: boolean,
    Adornee: any,
    Face: enum.Enum_NormalId,
}

export type AdGui = SurfaceGuiBase & {
    AdShape: enum.Enum_AdShape,
    EnableVideoAds: boolean,
    FallbackImage: any,
    Status: enum.Enum_AdUnitStatus,
    GetSingleReportAdInfo: (self: AdGui) -> any,
    HandleLuaUIEvent: (self: AdGui, eventType: enum.Enum_AdUIEventType) -> (),
    forwardStateToLuaUI: (self: AdGui) -> (),
}

export type SurfaceGui = SurfaceGuiBase & {
    AlwaysOnTop: boolean,
    Brightness: number,
    CanvasSize: datatypes.Vector2,
    ClipsDescendants: boolean,
    HorizontalCurvature: number,
    LightInfluence: number,
    MaxDistance: number,
    PixelsPerStud: number,
    Shape: enum.Enum_SurfaceGuiShape,
    SizingMode: enum.Enum_SurfaceGuiSizingMode,
    ToolPunchThroughDistance: number,
    ZOffset: number,
}

export type GuiBase3d = GuiBase & {
    Color3: datatypes.Color3,
    Transparency: number,
    Visible: boolean,
}

export type FloorWire = GuiBase3d & {
    CycleOffset: number,
    From: BasePart,
    StudsBetweenTextures: number,
    Texture: any,
    TextureSize: datatypes.Vector2,
    To: BasePart,
    Velocity: number,
    WireRadius: number,
}

export type InstanceAdornment = GuiBase3d & {
    Adornee: any,
}

export type SelectionBox = InstanceAdornment & {
    LineThickness: number,
    StudioSelectionBox: boolean,
    SurfaceColor3: datatypes.Color3,
    SurfaceTransparency: number,
}

export type PVAdornment = GuiBase3d & {
    Adornee: PVInstance,
}

export type HandleAdornment = PVAdornment & {
    AdornCullingMode: enum.Enum_AdornCullingMode,
    AlwaysOnTop: boolean,
    CFrame: datatypes.CFrame,
    SizeRelativeOffset: datatypes.Vector3,
    ZIndex: number,
}

export type BoxHandleAdornment = HandleAdornment & {
    Size: datatypes.Vector3,
}

export type ConeHandleAdornment = HandleAdornment & {
    Height: number,
    Radius: number,
}

export type CylinderHandleAdornment = HandleAdornment & {
    Angle: number,
    Height: number,
    InnerRadius: number,
    Radius: number,
}

export type ImageHandleAdornment = HandleAdornment & {
    Image: any,
    Size: datatypes.Vector2,
}

export type LineHandleAdornment = HandleAdornment & {
    Length: number,
    Thickness: number,
}

export type SphereHandleAdornment = HandleAdornment & {
    Radius: number,
}

export type WireframeHandleAdornment = HandleAdornment & {
    Scale: datatypes.Vector3,
    AddLine: (self: WireframeHandleAdornment, from: datatypes.Vector3, to: datatypes.Vector3) -> (),
    AddLines: (self: WireframeHandleAdornment, points: {any}) -> (),
    AddPath: (self: WireframeHandleAdornment, points: {any}, loop: boolean) -> (),
    AddText: (self: WireframeHandleAdornment, point: datatypes.Vector3, text: string, size: number) -> (),
    Clear: (self: WireframeHandleAdornment) -> (),
}

export type ParabolaAdornment = PVAdornment & {
    A: number,
    B: number,
    C: number,
    Range: number,
    Thickness: number,
    FindPartOnParabola: (self: ParabolaAdornment, ignoreDescendentsTable: any) -> ...any,
}

export type SelectionSphere = PVAdornment & {
    SurfaceColor3: datatypes.Color3,
    SurfaceTransparency: number,
}

export type PartAdornment = GuiBase3d & {
    Adornee: BasePart,
}

export type HandlesBase = PartAdornment & {
}

export type ArcHandles = HandlesBase & {
    Axes: datatypes.Axes,
    MouseButton1DownConnectionCount: number,
    MouseButton1UpConnectionCount: number,
    MouseDragConnectionCount: number,
    MouseEnterConnectionCount: number,
    MouseLeaveConnectionCount: number,
}

export type Handles = HandlesBase & {
    Faces: datatypes.Faces,
    MouseButton1DownConnectionCount: number,
    MouseButton1UpConnectionCount: number,
    MouseDragConnectionCount: number,
    MouseEnterConnectionCount: number,
    MouseLeaveConnectionCount: number,
    Style: enum.Enum_HandlesStyle,
}

export type SurfaceSelection = PartAdornment & {
    TargetSurface: enum.Enum_NormalId,
}

export type SelectionLasso = GuiBase3d & {
    Humanoid: Humanoid,
}

export type SelectionPartLasso = SelectionLasso & {
    Part: BasePart,
}

export type SelectionPointLasso = SelectionLasso & {
    Point: datatypes.Vector3,
}

export type Path2D = GuiBase & {
    Closed: boolean,
    Color3: datatypes.Color3,
    PropertiesSerialize: buffer,
    SelectedControlPoint: number,
    Thickness: number,
    Transparency: number,
    Visible: boolean,
    ZIndex: number,
    GetBoundingRect: (self: Path2D) -> datatypes.Rect,
    GetControlPoint: (self: Path2D, index: number) -> any,
    GetControlPoints: (self: Path2D) -> {any},
    GetLength: (self: Path2D) -> number,
    GetMaxControlPoints: (self: Path2D) -> number,
    GetPositionOnCurve: (self: Path2D, t: number) -> datatypes.UDim2,
    GetPositionOnCurveArcLength: (self: Path2D, t: number) -> datatypes.UDim2,
    GetSegmentCount: (self: Path2D) -> number,
    GetTangentOnCurve: (self: Path2D, t: number) -> datatypes.Vector2,
    GetTangentOnCurveArcLength: (self: Path2D, t: number) -> datatypes.Vector2,
    InsertControlPoint: (self: Path2D, index: number, point: any) -> (),
    RemoveControlPoint: (self: Path2D, index: number) -> (),
    SetControlPoints: (self: Path2D, controlPoints: {any}) -> (),
    UpdateControlPoint: (self: Path2D, index: number, point: any) -> (),
}

export type GuiService = Instance & {
    AutoSelectGuiEnabled: boolean,
    CoreEffectFolder: Folder,
    CoreGuiFolder: Folder,
    CoreGuiNavigationEnabled: boolean,
    GuiNavigationEnabled: boolean,
    MenuIsOpen: boolean,
    PreferredTextSize: enum.Enum_PreferredTextSize,
    PreferredTransparency: number,
    ReducedMotionEnabled: boolean,
    SelectedCoreObject: GuiObject,
    SelectedObject: GuiObject,
    TopbarInset: datatypes.Rect,
    TouchControlsEnabled: boolean,
    AddCenterDialog: (self: GuiService, dialog: any, centerDialogType: enum.Enum_CenterDialogType, showFunction: any, hideFunction: any) -> (),
    AddKey: (self: GuiService, key: string) -> (),
    AddSpecialKey: (self: GuiService, key: enum.Enum_SpecialKey) -> (),
    BroadcastNotification: (self: GuiService, data: string, notificationType: number) -> (),
    ClearError: (self: GuiService) -> (),
    CloseInspectMenu: (self: GuiService) -> (),
    CloseStatsBasedOnInputString: (self: GuiService, input: string) -> boolean,
    DismissNotification: (self: GuiService, notificationId: string) -> boolean,
    ForceTenFootInterface: (self: GuiService, isForced: boolean) -> (),
    GetBrickCount: (self: GuiService) -> number,
    GetClosestDialogToPosition: (self: GuiService, position: datatypes.Vector3) -> any,
    GetEmotesMenuOpen: (self: GuiService) -> boolean,
    GetErrorCode: (self: GuiService) -> enum.Enum_ConnectionError,
    GetErrorDetails: (self: GuiService) -> {[string]: any},
    GetErrorType: (self: GuiService) -> enum.Enum_ConnectionError,
    GetGameplayPausedNotificationEnabled: (self: GuiService) -> boolean,
    GetGuiInset: (self: GuiService) -> ...any,
    GetGuiIsVisible: (self: GuiService, guiType: enum.Enum_GuiType) -> boolean,
    GetHardwareSafeViewport: (self: GuiService) -> datatypes.Vector2,
    GetInspectMenuEnabled: (self: GuiService) -> boolean,
    GetNotificationTypeList: (self: GuiService) -> {[string]: any},
    GetRawScreenScale: (self: GuiService) -> number,
    GetResolutionScale: (self: GuiService) -> number,
    GetSafeZoneOffsets: (self: GuiService) -> {[string]: any},
    GetUiMessage: (self: GuiService) -> string,
    InspectPlayerFromHumanoidDescription: (self: GuiService, humanoidDescription: any, name: string) -> (),
    InspectPlayerFromUserId: (self: GuiService, userId: buffer) -> (),
    InspectPlayerFromUserIdWithCtx: (self: GuiService, userId: buffer, ctx: string) -> (),
    IsMemoryTrackerEnabled: (self: GuiService) -> boolean,
    IsTenFootInterface: (self: GuiService) -> boolean,
    OnNotificationDisplayed: (self: GuiService, notificationId: string) -> (),
    OnNotificationInteraction: (self: GuiService, notificationId: string, buttonIndex: number) -> (),
    RemoveCenterDialog: (self: GuiService, dialog: any) -> (),
    RemoveKey: (self: GuiService, key: string) -> (),
    RemoveSpecialKey: (self: GuiService, key: enum.Enum_SpecialKey) -> (),
    Select: (self: GuiService, selectionParent: any) -> (),
    SendNotification: (self: GuiService, notificationInfo: {[string]: any}) -> string,
    SendUIOcclusionMetricsForQueryRegion: (self: GuiService, position: datatypes.UDim2, size: datatypes.UDim2, regionName: string) -> (),
    SetEmotesMenuOpen: (self: GuiService, isOpen: boolean) -> (),
    SetGameplayPausedNotificationEnabled: (self: GuiService, enabled: boolean) -> (),
    SetGlobalGuiInset: (self: GuiService, x1: number, y1: number, x2: number, y2: number) -> (),
    SetHardwareSafeAreaInsets: (self: GuiService, left: number, top: number, right: number, bottom: number) -> (),
    SetInspectMenuEnabled: (self: GuiService, enabled: boolean) -> (),
    SetMenuIsOpen: (self: GuiService, open: boolean, menuName: string) -> (),
    SetPurchasePromptIsShown: (self: GuiService, isShown: boolean) -> (),
    SetSafeZoneOffsets: (self: GuiService, top: number, bottom: number, left: number, right: number) -> (),
    SetTopbarInset: (self: GuiService, topbarInset: datatypes.Rect) -> (),
    SetUiMessage: (self: GuiService, msgType: enum.Enum_UiMessageType, uiMessage: string) -> (),
    ShowStatsBasedOnInputString: (self: GuiService, input: string) -> boolean,
    ToggleFullscreen: (self: GuiService) -> (),
    ToggleGuiIsVisibleForCaptures: (self: GuiService, guiType: enum.Enum_GuiType) -> (),
    ToggleGuiIsVisibleIfAllowed: (self: GuiService, guiType: enum.Enum_GuiType) -> (),
    GetScreenResolution: (self: GuiService) -> datatypes.Vector2,
}

export type GuidRegistryService = Instance & {
}

export type HapticEffect = Instance & {
    Looped: boolean,
    Position: datatypes.Vector3,
    Radius: number,
    Type: enum.Enum_HapticEffectType,
    Waveform: FloatCurve,
    Play: (self: HapticEffect) -> (),
    SetWaveformKeys: (self: HapticEffect, keys: {any}) -> (),
    Stop: (self: HapticEffect) -> (),
}

export type HapticService = Instance & {
    GetMotor: (self: HapticService, inputType: enum.Enum_UserInputType, vibrationMotor: enum.Enum_VibrationMotor) -> ...any,
    IsMotorSupported: (self: HapticService, inputType: enum.Enum_UserInputType, vibrationMotor: enum.Enum_VibrationMotor) -> boolean,
    IsVibrationSupported: (self: HapticService, inputType: enum.Enum_UserInputType) -> boolean,
    SetMotor: (self: HapticService, inputType: enum.Enum_UserInputType, vibrationMotor: enum.Enum_VibrationMotor, ...any) -> (),
}

export type HeapProfilerService = Instance & {
    ClientRequestDataAsync: (self: HeapProfilerService, player: Player) -> string,
    ServerRequestDataAsync: (self: HeapProfilerService) -> string,
}

export type HeatmapService = Instance & {
}

export type HeightmapImporterService = Instance & {
    CancelImportHeightmap: (self: HeightmapImporterService) -> (),
    IsValidColormap: (self: HeightmapImporterService, colormapAssetId: any) -> ...any,
    IsValidHeightmap: (self: HeightmapImporterService, heightmapAssetId: any) -> ...any,
    SetImportHeightmapPaused: (self: HeightmapImporterService, paused: boolean) -> (),
    GetHeightmapPreviewAsync: (self: HeightmapImporterService, heightmapAssetId: any) -> ...any,
    ImportHeightmap: (self: HeightmapImporterService, region: any, heightmapAssetId: any, colormapAssetId: any, defaultMaterial: enum.Enum_Material) -> (),
}

export type HiddenSurfaceRemovalAsset = Instance & {
    HSRData: buffer,
    HSRMeshIdData: buffer,
}

export type Highlight = Instance & {
    Adornee: any,
    DepthMode: enum.Enum_HighlightDepthMode,
    Enabled: boolean,
    FillColor: datatypes.Color3,
    FillTransparency: number,
    LineThickness: number,
    OutlineColor: datatypes.Color3,
    OutlineTransparency: number,
    ReservedId: enum.Enum_ReservedHighlightId,
}

export type Hopper = Instance & {
}

export type HttpRbxApiService = Instance & {
    GetDocumentationUrl: (self: HttpRbxApiService, partialUrl: string) -> string,
    GetAsync: (self: HttpRbxApiService, apiUrlPath: string, priority: enum.Enum_ThrottlingPriority, httpRequestType: enum.Enum_HttpRequestType) -> string,
    GetAsyncFullUrl: (self: HttpRbxApiService, apiUrl: string, priority: enum.Enum_ThrottlingPriority, httpRequestType: enum.Enum_HttpRequestType) -> string,
    PostAsync: (self: HttpRbxApiService, apiUrlPath: string, data: string, priority: enum.Enum_ThrottlingPriority, content_type: enum.Enum_HttpContentType, httpRequestType: enum.Enum_HttpRequestType) -> string,
    PostAsyncFullUrl: (self: HttpRbxApiService, apiUrl: string, data: string, priority: enum.Enum_ThrottlingPriority, content_type: enum.Enum_HttpContentType, httpRequestType: enum.Enum_HttpRequestType) -> string,
    RequestAsync: (self: HttpRbxApiService, requestOptions: {[string]: any}, priority: enum.Enum_ThrottlingPriority, content_type: enum.Enum_HttpContentType, httpRequestType: enum.Enum_HttpRequestType) -> string,
    RequestLimitedAsync: (self: HttpRbxApiService, requestOptions: {[string]: any}, priority: enum.Enum_ThrottlingPriority, content_type: enum.Enum_HttpContentType, httpRequestType: enum.Enum_HttpRequestType) -> string,
}

export type HttpRequest = Instance & {
    Cancel: (self: HttpRequest) -> (),
    Start: (self: HttpRequest, callback: any) -> (),
}

export type HttpService = Instance & {
    HttpEnabled: boolean,
    GenerateGUID: (self: HttpService, wrapInCurlyBraces: boolean) -> string,
    GetHttpEnabled: (self: HttpService) -> boolean,
    GetSecret: (self: HttpService, key: string) -> any,
    GetUserAgent: (self: HttpService) -> string,
    JSONDecode: (self: HttpService, input: string) -> any,
    JSONEncode: (self: HttpService, input: any) -> string,
    RequestInternal: (self: HttpService, options: {[string]: any}) -> any,
    SetHttpEnabled: (self: HttpService, enabled: boolean) -> (),
    UrlEncode: (self: HttpService, input: string) -> string,
    GetAsync: (self: HttpService, url: any, nocache: boolean, headers: any) -> string,
    PostAsync: (self: HttpService, url: any, data: string, content_type: enum.Enum_HttpContentType, compress: boolean, headers: any) -> string,
    RequestAsync: (self: HttpService, requestOptions: {[string]: any}) -> {[string]: any},
}

export type Humanoid = Instance & {
    AutoJumpEnabled: boolean,
    AutoRotate: boolean,
    AutomaticScalingEnabled: boolean,
    BreakJointsOnDeath: boolean,
    CameraMaxDistance: number,
    CameraMinDistance: number,
    CameraMode: enum.Enum_CameraMode,
    CameraOffset: datatypes.Vector3,
    DisplayDistanceType: enum.Enum_HumanoidDisplayDistanceType,
    DisplayName: string,
    EvaluateStateMachine: boolean,
    FloorMaterial: enum.Enum_Material,
    Health: number,
    HealthDisplayDistance: number,
    HealthDisplayType: enum.Enum_HumanoidHealthDisplayType,
    Health_XML: number,
    HipHeight: number,
    InternalBodyScale: datatypes.Vector3,
    InternalDisplayName: string,
    InternalHeadScale: number,
    InternalOriginalHipHeight: number,
    Jump: boolean,
    JumpHeight: number,
    JumpPower: number,
    JumpReplicate: boolean,
    MaxHealth: number,
    MaxSlopeAngle: number,
    MoveDirection: datatypes.Vector3,
    MoveDirectionInternal: datatypes.Vector3,
    NameDisplayDistance: number,
    NameOcclusion: enum.Enum_NameOcclusion,
    NetworkHumanoidState: enum.Enum_HumanoidStateType,
    PlatformStand: boolean,
    RequiresNeck: boolean,
    RigType: enum.Enum_HumanoidRigType,
    RootPart: BasePart,
    SeatPart: BasePart,
    Sit: boolean,
    Strafe: boolean,
    TargetPoint: datatypes.Vector3,
    UseJumpPower: boolean,
    WalkAngleError: number,
    WalkDirection: datatypes.Vector3,
    WalkSpeed: number,
    WalkToPart: BasePart,
    WalkToPoint: datatypes.Vector3,
    AddAccessory: (self: Humanoid, accessory: any) -> (),
    BuildRigFromAttachments: (self: Humanoid) -> (),
    CacheDefaults: (self: Humanoid) -> (),
    ChangeState: (self: Humanoid, state: enum.Enum_HumanoidStateType) -> (),
    ComputeOriginalSizeForPart: (self: Humanoid, part: any) -> datatypes.Vector3?,
    EquipTool: (self: Humanoid, tool: any) -> (),
    GetAccessories: (self: Humanoid) -> {any},
    GetAccessoryHandleScale: (self: Humanoid, instance: any, partType: enum.Enum_BodyPartR15) -> datatypes.Vector3,
    GetAppliedDescription: (self: Humanoid) -> HumanoidDescription,
    GetBodyPartR15: (self: Humanoid, part: any) -> enum.Enum_BodyPartR15,
    GetLimb: (self: Humanoid, part: any) -> enum.Enum_Limb,
    GetMoveVelocity: (self: Humanoid) -> datatypes.Vector3,
    GetState: (self: Humanoid) -> enum.Enum_HumanoidStateType,
    GetStateEnabled: (self: Humanoid, state: enum.Enum_HumanoidStateType) -> boolean,
    Move: (self: Humanoid, moveDirection: datatypes.Vector3, relativeToCamera: boolean) -> (),
    MoveTo: (self: Humanoid, location: datatypes.Vector3, part: any) -> (),
    RemoveAccessories: (self: Humanoid) -> (),
    ReplaceBodyPartR15: (self: Humanoid, bodyPart: enum.Enum_BodyPartR15, part: BasePart) -> boolean,
    SetClickToWalkEnabled: (self: Humanoid, enabled: boolean) -> (),
    SetStateEnabled: (self: Humanoid, state: enum.Enum_HumanoidStateType, enabled: boolean) -> (),
    TakeDamage: (self: Humanoid, amount: number) -> (),
    UnequipTools: (self: Humanoid) -> (),
    ApplyDescription: (self: Humanoid, humanoidDescription: HumanoidDescription, assetTypeVerification: enum.Enum_AssetTypeVerification) -> (),
    ApplyDescriptionClientServer: (self: Humanoid, humanoidDescription: HumanoidDescription) -> (),
    ApplyDescriptionReset: (self: Humanoid, humanoidDescription: HumanoidDescription, assetTypeVerification: enum.Enum_AssetTypeVerification) -> (),
    PlayEmote: (self: Humanoid, emoteName: string) -> boolean,
    PlayEmoteAndGetAnimTrackById: (self: Humanoid, emoteId: buffer) -> ...any,
}

export type HumanoidDescription = Instance & {
    AccessoryBlob: string,
    BackAccessory: string,
    BodyTypeScale: number,
    ClimbAnimation: buffer,
    DepthScale: number,
    EmotesDataInternal: string,
    EquippedEmotesDataInternal: string,
    Face: buffer,
    FaceAccessory: string,
    FallAnimation: buffer,
    FrontAccessory: string,
    GraphicTShirt: buffer,
    HairAccessory: string,
    HatAccessory: string,
    Head: buffer,
    HeadColor: datatypes.Color3,
    HeadScale: number,
    HeightScale: number,
    IdleAnimation: buffer,
    JumpAnimation: buffer,
    LeftArm: buffer,
    LeftArmColor: datatypes.Color3,
    LeftLeg: buffer,
    LeftLegColor: datatypes.Color3,
    MoodAnimation: buffer,
    NeckAccessory: string,
    NumberEmotesLoaded: number,
    Pants: buffer,
    ProportionScale: number,
    ResetIncludesBodyParts: boolean,
    RightArm: buffer,
    RightArmColor: datatypes.Color3,
    RightLeg: buffer,
    RightLegColor: datatypes.Color3,
    RunAnimation: buffer,
    Shirt: buffer,
    ShouldersAccessory: string,
    SwimAnimation: buffer,
    Torso: buffer,
    TorsoColor: datatypes.Color3,
    WaistAccessory: string,
    WalkAnimation: buffer,
    WidthScale: number,
    AddEmote: (self: HumanoidDescription, name: string, assetId: buffer) -> (),
    GetAccessories: (self: HumanoidDescription, includeRigidAccessories: boolean) -> {any},
    GetEmotes: (self: HumanoidDescription) -> {[string]: any},
    GetEquippedEmotes: (self: HumanoidDescription) -> {any},
    RemoveEmote: (self: HumanoidDescription, name: string) -> (),
    SetAccessories: (self: HumanoidDescription, accessories: {any}, includeRigidAccessories: boolean) -> (),
    SetEmotes: (self: HumanoidDescription, emotes: {[string]: any}) -> (),
    SetEquippedEmotes: (self: HumanoidDescription, equippedEmotes: {any}) -> (),
}

export type HumanoidRigDescription = Instance & {
    Chest: any,
    ChestRangeMax: datatypes.Vector3,
    ChestRangeMin: datatypes.Vector3,
    ChestSize: number,
    ChestTposeAdjustment: datatypes.CFrame,
    Head: any,
    HeadRangeMax: datatypes.Vector3,
    HeadRangeMin: datatypes.Vector3,
    HeadSize: number,
    HeadTposeAdjustment: datatypes.CFrame,
    LeftAnkle: any,
    LeftAnkleRangeMax: datatypes.Vector3,
    LeftAnkleRangeMin: datatypes.Vector3,
    LeftAnkleSize: number,
    LeftAnkleTposeAdjustment: datatypes.CFrame,
    LeftClavicle: any,
    LeftClavicleRangeMax: datatypes.Vector3,
    LeftClavicleRangeMin: datatypes.Vector3,
    LeftClavicleSize: number,
    LeftClavicleTposeAdjustment: datatypes.CFrame,
    LeftElbow: any,
    LeftElbowRangeMax: datatypes.Vector3,
    LeftElbowRangeMin: datatypes.Vector3,
    LeftElbowSize: number,
    LeftElbowTposeAdjustment: datatypes.CFrame,
    LeftHip: any,
    LeftHipRangeMax: datatypes.Vector3,
    LeftHipRangeMin: datatypes.Vector3,
    LeftHipSize: number,
    LeftHipTposeAdjustment: datatypes.CFrame,
    LeftKnee: any,
    LeftKneeRangeMax: datatypes.Vector3,
    LeftKneeRangeMin: datatypes.Vector3,
    LeftKneeSize: number,
    LeftKneeTposeAdjustment: datatypes.CFrame,
    LeftShoulder: any,
    LeftShoulderRangeMax: datatypes.Vector3,
    LeftShoulderRangeMin: datatypes.Vector3,
    LeftShoulderSize: number,
    LeftShoulderTposeAdjustment: datatypes.CFrame,
    LeftToes: any,
    LeftToesRangeMax: datatypes.Vector3,
    LeftToesRangeMin: datatypes.Vector3,
    LeftToesSize: number,
    LeftToesTposeAdjustment: datatypes.CFrame,
    LeftWrist: any,
    LeftWristRangeMax: datatypes.Vector3,
    LeftWristRangeMin: datatypes.Vector3,
    LeftWristSize: number,
    LeftWristTposeAdjustment: datatypes.CFrame,
    Neck: any,
    NeckRangeMax: datatypes.Vector3,
    NeckRangeMin: datatypes.Vector3,
    NeckSize: number,
    NeckTposeAdjustment: datatypes.CFrame,
    Pelvis: any,
    PelvisRangeMax: datatypes.Vector3,
    PelvisRangeMin: datatypes.Vector3,
    PelvisSize: number,
    PelvisTposeAdjustment: datatypes.CFrame,
    RightAnkle: any,
    RightAnkleRangeMax: datatypes.Vector3,
    RightAnkleRangeMin: datatypes.Vector3,
    RightAnkleSize: number,
    RightAnkleTposeAdjustment: datatypes.CFrame,
    RightClavicle: any,
    RightClavicleRangeMax: datatypes.Vector3,
    RightClavicleRangeMin: datatypes.Vector3,
    RightClavicleSize: number,
    RightClavicleTposeAdjustment: datatypes.CFrame,
    RightElbow: any,
    RightElbowRangeMax: datatypes.Vector3,
    RightElbowRangeMin: datatypes.Vector3,
    RightElbowSize: number,
    RightElbowTposeAdjustment: datatypes.CFrame,
    RightHip: any,
    RightHipRangeMax: datatypes.Vector3,
    RightHipRangeMin: datatypes.Vector3,
    RightHipSize: number,
    RightHipTposeAdjustment: datatypes.CFrame,
    RightKnee: any,
    RightKneeRangeMax: datatypes.Vector3,
    RightKneeRangeMin: datatypes.Vector3,
    RightKneeSize: number,
    RightKneeTposeAdjustment: datatypes.CFrame,
    RightShoulder: any,
    RightShoulderRangeMax: datatypes.Vector3,
    RightShoulderRangeMin: datatypes.Vector3,
    RightShoulderSize: number,
    RightShoulderTposeAdjustment: datatypes.CFrame,
    RightToes: any,
    RightToesRangeMax: datatypes.Vector3,
    RightToesRangeMin: datatypes.Vector3,
    RightToesSize: number,
    RightToesTposeAdjustment: datatypes.CFrame,
    RightWrist: any,
    RightWristRangeMax: datatypes.Vector3,
    RightWristRangeMin: datatypes.Vector3,
    RightWristSize: number,
    RightWristTposeAdjustment: datatypes.CFrame,
    Root: any,
    RootRangeMax: datatypes.Vector3,
    RootRangeMin: datatypes.Vector3,
    RootSize: number,
    RootTposeAdjustment: datatypes.CFrame,
    Waist: any,
    WaistRangeMax: datatypes.Vector3,
    WaistRangeMin: datatypes.Vector3,
    WaistSize: number,
    WaistTposeAdjustment: datatypes.CFrame,
    Automap: (self: HumanoidRigDescription, character: any) -> (),
    GetJointNames: (self: HumanoidRigDescription) -> {any},
    GetR15JointNames: (self: HumanoidRigDescription) -> {any},
    GetR6JointNames: (self: HumanoidRigDescription) -> {any},
}

export type IKControl = Instance & {
    ChainRoot: any,
    Enabled: boolean,
    EndEffector: any,
    EndEffectorOffset: datatypes.CFrame,
    Offset: datatypes.CFrame,
    Pole: any,
    Priority: number,
    SmoothTime: number,
    Target: any,
    Type: enum.Enum_IKControlType,
    Weight: number,
    GetChainCount: (self: IKControl) -> number,
    GetChainLength: (self: IKControl) -> number,
    GetNodeLocalCFrame: (self: IKControl, index: number) -> datatypes.CFrame,
    GetNodeWorldCFrame: (self: IKControl, index: number) -> datatypes.CFrame,
    GetRawFinalTarget: (self: IKControl) -> datatypes.CFrame,
    GetSmoothedFinalTarget: (self: IKControl) -> datatypes.CFrame,
    Solve: (self: IKControl) -> (),
}

export type ILegacyStudioBridge = Instance & {
}

export type LegacyStudioBridge = ILegacyStudioBridge & {
}

export type IXPService = Instance & {
    ClearUserLayers: (self: IXPService) -> (),
    GetBrowserTrackerLayerLoadingStatus: (self: IXPService) -> enum.Enum_IXPLoadingStatus,
    GetBrowserTrackerLayerVariables: (self: IXPService, layerName: string) -> {[string]: any},
    GetBrowserTrackerStatusForLayer: (self: IXPService, layerName: string) -> enum.Enum_IXPLoadingStatus??,
    GetRegisteredUserLayersToStatus: (self: IXPService) -> {[string]: any},
    GetUserLayerLoadingStatus: (self: IXPService) -> enum.Enum_IXPLoadingStatus,
    GetUserLayerVariables: (self: IXPService, layerName: string) -> {[string]: any},
    GetUserStatusForLayer: (self: IXPService, layerName: string) -> enum.Enum_IXPLoadingStatus??,
    InitializeUserLayers: (self: IXPService, userId: buffer) -> (),
    LogBrowserTrackerLayerExposure: (self: IXPService, layerName: string) -> (),
    LogUserLayerExposure: (self: IXPService, layerName: string) -> (),
    RegisterUserLayers: (self: IXPService, userLayers: any) -> (),
}

export type IncrementalPatchBuilder = Instance & {
    AddPathsToBundle: boolean,
    BuildDebouncePeriod: number,
    HighCompression: boolean,
    SerializePatch: boolean,
    ZstdCompression: boolean,
}

export type InputAction = Instance & {
    Enabled: boolean,
    Type: enum.Enum_InputActionType,
    Fire: (self: InputAction, value: any) -> (),
    GetState: (self: InputAction) -> any,
}

export type InputBinding = Instance & {
    Down: enum.Enum_KeyCode,
    KeyCode: enum.Enum_KeyCode,
    Left: enum.Enum_KeyCode,
    PressedThreshold: number,
    ReleasedThreshold: number,
    Right: enum.Enum_KeyCode,
    Scale: number,
    UIButton: GuiButton,
    Up: enum.Enum_KeyCode,
    Vector2Scale: datatypes.Vector2,
}

export type InputContext = Instance & {
    Enabled: boolean,
    Priority: number,
    Sink: boolean,
}

export type InputObject = Instance & {
    Delta: datatypes.Vector3,
    KeyCode: enum.Enum_KeyCode,
    Position: datatypes.Vector3,
    UserInputState: enum.Enum_UserInputState,
    UserInputType: enum.Enum_UserInputType,
    IsModifierKeyDown: (self: InputObject, modifierKey: enum.Enum_ModifierKey) -> boolean,
}

export type InsertService = Instance & {
    AllowClientInsertModels: boolean,
    GetLocalFileContents: (self: InsertService, contentId: string) -> string,
    LoadLocalAsset: (self: InsertService, assetPath: string) -> any,
    LoadPackageAsset: (self: InsertService, url: any) -> any,
    CreateMeshPartAsync: (self: InsertService, meshId: any, collisionFidelity: enum.Enum_CollisionFidelity, renderFidelity: enum.Enum_RenderFidelity) -> MeshPart,
    GetFreeDecals: (self: InsertService, searchText: string, pageNum: number) -> {any},
    GetFreeModels: (self: InsertService, searchText: string, pageNum: number) -> {any},
    GetLatestAssetVersionAsync: (self: InsertService, assetId: buffer) -> buffer,
    LoadAsset: (self: InsertService, assetId: buffer) -> any,
    LoadAssetVersion: (self: InsertService, assetVersionId: buffer) -> any,
    LoadAssetWithFormat: (self: InsertService, assetId: buffer, format: string) -> any,
    LoadPackageAssetAsync: (self: InsertService, url: any) -> any,
}

export type InternalSyncItem = Instance & {
    AutoSync: boolean,
    Enabled: boolean,
    Path: string,
    Target: any,
}

export type InternalSyncService = Instance & {
}

export type JointInstance = Instance & {
    Active: boolean,
    C0: datatypes.CFrame,
    C1: datatypes.CFrame,
    Enabled: boolean,
    Part0: BasePart,
    Part1: BasePart,
}

export type DynamicRotate = JointInstance & {
    BaseAngle: number,
}

export type RotateP = DynamicRotate & {
}

export type RotateV = DynamicRotate & {
}

export type Glue = JointInstance & {
    F0: datatypes.Vector3,
    F1: datatypes.Vector3,
    F2: datatypes.Vector3,
    F3: datatypes.Vector3,
}

export type ManualSurfaceJointInstance = JointInstance & {
}

export type ManualGlue = ManualSurfaceJointInstance & {
}

export type ManualWeld = ManualSurfaceJointInstance & {
}

export type Motor = JointInstance & {
    CurrentAngle: number,
    DesiredAngle: number,
    MaxVelocity: number,
    ReplicateCurrentAngle: number,
    SetDesiredAngle: (self: Motor, value: number) -> (),
}

export type Motor6D = Motor & {
    ChildName: string,
    ParentName: string,
    ReplicateCurrentAngle6D: datatypes.Vector3,
    ReplicateCurrentOffset6D: datatypes.Vector3,
    Transform: datatypes.CFrame,
}

export type Rotate = JointInstance & {
}

export type Snap = JointInstance & {
}

export type VelocityMotor = JointInstance & {
    CurrentAngle: number,
    DesiredAngle: number,
    Hole: Hole,
    MaxVelocity: number,
}

export type Weld = JointInstance & {
}

export type JointsService = Instance & {
    ClearJoinAfterMoveJoints: (self: JointsService) -> (),
    CreateJoinAfterMoveJoints: (self: JointsService) -> (),
    SetJoinAfterMoveInstance: (self: JointsService, joinInstance: any) -> (),
    SetJoinAfterMoveTarget: (self: JointsService, joinTarget: any) -> (),
    ShowPermissibleJoints: (self: JointsService) -> (),
}

export type KeyboardService = Instance & {
}

export type Keyframe = Instance & {
    Time: number,
    AddMarker: (self: Keyframe, marker: any) -> (),
    AddPose: (self: Keyframe, pose: any) -> (),
    GetMarkers: (self: Keyframe) -> any,
    GetPoses: (self: Keyframe) -> any,
    RemoveMarker: (self: Keyframe, marker: any) -> (),
    RemovePose: (self: Keyframe, pose: any) -> (),
}

export type KeyframeMarker = Instance & {
    Value: string,
}

export type KeyframeSequenceProvider = Instance & {
    GetMemStats: (self: KeyframeSequenceProvider) -> {[string]: any},
    RegisterActiveKeyframeSequence: (self: KeyframeSequenceProvider, keyframeSequence: any) -> any,
    RegisterKeyframeSequence: (self: KeyframeSequenceProvider, keyframeSequence: any) -> any,
    GetAnimations: (self: KeyframeSequenceProvider, userId: buffer) -> any,
    GetKeyframeSequenceAsync: (self: KeyframeSequenceProvider, assetId: any) -> any,
}

export type LSPFileSyncService = Instance & {
}

export type LanguageService = Instance & {
}

export type Light = Instance & {
    Brightness: number,
    Color: datatypes.Color3,
    Enabled: boolean,
    Shadows: boolean,
}

export type PointLight = Light & {
    Range: number,
}

export type SpotLight = Light & {
    Angle: number,
    Face: enum.Enum_NormalId,
    Range: number,
}

export type SurfaceLight = Light & {
    Angle: number,
    Face: enum.Enum_NormalId,
    Range: number,
}

export type Lighting = Instance & {
    Ambient: datatypes.Color3,
    Brightness: number,
    ClockTime: number,
    ColorShift_Bottom: datatypes.Color3,
    ColorShift_Top: datatypes.Color3,
    EnvironmentDiffuseScale: number,
    EnvironmentSpecularScale: number,
    ExposureCompensation: number,
    FogColor: datatypes.Color3,
    FogEnd: number,
    FogStart: number,
    GeographicLatitude: number,
    GlobalShadows: boolean,
    LightingStyle: enum.Enum_LightingStyle,
    OutdoorAmbient: datatypes.Color3,
    PrioritizeLightingQuality: boolean,
    ShadowSoftness: number,
    Technology: enum.Enum_Technology,
    TimeOfDay: string,
    GetMinutesAfterMidnight: (self: Lighting) -> number,
    GetMoonDirection: (self: Lighting) -> datatypes.Vector3,
    GetMoonPhase: (self: Lighting) -> number,
    GetSunDirection: (self: Lighting) -> datatypes.Vector3,
    SetMinutesAfterMidnight: (self: Lighting, minutes: number) -> (),
}

export type LinkingService = Instance & {
    DetectUrl: (self: LinkingService, url: string) -> (),
    GetAndClearLastPendingUrl: (self: LinkingService) -> {[string]: any},
    GetLastLuaUrl: (self: LinkingService) -> string,
    IsUrlRegistered: (self: LinkingService, url: string) -> boolean,
    RegisterLuaUrl: (self: LinkingService, url: string) -> (),
    StartLuaUrlDelivery: (self: LinkingService) -> {[string]: any},
    StopLuaUrlDelivery: (self: LinkingService) -> (),
    OpenUrl: (self: LinkingService, url: string) -> boolean,
    SupportsSwitchToSettingsApp: (self: LinkingService) -> boolean,
    SwitchToSettingsApp: (self: LinkingService, route: string) -> (),
}

export type LiveScriptingService = Instance & {
    ServerLiveEditingMode: enum.Enum_ServerLiveEditingMode,
}

export type LiveSyncService = Instance & {
    HasSyncedInstances: boolean,
    GetSyncState: (self: LiveSyncService, instance: any) -> ...any,
}

export type LocalStorageService = Instance & {
    Flush: (self: LocalStorageService) -> (),
    GetItem: (self: LocalStorageService, key: string) -> string,
    SetItem: (self: LocalStorageService, key: string, value: string) -> (),
    WhenLoaded: (self: LocalStorageService, callback: any) -> (),
}

export type AppStorageService = LocalStorageService & {
}

export type UserStorageService = LocalStorageService & {
}

export type LocalizationService = Instance & {
    ForcePlayModeGameLocaleId: string,
    ForcePlayModeRobloxLocaleId: string,
    GameSourceLanguageId: string,
    IsTextScraperRunning: boolean,
    LocaleManifest: string,
    RobloxForcePlayModeGameLocaleId: string,
    RobloxForcePlayModeRobloxLocaleId: string,
    RobloxLocaleId: string,
    ShouldUseCloudTable: boolean,
    SystemLocaleId: string,
    GetCorescriptLocalizations: (self: LocalizationService) -> any,
    GetTableEntries: (self: LocalizationService, instance: any) -> {any},
    GetTranslatorForPlayer: (self: LocalizationService, player: any) -> any,
    SetRobloxLocaleId: (self: LocalizationService, locale: string) -> (),
    StartTextScraper: (self: LocalizationService) -> (),
    StopTextScraper: (self: LocalizationService) -> (),
    GetCountryRegionForPlayerAsync: (self: LocalizationService, player: any) -> string,
    GetTranslatorForLocaleAsync: (self: LocalizationService, locale: string) -> any,
    GetTranslatorForPlayerAsync: (self: LocalizationService, player: any) -> any,
    PromptDownloadGameTableToCSV: (self: LocalizationService, table: any) -> (),
    PromptExportToCSVs: (self: LocalizationService) -> (),
    PromptImportFromCSVs: (self: LocalizationService) -> (),
    PromptUploadCSVToGameTable: (self: LocalizationService) -> any,
}

export type LocalizationTable = Instance & {
    Contents: string,
    IsExemptFromUGCAnalytics: boolean,
    SourceLocaleId: string,
    GetEntries: (self: LocalizationTable) -> {any},
    GetTranslator: (self: LocalizationTable, localeId: string) -> any,
    RemoveEntry: (self: LocalizationTable, key: string, source: string, context: string) -> (),
    RemoveEntryValue: (self: LocalizationTable, key: string, source: string, context: string, localeId: string) -> (),
    RemoveTargetLocale: (self: LocalizationTable, localeId: string) -> (),
    SetEntries: (self: LocalizationTable, entries: any) -> (),
    SetEntryContext: (self: LocalizationTable, key: string, source: string, context: string, newContext: string) -> (),
    SetEntryExample: (self: LocalizationTable, key: string, source: string, context: string, example: string) -> (),
    SetEntryKey: (self: LocalizationTable, key: string, source: string, context: string, newKey: string) -> (),
    SetEntrySource: (self: LocalizationTable, key: string, source: string, context: string, newSource: string) -> (),
    SetEntryValue: (self: LocalizationTable, key: string, source: string, context: string, localeId: string, text: string) -> (),
    SetIsExemptFromUGCAnalytics: (self: LocalizationTable, value: boolean) -> (),
}

export type CloudLocalizationTable = LocalizationTable & {
}

export type LodDataEntity = Instance & {
    EntityLodEnabled: boolean,
    EntityPosition: datatypes.CFrame,
    EntityScale: datatypes.Vector3,
    EntitySource: any,
}

export type LodDataService = Instance & {
}

export type LogReporterService = Instance & {
    ReportLog: (self: LogReporterService, fingerprint: string, uuid: string, desc: string, attributes: {[string]: any}, annotations: {[string]: any}) -> boolean,
    ReportMultipleLogs: (self: LogReporterService, fingerprint: string, uuid: string, desc: string, attributes: {[string]: any}, annotations: {[string]: any}, numLogs: number) -> boolean,
}

export type LogService = Instance & {
    ClearOutput: (self: LogService) -> (),
    ExecuteScript: (self: LogService, source: string) -> (),
    GetHttpResultHistory: (self: LogService) -> {any},
    GetLogHistory: (self: LogService) -> {any},
    RequestHttpResultApproved: (self: LogService) -> (),
    RequestServerHttpResult: (self: LogService) -> (),
    RequestServerOutput: (self: LogService) -> (),
}

export type LoginService = Instance & {
    Logout: (self: LoginService) -> (),
    PromptLogin: (self: LoginService) -> (),
}

export type LuaSettings = Instance & {
}

export type LuaSourceContainer = Instance & {
    CachedRemoteSource: string,
    CachedRemoteSourceLoadState: number,
    HasAssociatedDrafts: boolean,
    IsDifferentFromFileSystem: boolean,
    OriginalScriptGuid: string,
    SandboxedSource: string,
    ScriptGuid: string,
    isPlayerScript: boolean,
}

export type AuroraScript = LuaSourceContainer & {
    DumpMispredictions: boolean,
    EnableLOD: boolean,
    LODDistanceFactor: number,
    LODFrequencyFactor: number,
    Priority: number,
    RunInParallel: boolean,
    Source: string,
    Tag: string,
    AddTo: (self: AuroraScript, instance: any) -> (),
    IsOnInstance: (self: AuroraScript, instance: any) -> boolean,
    RemoveFrom: (self: AuroraScript, instance: any) -> (),
}

export type BaseScript = LuaSourceContainer & {
    Disabled: boolean,
    Enabled: boolean,
    RunContext: enum.Enum_RunContext,
}

export type CoreScript = BaseScript & {
}

export type Script = BaseScript & {
    Source: string,
    GetHash: (self: Script) -> string,
}

export type LocalScript = Script & {
}

export type ModuleScript = LuaSourceContainer & {
    Confidential: boolean,
    Source: string,
}

export type LuaWebService = Instance & {
}

export type LuauScriptAnalyzerService = Instance & {
}

export type MLModelDeliveryService = Instance & {
}

export type MarkerCurve = Instance & {
    Length: number,
    ValuesAndTimes: buffer,
    GetMarkerAtIndex: (self: MarkerCurve, index: number) -> {[string]: any},
    GetMarkers: (self: MarkerCurve) -> {any},
    InsertMarkerAtTime: (self: MarkerCurve, time: number, marker: string) -> {any},
    RemoveMarkerAtIndex: (self: MarkerCurve, startingIndex: number, count: number) -> number,
}

export type MarketplaceService = Instance & {
    PlayerCanMakePurchases: (self: MarketplaceService, player: any) -> boolean,
    PrepareCollectiblesPurchase: (self: MarketplaceService, player: any, assetId: buffer, collectibleItemId: string, collectibleItemInstanceId: string, collectibleProductId: string, expectedPrice: number) -> (),
    PromptBulkPurchase: (self: MarketplaceService, player: Player, lineItems: {any}, options: {[string]: any}) -> (),
    PromptBundlePurchase: (self: MarketplaceService, player: any, bundleId: buffer) -> (),
    PromptCancelSubscription: (self: MarketplaceService, user: Player, subscriptionId: string) -> (),
    PromptCollectiblesPurchase: (self: MarketplaceService, player: any, assetId: buffer, collectibleItemId: string, collectibleItemInstanceId: string, collectibleProductId: string, expectedPrice: number) -> (),
    PromptGamePassPurchase: (self: MarketplaceService, player: any, gamePassId: buffer) -> (),
    PromptNativePurchase: (self: MarketplaceService, player: any, productId: string) -> (),
    PromptNativePurchaseWithLocalPlayer: (self: MarketplaceService, productId: string) -> (),
    PromptPremiumPurchase: (self: MarketplaceService, player: any) -> (),
    PromptProductPurchase: (self: MarketplaceService, player: any, productId: buffer, equipIfPurchased: boolean, currencyType: enum.Enum_CurrencyType) -> (),
    PromptPurchase: (self: MarketplaceService, player: any, assetId: buffer, equipIfPurchased: boolean, currencyType: enum.Enum_CurrencyType) -> (),
    PromptRobloxPurchase: (self: MarketplaceService, assetId: buffer, equipIfPurchased: boolean) -> (),
    PromptSubscriptionPurchase: (self: MarketplaceService, user: Player, subscriptionId: string) -> (),
    PromptThirdPartyPurchase: (self: MarketplaceService, player: any, productId: string) -> (),
    ReportAssetSale: (self: MarketplaceService, assetId: string, robuxAmount: number) -> (),
    ReportRobuxUpsellStarted: (self: MarketplaceService) -> (),
    SignalAssetTypePurchased: (self: MarketplaceService, player: any, assetType: enum.Enum_AssetType) -> (),
    SignalClientPurchaseSuccess: (self: MarketplaceService, ticket: string, playerId: buffer, productId: buffer) -> (),
    SignalMockPurchasePremium: (self: MarketplaceService) -> (),
    SignalPromptBulkPurchaseFinished: (self: MarketplaceService, status: enum.Enum_MarketplaceBulkPurchasePromptStatus, results: {[string]: any}) -> (),
    SignalPromptBundlePurchaseFinished: (self: MarketplaceService, player: any, bundleId: buffer, success: boolean) -> (),
    SignalPromptGamePassPurchaseFinished: (self: MarketplaceService, player: any, gamePassId: buffer, success: boolean) -> (),
    SignalPromptPremiumPurchaseFinished: (self: MarketplaceService, didTryPurchasing: boolean) -> (),
    SignalPromptProductPurchaseFinished: (self: MarketplaceService, userId: buffer, productId: buffer, success: boolean) -> (),
    SignalPromptPurchaseFinished: (self: MarketplaceService, player: any, assetId: buffer, success: boolean) -> (),
    SignalPromptSubscriptionPurchaseFinished: (self: MarketplaceService, subscriptionId: string, didTryPurchasing: boolean) -> (),
    SignalServerLuaDialogClosed: (self: MarketplaceService, value: boolean) -> (),
    SignalUserSubscriptionStatusChanged: (self: MarketplaceService, subscriptionId: string) -> (),
    GetDeveloperProductsAsync: (self: MarketplaceService) -> any,
    GetDeveloperProductsForExperienceDetailsPageAsync: (self: MarketplaceService) -> any,
    GetProductInfo: (self: MarketplaceService, assetId: buffer, infoType: enum.Enum_InfoType) -> {[string]: any},
    GetRobuxBalance: (self: MarketplaceService) -> number,
    GetSubscriptionProductInfoAsync: (self: MarketplaceService, subscriptionId: string) -> {[string]: any},
    GetSubscriptionPurchaseInfoAsync: (self: MarketplaceService, subscriptionId: string) -> {[string]: any},
    GetUserSubscriptionDetailsAsync: (self: MarketplaceService, user: Player, subscriptionId: string) -> {[string]: any},
    GetUserSubscriptionDetailsInternalAsync: (self: MarketplaceService, subscriptionId: string) -> {[string]: any},
    GetUserSubscriptionPaymentHistoryAsync: (self: MarketplaceService, user: Player, subscriptionId: string) -> {any},
    GetUserSubscriptionStatusAsync: (self: MarketplaceService, user: Player, subscriptionId: string) -> {[string]: any},
    PerformBulkPurchase: (self: MarketplaceService, orderRequest: {[string]: any}, options: {[string]: any}) -> {[string]: any},
    PerformCancelSubscription: (self: MarketplaceService, subscriptionId: string) -> (),
    PerformPurchase: (self: MarketplaceService, infoType: enum.Enum_InfoType, productId: buffer, expectedPrice: number, requestId: string, isRobloxPurchase: boolean, collectibleItemId: string, collectibleProductId: string, idempotencyKey: string, purchaseAuthToken: string) -> {[string]: any},
    PerformPurchaseV2: (self: MarketplaceService, infoType: enum.Enum_InfoType, productId: buffer, expectedPrice: number, requestId: string, isRobloxPurchase: boolean, collectiblesProductDetails: {[string]: any}) -> {[string]: any},
    PerformSubscriptionPurchase: (self: MarketplaceService, subscriptionId: string) -> string,
    PerformSubscriptionPurchaseV2: (self: MarketplaceService, subscriptionId: string, paymentProvider: string) -> (),
    PlayerOwnsAsset: (self: MarketplaceService, player: any, assetId: buffer) -> boolean,
    PlayerOwnsBundle: (self: MarketplaceService, player: Player, bundleId: buffer) -> boolean,
    UserOwnsGamePassAsync: (self: MarketplaceService, userId: buffer, gamePassId: buffer) -> boolean,
}

export type MatchmakingService = Instance & {
    GetServerAttribute: (self: MatchmakingService, name: string) -> ...any,
    InitializeServerAttributesForStudio: (self: MatchmakingService, serverAttributes: {[string]: any}) -> ...any,
    SetServerAttribute: (self: MatchmakingService, name: string, value: any) -> ...any,
}

export type MaterialGenerationService = Instance & {
    StartSession: (self: MaterialGenerationService) -> MaterialGenerationSession,
    DEPRECATED_GenerateMaterialVariantsAync: (self: MaterialGenerationService, prompt: string, samples: buffer) -> any,
    DEPRECATED_UploadMaterialVariantsAsync: (self: MaterialGenerationService, materialVaraints: any) -> (),
    GenerateMaterialVariantsAsync: (self: MaterialGenerationService, prompt: string, samples: buffer) -> {[string]: any},
}

export type MaterialGenerationSession = Instance & {
    GenerateImagesAsync: (self: MaterialGenerationSession, prompt: string, options: {[string]: any}) -> ...any,
    GenerateMaterialMapsAsync: (self: MaterialGenerationSession, imageId: string) -> {[string]: any},
    UploadMaterialAsync: (self: MaterialGenerationSession, imageId: string) -> {[string]: any},
}

export type MaterialService = Instance & {
    AsphaltName: string,
    BasaltName: string,
    BrickName: string,
    CardboardName: string,
    CarpetName: string,
    CeramicTilesName: string,
    ClayRoofTilesName: string,
    CobblestoneName: string,
    ConcreteName: string,
    CorrodedMetalName: string,
    CrackedLavaName: string,
    DiamondPlateName: string,
    FabricName: string,
    FoilName: string,
    GlacierName: string,
    GraniteName: string,
    GrassName: string,
    GroundName: string,
    IceName: string,
    LeafyGrassName: string,
    LeatherName: string,
    LimestoneName: string,
    MarbleName: string,
    MetalName: string,
    MudName: string,
    PavementName: string,
    PebbleName: string,
    PlasterName: string,
    PlasticName: string,
    RockName: string,
    RoofShinglesName: string,
    RubberName: string,
    SaltName: string,
    SandName: string,
    SandstoneName: string,
    SlateName: string,
    SmoothPlasticName: string,
    SnowName: string,
    Use2022Materials: boolean,
    Use2022MaterialsXml: boolean,
    WoodName: string,
    WoodPlanksName: string,
    GetBaseMaterialOverride: (self: MaterialService, material: enum.Enum_Material) -> string,
    GetIsMaterialActionAsToolEnabled: (self: MaterialService) -> boolean,
    GetMaterialOverrideChanged: (self: MaterialService, material: enum.Enum_Material) -> any,
    GetMaterialVariant: (self: MaterialService, material: enum.Enum_Material, name: string) -> MaterialVariant,
    GetOverrideStatus: (self: MaterialService, material: enum.Enum_Material) -> enum.Enum_PropertyStatus,
    SetBaseMaterialOverride: (self: MaterialService, material: enum.Enum_Material, name: string) -> (),
    SetCurrentMaterial: (self: MaterialService, baseMaterial: enum.Enum_Material, materialVariant: string) -> (),
    ToggleMaterialFillToolEnabled: (self: MaterialService) -> (),
}

export type MaterialVariant = Instance & {
    AvgMetalness: number,
    AvgRoughness: number,
    BaseMaterial: enum.Enum_Material,
    ColorMap: any,
    CustomPhysicalProperties: datatypes.PhysicalProperties,
    MaterialPattern: enum.Enum_MaterialPattern,
    MetalnessMap: any,
    NormalMap: any,
    RoughnessMap: any,
    StudsPerTile: number,
    TexturePack: any,
}

export type MemStorageConnection = Instance & {
    Disconnect: (self: MemStorageConnection) -> (),
}

export type MemStorageService = Instance & {
    Bind: (self: MemStorageService, key: string, callback: any) -> MemStorageConnection,
    BindAndFire: (self: MemStorageService, key: string, callback: any) -> MemStorageConnection,
    Call: (self: MemStorageService, key: string, input: any) -> any,
    Fire: (self: MemStorageService, key: string, value: string) -> (),
    GetItem: (self: MemStorageService, key: string, defaultValue: string) -> string,
    HasItem: (self: MemStorageService, key: string) -> boolean,
    RemoveItem: (self: MemStorageService, key: string) -> boolean,
    SetItem: (self: MemStorageService, key: string, value: string) -> (),
}

export type MemoryStoreHashMap = Instance & {
    GetAsync: (self: MemoryStoreHashMap, key: string) -> any,
    ListItemsAsync: (self: MemoryStoreHashMap, count: number) -> MemoryStoreHashMapPages,
    RemoveAsync: (self: MemoryStoreHashMap, key: string) -> (),
    SetAsync: (self: MemoryStoreHashMap, key: string, value: any, expiration: buffer) -> boolean,
    UpdateAsync: (self: MemoryStoreHashMap, key: string, transformFunction: any, expiration: buffer) -> any,
}

export type MemoryStoreQueue = Instance & {
    AddAsync: (self: MemoryStoreQueue, value: any, expiration: buffer, priority: number) -> (),
    ReadAsync: (self: MemoryStoreQueue, count: number, allOrNothing: boolean, waitTimeout: number) -> ...any,
    RemoveAsync: (self: MemoryStoreQueue, id: string) -> (),
}

export type MemoryStoreService = Instance & {
    GetHashMap: (self: MemoryStoreService, name: string) -> MemoryStoreHashMap,
    GetQueue: (self: MemoryStoreService, name: string, invisibilityTimeout: number) -> MemoryStoreQueue,
    GetSortedMap: (self: MemoryStoreService, name: string) -> MemoryStoreSortedMap,
}

export type MemoryStoreSortedMap = Instance & {
    GetAsync: (self: MemoryStoreSortedMap, key: string) -> ...any,
    GetRangeAsync: (self: MemoryStoreSortedMap, direction: enum.Enum_SortDirection, count: number, exclusiveLowerBound: any, exclusiveUpperBound: any) -> {any},
    RemoveAsync: (self: MemoryStoreSortedMap, key: string) -> (),
    SetAsync: (self: MemoryStoreSortedMap, key: string, value: any, expiration: buffer, sortKey: any) -> boolean,
    UpdateAsync: (self: MemoryStoreSortedMap, key: string, transformFunction: any, expiration: buffer) -> ...any,
}

export type Message = Instance & {
    Text: string,
}

export type Hint = Message & {
}

export type MessageBusConnection = Instance & {
    Disconnect: (self: MessageBusConnection) -> (),
}

export type MessageBusService = Instance & {
    Call: (self: MessageBusService, key: string, input: any) -> any,
    GetLast: (self: MessageBusService, mid: string) -> any,
    GetMessageId: (self: MessageBusService, domainName: string, messageName: string) -> string,
    GetProtocolMethodRequestMessageId: (self: MessageBusService, protocolName: string, methodName: string) -> string,
    GetProtocolMethodResponseMessageId: (self: MessageBusService, protocolName: string, methodName: string) -> string,
    MakeRequest: (self: MessageBusService, protocolName: string, methodName: string, message: any, callback: any, customTelemetryData: any) -> (),
    Publish: (self: MessageBusService, mid: string, params: any) -> (),
    PublishProtocolMethodRequest: (self: MessageBusService, protocolName: string, methodName: string, message: any, customTelemetryData: any) -> (),
    PublishProtocolMethodResponse: (self: MessageBusService, protocolName: string, methodName: string, message: any, responseCode: number, customTelemetryData: any) -> (),
    SetRequestHandler: (self: MessageBusService, protocolName: string, methodName: string, callback: any) -> (),
    Subscribe: (self: MessageBusService, mid: string, callback: any, once: boolean, sticky: boolean) -> any,
    SubscribeToProtocolMethodRequest: (self: MessageBusService, protocolName: string, methodName: string, callback: any, once: boolean, sticky: boolean) -> any,
    SubscribeToProtocolMethodResponse: (self: MessageBusService, protocolName: string, methodName: string, callback: any, once: boolean, sticky: boolean) -> any,
}

export type MessagingService = Instance & {
    PublishAsync: (self: MessagingService, topic: string, message: any) -> (),
    SubscribeAsync: (self: MessagingService, topic: string, callback: any) -> any,
}

export type MetaBreakpoint = Instance & {
    Condition: string,
    ContinueExecution: boolean,
    Enabled: boolean,
    Id: number,
    IsLogpoint: boolean,
    Line: number,
    LogMessage: string,
    RemoveOnHit: boolean,
    Script: string,
    Valid: boolean,
    GetContextBreakpoints: (self: MetaBreakpoint) -> {[string]: any},
    Remove: (self: MetaBreakpoint, status: any) -> number,
    SetChildBreakpointEnabledByScriptAndContext: (self: MetaBreakpoint, script: string, contextGST: number, enabled: boolean) -> (),
    SetContextEnabled: (self: MetaBreakpoint, context: number, enabled: boolean) -> (),
    SetContinueExecution: (self: MetaBreakpoint, enabled: boolean) -> (),
    SetEnabled: (self: MetaBreakpoint, enabled: boolean) -> (),
    SetLine: (self: MetaBreakpoint, line: number, status: any) -> number,
    SetRemoveOnHit: (self: MetaBreakpoint, enabled: boolean) -> (),
}

export type MetaBreakpointContext = Instance & {
    ContextDataInternal: string,
}

export type MetaBreakpointManager = Instance & {
    AddBreakpoint: (self: MetaBreakpointManager, script: any, line: number, condition: any) -> any,
    GetBreakpointById: (self: MetaBreakpointManager, metaBreakpointId: number) -> MetaBreakpoint,
    RemoveBreakpointById: (self: MetaBreakpointManager, metaBreakpointId: number) -> (),
}

export type Mouse = Instance & {
    Hit: datatypes.CFrame,
    Icon: any,
    Origin: datatypes.CFrame,
    Target: BasePart,
    TargetFilter: any,
    TargetSurface: enum.Enum_NormalId,
    UnitRay: datatypes.Ray,
    ViewSizeX: number,
    ViewSizeY: number,
    X: number,
    Y: number,
}

export type PlayerMouse = Mouse & {
}

export type PluginMouse = Mouse & {
}

export type MouseService = Instance & {
}

export type MultipleDocumentInterfaceInstance = Instance & {
    FocusedDataModelSession: DataModelSession,
}

export type NetworkMarker = Instance & {
}

export type NetworkPeer = Instance & {
    SetOutgoingKBPSLimit: (self: NetworkPeer, limit: number) -> (),
}

export type NetworkClient = NetworkPeer & {
}

export type NetworkServer = NetworkPeer & {
    EncryptStringForPlayerId: (self: NetworkServer, toEncrypt: string, playerId: buffer) -> string,
}

export type NetworkReplicator = Instance & {
    GetPlayer: (self: NetworkReplicator) -> any,
}

export type ClientReplicator = NetworkReplicator & {
    RequestRCCProfilerData: (self: ClientReplicator, frameRate: number, timeFrame: number) -> (),
    RequestServerLuauHeapData: (self: ClientReplicator) -> (),
    RequestServerScriptProfiling: (self: ClientReplicator, start: boolean, frequency: number) -> (),
    RequestServerScriptProfilingData: (self: ClientReplicator) -> (),
    RequestServerStats: (self: ClientReplicator, request: boolean) -> (),
}

export type ServerReplicator = NetworkReplicator & {
}

export type NetworkSettings = Instance & {
    EmulatedTotalMemoryInMB: number,
    FreeMemoryMBytes: number,
    HttpProxyEnabled: boolean,
    HttpProxyURL: string,
    IncomingReplicationLag: number,
    OpenCertManagerDialog: number,
    PrintJoinSizeBreakdown: boolean,
    PrintPhysicsErrors: boolean,
    PrintStreamInstanceQuota: boolean,
    RandomizeJoinInstanceOrder: boolean,
    RenderStreamedRegions: boolean,
    ShowActiveAnimationAsset: boolean,
}

export type NoCollisionConstraint = Instance & {
    Enabled: boolean,
    Part0: BasePart,
    Part1: BasePart,
}

export type Noise = Instance & {
    NoiseType: enum.Enum_NoiseType,
    Seed: number,
    SampleDirectional: (self: Noise, position: datatypes.Vector3, direction: datatypes.Vector3) -> number,
    SampleUniform: (self: Noise, position: datatypes.Vector3) -> number,
}

export type NotificationService = Instance & {
    IsConnected: boolean,
    IsLuaChatEnabled: boolean,
    IsLuaGameDetailsEnabled: boolean,
    SelectedTheme: string,
    ActionEnabled: (self: NotificationService, actionType: enum.Enum_AppShellActionType) -> (),
    ActionTaken: (self: NotificationService, actionType: enum.Enum_AppShellActionType) -> (),
    CancelAllNotification: (self: NotificationService, userId: buffer) -> (),
    CancelNotification: (self: NotificationService, userId: buffer, alertId: number) -> (),
    ScheduleNotification: (self: NotificationService, userId: buffer, alertId: number, alertMsg: string, minutesToFire: number) -> (),
    SwitchedToAppShellFeature: (self: NotificationService, appShellFeature: enum.Enum_AppShellFeature) -> (),
    GetScheduledNotifications: (self: NotificationService, userId: buffer) -> {any},
}

export type OmniRecommendationsService = Instance & {
    ClearSessionId: (self: OmniRecommendationsService) -> (),
    GetSessionId: (self: OmniRecommendationsService) -> string,
    MakeRequest: (self: OmniRecommendationsService, nextPageToken: string) -> HttpRequest,
}

export type OpenCloudApiV1 = Instance & {
    CreateModel: (self: OpenCloudApiV1, name: string) -> any,
    CreateUserNotificationAsync: (self: OpenCloudApiV1, user: string, userNotification: any) -> any,
}

export type OpenCloudService = Instance & {
    GetApiV1: (self: OpenCloudService) -> OpenCloudApiV1,
    RegisterOpenCloud: (self: OpenCloudService, version: string, methodName: string, method: any) -> (),
    RegistrationComplete: (self: OpenCloudService) -> (),
    HttpRequestAsync: (self: OpenCloudService, options: {[string]: any}) -> {[string]: any},
    InvokeAsync: (self: OpenCloudService, version: string, methodName: string, arguments: {[string]: any}, headers: {[string]: any}) -> {[string]: any},
}

export type OperationGraph = Instance & {
}

export type PVInstance = Instance & {
    Origin: datatypes.CFrame,
    ["Pivot Offset"]: datatypes.CFrame,
    GetPivot: (self: PVInstance) -> datatypes.CFrame,
    PivotTo: (self: PVInstance, targetCFrame: datatypes.CFrame) -> (),
}

export type BasePart = PVInstance & {
    Anchored: boolean,
    AssemblyAngularVelocity: datatypes.Vector3,
    AssemblyCenterOfMass: datatypes.Vector3,
    AssemblyLinearVelocity: datatypes.Vector3,
    AssemblyMass: number,
    AssemblyRootPart: BasePart,
    AudioCanCollide: boolean,
    BackSurface: enum.Enum_SurfaceType,
    BottomSurface: enum.Enum_SurfaceType,
    BrickColor: datatypes.BrickColor,
    CFrame: datatypes.CFrame,
    CanCollide: boolean,
    CanQuery: boolean,
    CanTouch: boolean,
    CastShadow: boolean,
    CenterOfMass: datatypes.Vector3,
    CollisionGroup: string,
    CollisionGroupReplicate: string,
    Color: datatypes.Color3,
    CurrentPhysicalProperties: datatypes.PhysicalProperties,
    CustomPhysicalProperties: datatypes.PhysicalProperties,
    DraggingV1: boolean,
    EnableFluidForces: boolean,
    ExtentsCFrame: datatypes.CFrame,
    ExtentsSize: datatypes.Vector3,
    FrontSurface: enum.Enum_SurfaceType,
    LeftSurface: enum.Enum_SurfaceType,
    LocalSimulationValidation: number,
    LocalTransparencyModifier: number,
    Locked: boolean,
    Mass: number,
    Massless: boolean,
    Material: enum.Enum_Material,
    MaterialVariant: string,
    MaterialVariantSerialized: string,
    NetworkIsSleeping: boolean,
    NetworkOwnershipRule: enum.Enum_NetworkOwnership,
    Orientation: datatypes.Vector3,
    PhysicsRepRootPart: BasePart,
    PivotOffset: datatypes.CFrame,
    Position: datatypes.Vector3,
    ReceiveAge: number,
    Reflectance: number,
    ResizeIncrement: number,
    ResizeableFaces: datatypes.Faces,
    RightSurface: enum.Enum_SurfaceType,
    RootPriority: number,
    Rotation: datatypes.Vector3,
    Size: datatypes.Vector3,
    TopSurface: enum.Enum_SurfaceType,
    Transparency: number,
    siz: datatypes.Vector3,
    size: datatypes.Vector3,
    AngularAccelerationToTorque: (self: BasePart, angAcceleration: datatypes.Vector3, angVelocity: datatypes.Vector3) -> datatypes.Vector3,
    ApplyAngularImpulse: (self: BasePart, impulse: datatypes.Vector3) -> (),
    ApplyImpulse: (self: BasePart, impulse: datatypes.Vector3) -> (),
    ApplyImpulseAtPosition: (self: BasePart, impulse: datatypes.Vector3, position: datatypes.Vector3) -> (),
    CanCollideWith: (self: BasePart, part: BasePart) -> boolean,
    CanSetNetworkOwnership: (self: BasePart) -> ...any,
    GetClosestPointOnSurface: (self: BasePart, position: datatypes.Vector3) -> datatypes.Vector3,
    GetConnectedParts: (self: BasePart, recursive: boolean) -> any,
    GetJoints: (self: BasePart) -> any,
    GetMass: (self: BasePart) -> number,
    GetNetworkOwner: (self: BasePart) -> any,
    GetNetworkOwnershipAuto: (self: BasePart) -> boolean,
    GetNoCollisionConstraints: (self: BasePart) -> any,
    GetRootPart: (self: BasePart) -> any,
    GetTouchingParts: (self: BasePart) -> any,
    GetVelocityAtPosition: (self: BasePart, position: datatypes.Vector3) -> datatypes.Vector3,
    IsGrounded: (self: BasePart) -> boolean,
    Resize: (self: BasePart, normalId: enum.Enum_NormalId, deltaAmount: number) -> boolean,
    SetNetworkOwner: (self: BasePart, playerInstance: Player) -> (),
    SetNetworkOwnershipAuto: (self: BasePart) -> (),
    TorqueToAngularAcceleration: (self: BasePart, torque: datatypes.Vector3, angVelocity: datatypes.Vector3) -> datatypes.Vector3,
    IntersectAsync: (self: BasePart, parts: any, collisionfidelity: enum.Enum_CollisionFidelity, renderFidelity: enum.Enum_RenderFidelity) -> any,
    SubtractAsync: (self: BasePart, parts: any, collisionfidelity: enum.Enum_CollisionFidelity, renderFidelity: enum.Enum_RenderFidelity) -> any,
    UnionAsync: (self: BasePart, parts: any, collisionfidelity: enum.Enum_CollisionFidelity, renderFidelity: enum.Enum_RenderFidelity) -> any,
}

export type CornerWedgePart = BasePart & {
}

export type FormFactorPart = BasePart & {
    formFactorRaw: enum.Enum_FormFactor,
}

export type Part = FormFactorPart & {
    Shape: enum.Enum_PartType,
    shap: enum.Enum_PartType,
    shape: enum.Enum_PartType,
}

export type FlagStand = Part & {
    TeamColor: datatypes.BrickColor,
}

export type Platform = Part & {
}

export type Seat = Part & {
    Disabled: boolean,
    Occupant: Humanoid,
    Sit: (self: Seat, humanoid: any) -> (),
}

export type SkateboardPlatform = Part & {
    Controller: SkateboardController,
    ControllingHumanoid: Humanoid,
    MoveState: enum.Enum_MoveState,
    Steer: number,
    StickyWheels: boolean,
    Throttle: number,
    ApplySpecificImpulse: (self: SkateboardPlatform, impulseWorld: datatypes.Vector3) -> (),
}

export type SpawnLocation = Part & {
    AllowTeamChangeOnTouch: boolean,
    Duration: number,
    Enabled: boolean,
    Neutral: boolean,
    TeamColor: datatypes.BrickColor,
}

export type WedgePart = FormFactorPart & {
}

export type Terrain = BasePart & {
    AcquisitionMethod: enum.Enum_TerrainAcquisitionMethod,
    ClusterGrid: string,
    ClusterGridV2: string,
    ClusterGridV3: buffer,
    Decoration: boolean,
    GrassLength: number,
    LastUsedModificationMethod: enum.Enum_TerrainAcquisitionMethod,
    MaterialColors: buffer,
    PhysicsGrid: buffer,
    ShorelinesUpgraded: boolean,
    SmoothGrid: buffer,
    SmoothVoxelsUpgraded: boolean,
    WaterColor: datatypes.Color3,
    WaterReflectance: number,
    WaterTransparency: number,
    WaterWaveSize: number,
    WaterWaveSpeed: number,
    CanShorelinesBeUpgraded: (self: Terrain) -> boolean,
    CanSmoothVoxelsBeUpgraded: (self: Terrain) -> boolean,
    CellCenterToWorld: (self: Terrain, x: number, y: number, z: number) -> datatypes.Vector3,
    CellCornerToWorld: (self: Terrain, x: number, y: number, z: number) -> datatypes.Vector3,
    Clear: (self: Terrain) -> (),
    CopyRegion: (self: Terrain, region: any) -> TerrainRegion,
    CountCells: (self: Terrain) -> number,
    FillBall: (self: Terrain, center: datatypes.Vector3, radius: number, material: enum.Enum_Material) -> (),
    FillBlock: (self: Terrain, cframe: datatypes.CFrame, size: datatypes.Vector3, material: enum.Enum_Material) -> (),
    FillCylinder: (self: Terrain, cframe: datatypes.CFrame, height: number, radius: number, material: enum.Enum_Material) -> (),
    FillRegion: (self: Terrain, region: any, resolution: number, material: enum.Enum_Material) -> (),
    FillWedge: (self: Terrain, cframe: datatypes.CFrame, size: datatypes.Vector3, material: enum.Enum_Material) -> (),
    GetMaterialColor: (self: Terrain, material: enum.Enum_Material) -> datatypes.Color3,
    GetTerrainWireframe: (self: Terrain, cframe: datatypes.CFrame, size: datatypes.Vector3) -> {any},
    PasteRegion: (self: Terrain, region: TerrainRegion, corner: datatypes.Vector3int16, pasteEmptyCells: boolean) -> (),
    ReadVoxelChannels: (self: Terrain, region: any, resolution: number, channelIds: {any}) -> {[string]: any},
    ReadVoxels: (self: Terrain, region: any, resolution: number) -> ...any,
    ReplaceMaterial: (self: Terrain, region: any, resolution: number, sourceMaterial: enum.Enum_Material, targetMaterial: enum.Enum_Material) -> (),
    ReplaceMaterialInTransform: (self: Terrain, cframe: datatypes.CFrame, size: datatypes.Vector3, sourceMaterial: enum.Enum_Material, targetMaterial: enum.Enum_Material) -> (),
    ReplaceMaterialInTransformSubregion: (self: Terrain, cframe: datatypes.CFrame, size: datatypes.Vector3, sourceMaterial: enum.Enum_Material, targetMaterial: enum.Enum_Material, targetRegion: any) -> (),
    SetMaterialColor: (self: Terrain, material: enum.Enum_Material, value: datatypes.Color3) -> (),
    SetMaterialInTransform: (self: Terrain, cframe: datatypes.CFrame, size: datatypes.Vector3, targetMaterial: enum.Enum_Material) -> (),
    SetMaterialInTransformSubregion: (self: Terrain, cframe: datatypes.CFrame, size: datatypes.Vector3, targetMaterial: enum.Enum_Material, targetRegion: any) -> (),
    SmoothRegion: (self: Terrain, region: any, resolution: number, strength: number) -> ...any,
    WorldToCell: (self: Terrain, position: datatypes.Vector3) -> datatypes.Vector3,
    WorldToCellPreferEmpty: (self: Terrain, position: datatypes.Vector3) -> datatypes.Vector3,
    WorldToCellPreferSolid: (self: Terrain, position: datatypes.Vector3) -> datatypes.Vector3,
    WriteVoxelChannels: (self: Terrain, region: any, resolution: number, channels: {[string]: any}) -> (),
    WriteVoxels: (self: Terrain, region: any, resolution: number, materials: {any}, occupancy: {any}) -> (),
}

export type TriangleMeshPart = BasePart & {
    CollisionFidelity: enum.Enum_CollisionFidelity,
    FluidFidelity: enum.Enum_FluidFidelity,
    FluidFidelityInternal: enum.Enum_FluidFidelity,
    MeshSize: datatypes.Vector3,
    UnscaledCofm: datatypes.Vector3,
    UnscaledVolInertiaDiags: datatypes.Vector3,
    UnscaledVolInertiaOffDiags: datatypes.Vector3,
    UnscaledVolume: number,
}

export type MeshPart = TriangleMeshPart & {
    AlternateMeshHash: buffer,
    DoubleSided: boolean,
    HasJointOffset: boolean,
    HasSkinnedMesh: boolean,
    InitialSize: datatypes.Vector3,
    JointOffset: datatypes.Vector3,
    MeshContent: any,
    MeshId: any,
    PhysicsData: buffer,
    RenderFidelity: enum.Enum_RenderFidelity,
    RenderFidelityReplicate: enum.Enum_RenderFidelity,
    TextureContent: any,
    TextureID: any,
    VertexCount: number,
    ApplyMesh: (self: MeshPart, meshPart: any) -> (),
}

export type PartOperation = TriangleMeshPart & {
    AssetId: any,
    ChildData: buffer,
    FormFactor: enum.Enum_FormFactor,
    InitialSize: datatypes.Vector3,
    MeshData: buffer,
    PhysicsData: buffer,
    RenderFidelity: enum.Enum_RenderFidelity,
    SmoothingAngle: number,
    TriangleCount: number,
    UsePartColor: boolean,
    SubstituteGeometry: (self: PartOperation, source: any) -> (),
}

export type IntersectOperation = PartOperation & {
}

export type NegateOperation = PartOperation & {
}

export type UnionOperation = PartOperation & {
}

export type TrussPart = BasePart & {
    Style: enum.Enum_Style,
    style: enum.Enum_Style,
}

export type VehicleSeat = BasePart & {
    AreHingesDetected: number,
    Disabled: boolean,
    HeadsUpDisplay: boolean,
    MaxSpeed: number,
    Occupant: Humanoid,
    Steer: number,
    SteerFloat: number,
    Throttle: number,
    ThrottleFloat: number,
    Torque: number,
    TurnSpeed: number,
    Sit: (self: VehicleSeat, humanoid: any) -> (),
}

export type Camera = PVInstance & {
    CFrame: datatypes.CFrame,
    CameraSubject: any,
    CameraType: enum.Enum_CameraType,
    DiagonalFieldOfView: number,
    FieldOfView: number,
    FieldOfViewMode: enum.Enum_FieldOfViewMode,
    Focus: datatypes.CFrame,
    HeadLocked: boolean,
    HeadScale: number,
    MaxAxisFieldOfView: number,
    NearPlaneZ: number,
    VRTiltAndRollEnabled: boolean,
    ViewportSize: datatypes.Vector2,
    GetPartsObscuringTarget: (self: Camera, castPoints: {any}, ignoreList: any) -> any,
    GetRenderCFrame: (self: Camera) -> datatypes.CFrame,
    GetRoll: (self: Camera) -> number,
    ScreenPointToRay: (self: Camera, x: number, y: number, depth: number) -> datatypes.Ray,
    SetImageServerView: (self: Camera, modelCoord: datatypes.CFrame) -> (),
    SetRoll: (self: Camera, rollAngle: number) -> (),
    ViewportPointToRay: (self: Camera, x: number, y: number, depth: number) -> datatypes.Ray,
    WorldToScreenPoint: (self: Camera, worldPoint: datatypes.Vector3) -> ...any,
    WorldToViewportPoint: (self: Camera, worldPoint: datatypes.Vector3) -> ...any,
    Zoom: (self: Camera, distance: number) -> boolean,
    ZoomToExtents: (self: Camera, boundingBoxCFrame: datatypes.CFrame, boundingBoxSize: datatypes.Vector3) -> (),
}

export type Model = PVInstance & {
    LevelOfDetail: enum.Enum_ModelLevelOfDetail,
    LodEntity: LodDataEntity,
    ModelMeshCFrame: datatypes.CFrame,
    ModelMeshSize: datatypes.Vector3,
    ModelStreamingMode: enum.Enum_ModelStreamingMode,
    NeedsPivotMigration: boolean,
    PrimaryPart: BasePart,
    Scale: number,
    ScaleFactor: number,
    WorldPivot: datatypes.CFrame,
    AddPersistentPlayer: (self: Model, playerInstance: Player) -> (),
    GetBoundingBox: (self: Model) -> ...any,
    GetExtentsSize: (self: Model) -> datatypes.Vector3,
    GetPersistentPlayers: (self: Model) -> any,
    GetScale: (self: Model) -> number,
    MoveTo: (self: Model, position: datatypes.Vector3) -> (),
    RemovePersistentPlayer: (self: Model, playerInstance: Player) -> (),
    ScaleTo: (self: Model, newScaleFactor: number) -> (),
    TranslateBy: (self: Model, delta: datatypes.Vector3) -> (),
}

export type Actor = Model & {
    BindToMessage: (self: Actor, topic: string, callback: any) -> any,
    BindToMessageParallel: (self: Actor, topic: string, callback: any) -> any,
    SendMessage: (self: Actor, topic: string, ...any) -> (),
}

export type BackpackItem = Model & {
    TextureId: any,
}

export type HopperBin = BackpackItem & {
    Active: boolean,
    BinType: enum.Enum_BinType,
    Command: string,
    TextureName: string,
    Disable: (self: HopperBin) -> (),
    ToggleSelect: (self: HopperBin) -> (),
}

export type Tool = BackpackItem & {
    CanBeDropped: boolean,
    Enabled: boolean,
    Grip: datatypes.CFrame,
    GripForward: datatypes.Vector3,
    GripPos: datatypes.Vector3,
    GripRight: datatypes.Vector3,
    GripUp: datatypes.Vector3,
    ManualActivationOnly: boolean,
    RequiresHandle: boolean,
    ToolTip: string,
    Activate: (self: Tool) -> (),
    Deactivate: (self: Tool) -> (),
}

export type Flag = Tool & {
    TeamColor: datatypes.BrickColor,
}

export type Status = Model & {
}

export type WorldRoot = Model & {
    ArePartsTouchingOthers: (self: WorldRoot, partList: any, overlapIgnored: number) -> boolean,
    Blockcast: (self: WorldRoot, cframe: datatypes.CFrame, size: datatypes.Vector3, direction: datatypes.Vector3, params: any) -> any,
    BulkMoveTo: (self: WorldRoot, partList: any, cframeList: {any}, eventMode: enum.Enum_BulkMoveMode) -> (),
    CacheCurrentTerrain: (self: WorldRoot, id: string, center: datatypes.Vector3, radius: number) -> string,
    ClearCachedTerrain: (self: WorldRoot, id: string) -> boolean,
    GetPartBoundsInBox: (self: WorldRoot, cframe: datatypes.CFrame, size: datatypes.Vector3, overlapParams: any) -> any,
    GetPartBoundsInRadius: (self: WorldRoot, position: datatypes.Vector3, radius: number, overlapParams: any) -> any,
    GetPartsInPart: (self: WorldRoot, part: BasePart, overlapParams: any) -> any,
    IKMoveTo: (self: WorldRoot, part: BasePart, target: datatypes.CFrame, translateStiffness: number, rotateStiffness: number, collisionsMode: enum.Enum_IKCollisionsMode) -> (),
    Raycast: (self: WorldRoot, origin: datatypes.Vector3, direction: datatypes.Vector3, raycastParams: any) -> any,
    RaycastCachedTerrain: (self: WorldRoot, id: string, origin: datatypes.Vector3, direction: datatypes.Vector3, ignoreWater: boolean) -> any,
    SetInsertPoint: (self: WorldRoot, point: datatypes.Vector3) -> (),
    Shapecast: (self: WorldRoot, part: BasePart, direction: datatypes.Vector3, params: any) -> any,
    Spherecast: (self: WorldRoot, position: datatypes.Vector3, radius: number, direction: datatypes.Vector3, params: any) -> any,
    StepPhysics: (self: WorldRoot, dt: number, parts: any) -> (),
}

export type Workspace = WorldRoot & {
    AirDensity: number,
    AllowThirdPartySales: boolean,
    AvatarUnificationMode: enum.Enum_AvatarUnificationMode,
    ClientAnimatorThrottling: enum.Enum_ClientAnimatorThrottlingMode,
    CollisionGroupData: buffer,
    CollisionGroups: string,
    CurrentCamera: Camera,
    DataModelPlaceVersion: number,
    DistributedGameTime: number,
    ExplicitAutoJoints: boolean,
    FallHeightEnabled: boolean,
    FallenPartsDestroyHeight: number,
    FluidForces: enum.Enum_FluidForces,
    GlobalWind: datatypes.Vector3,
    Gravity: number,
    IKControlConstraintSupport: enum.Enum_IKControlConstraintSupport,
    InsertPoint: datatypes.Vector3,
    MeshPartHeadsAndAccessories: enum.Enum_MeshPartHeadsAndAccessories,
    ModelStreamingBehavior: enum.Enum_ModelStreamingBehavior,
    MoverConstraintRootBehavior: enum.Enum_MoverConstraintRootBehaviorMode,
    PathfindingUseImprovedSearch: enum.Enum_PathfindingUseImprovedSearch,
    PhysicsImprovedSleep: enum.Enum_RolloutState,
    PhysicsSteppingMethod: enum.Enum_PhysicsSteppingMethod,
    PlayerCharacterDestroyBehavior: enum.Enum_PlayerCharacterDestroyBehavior,
    PrimalPhysicsSolver: enum.Enum_PrimalPhysicsSolver,
    RejectCharacterDeletions: enum.Enum_RejectCharacterDeletions,
    RenderingCacheOptimizations: enum.Enum_RenderingCacheOptimizationMode,
    ReplicateInstanceDestroySetting: enum.Enum_ReplicateInstanceDestroySetting,
    Retargeting: enum.Enum_AnimatorRetargetingMode,
    SandboxedInstanceMode: enum.Enum_SandboxedInstanceMode,
    SignalBehavior: enum.Enum_SignalBehavior,
    SignalBehavior2: enum.Enum_SignalBehavior,
    StreamOutBehavior: enum.Enum_StreamOutBehavior,
    StreamingEnabled: boolean,
    StreamingIntegrityMode: enum.Enum_StreamingIntegrityMode,
    StreamingMinRadius: number,
    StreamingPauseMode: enum.Enum_StreamingPauseMode,
    StreamingTargetRadius: number,
    Terrain: Terrain,
    TerrainWeldsFixed: boolean,
    TouchEventsUseCollisionGroups: enum.Enum_RolloutState,
    TouchesUseCollisionGroups: boolean,
    CalculateJumpDistance: (self: Workspace, gravity: number, jumpPower: number, walkSpeed: number) -> number,
    CalculateJumpHeight: (self: Workspace, gravity: number, jumpPower: number) -> number,
    CalculateJumpPower: (self: Workspace, gravity: number, jumpHeight: number) -> number,
    ExperimentalSolverIsEnabled: (self: Workspace) -> boolean,
    GetNumAwakeParts: (self: Workspace) -> number,
    GetPhysicsThrottling: (self: Workspace) -> number,
    GetRealPhysicsFPS: (self: Workspace) -> number,
    GetServerTimeNow: (self: Workspace) -> number,
    JoinToOutsiders: (self: Workspace, objects: any, jointType: enum.Enum_JointCreationMode) -> (),
    PGSIsEnabled: (self: Workspace) -> boolean,
    SetAvatarUnificationMode: (self: Workspace, value: enum.Enum_AvatarUnificationMode) -> (),
    SetMeshPartHeadsAndAccessories: (self: Workspace, value: enum.Enum_MeshPartHeadsAndAccessories) -> (),
    SetPhysicsThrottleEnabled: (self: Workspace, value: boolean) -> (),
    UnjoinFromOutsiders: (self: Workspace, objects: any) -> (),
    ZoomToExtents: (self: Workspace) -> (),
}

export type WorldModel = WorldRoot & {
}

export type PackageLink = Instance & {
    AutoUpdate: boolean,
    CanAutoUpdate: boolean,
    Creator: string,
    DefaultName: string,
    HasNewVersion: boolean,
    ModifiedState: number,
    PackageAssetName: string,
    PackageGuid: buffer,
    PackageId: any,
    PackageIdSerialize: any,
    PermissionLevel: enum.Enum_PackagePermission,
    SerializedDefaultAttributes: buffer,
    Status: string,
    VersionIdSerialize: buffer,
    VersionNumber: buffer,
}

export type PackageService = Instance & {
}

export type PackageUIService = Instance & {
    ConvertToMockPackage: (self: PackageUIService, instance: any) -> (),
    ConvertToPackageUpload: (self: PackageUIService, uploadUrl: string, cloneInstances: any, originalInstances: any) -> (),
    GetPackageInfo: (self: PackageUIService, packageAssetId: buffer) -> {[string]: any},
    PublishPackage: (self: PackageUIService, packageInstance: any, addUndoWayPoint: boolean) -> (),
    SetPackageVersion: (self: PackageUIService, packageInstance: any, versionNumber: buffer) -> any,
}

export type Pages = Instance & {
    IsFinished: boolean,
    GetCurrentPage: (self: Pages) -> {any},
    AdvanceToNextPageAsync: (self: Pages) -> (),
}

export type AudioPages = Pages & {
}

export type BanHistoryPages = Pages & {
}

export type CatalogPages = Pages & {
}

export type DataStoreKeyPages = Pages & {
    Cursor: string,
}

export type DataStoreListingPages = Pages & {
    Cursor: string,
}

export type DataStorePages = Pages & {
}

export type DataStoreVersionPages = Pages & {
}

export type FriendPages = Pages & {
}

export type InventoryPages = Pages & {
}

export type EmotesPages = InventoryPages & {
}

export type MemoryStoreHashMapPages = Pages & {
}

export type OutfitPages = Pages & {
}

export type StandardPages = Pages & {
}

export type PartOperationAsset = Instance & {
    ChildData: buffer,
    MeshData: buffer,
}

export type ParticleEmitter = Instance & {
    Acceleration: datatypes.Vector3,
    Brightness: number,
    Color: datatypes.ColorSequence,
    Drag: number,
    EmissionDirection: enum.Enum_NormalId,
    Enabled: boolean,
    FlipbookFramerate: datatypes.NumberRange,
    FlipbookIncompatible: string,
    FlipbookLayout: enum.Enum_ParticleFlipbookLayout,
    FlipbookMode: enum.Enum_ParticleFlipbookMode,
    FlipbookStartRandom: boolean,
    Lifetime: datatypes.NumberRange,
    LightEmission: number,
    LightInfluence: number,
    LocalTransparencyModifier: number,
    LockedToPart: boolean,
    Orientation: enum.Enum_ParticleOrientation,
    Rate: number,
    RotSpeed: datatypes.NumberRange,
    Rotation: datatypes.NumberRange,
    Shape: enum.Enum_ParticleEmitterShape,
    ShapeInOut: enum.Enum_ParticleEmitterShapeInOut,
    ShapePartial: number,
    ShapeStyle: enum.Enum_ParticleEmitterShapeStyle,
    Size: datatypes.NumberSequence,
    Speed: datatypes.NumberRange,
    SpreadAngle: datatypes.Vector2,
    Squash: datatypes.NumberSequence,
    Texture: any,
    TimeScale: number,
    Transparency: datatypes.NumberSequence,
    VelocityInheritance: number,
    WindAffectsDrag: boolean,
    ZOffset: number,
    Clear: (self: ParticleEmitter) -> (),
    Emit: (self: ParticleEmitter, particleCount: number) -> (),
    FastForward: (self: ParticleEmitter, numFrames: number) -> (),
}

export type PatchBundlerFileWatch = Instance & {
}

export type PatchMapping = Instance & {
    FlattenTree: boolean,
    PatchId: string,
    TargetPath: string,
}

export type Path = Instance & {
    Status: enum.Enum_PathStatus,
    GetWaypoints: (self: Path) -> {any},
    CheckOcclusionAsync: (self: Path, start: number) -> number,
    ComputeAsync: (self: Path, start: datatypes.Vector3, finish: datatypes.Vector3) -> (),
}

export type PathfindingLink = Instance & {
    Attachment0: Attachment,
    Attachment1: Attachment,
    IsBidirectional: boolean,
    Label: string,
}

export type PathfindingModifier = Instance & {
    Label: string,
    PassThrough: boolean,
}

export type PathfindingService = Instance & {
    CreatePath: (self: PathfindingService, agentParameters: {[string]: any}) -> Path,
    FindPathAsync: (self: PathfindingService, start: datatypes.Vector3, finish: datatypes.Vector3) -> Path,
}

export type PausedState = Instance & {
    AllThreadsPaused: boolean,
    Reason: enum.Enum_DebuggerPauseReason,
    ThreadId: number,
}

export type PausedStateBreakpoint = PausedState & {
    Breakpoint: Breakpoint,
}

export type PausedStateException = PausedState & {
    ExceptionText: string,
}

export type PerformanceControlService = Instance & {
    IsCrossExperienceLaunchFeasible: (self: PerformanceControlService, type: string) -> boolean,
}

export type PermissionsService = Instance & {
    GetIsThirdPartyAssetAllowed: (self: PermissionsService) -> boolean,
    GetIsThirdPartyPurchaseAllowed: (self: PermissionsService) -> boolean,
    GetIsThirdPartyTeleportAllowed: (self: PermissionsService) -> boolean,
    GetPermissions: (self: PermissionsService, assetId: string) -> {any},
    SetPermissions: (self: PermissionsService, assetId: string, permissions: {any}) -> (),
}

export type PhysicsService = Instance & {
    CollisionGroupSetCollidable: (self: PhysicsService, name1: string, name2: string, collidable: boolean) -> (),
    CollisionGroupsAreCollidable: (self: PhysicsService, name1: string, name2: string) -> boolean,
    GetMaxCollisionGroups: (self: PhysicsService) -> number,
    GetRegisteredCollisionGroups: (self: PhysicsService) -> {any},
    IkSolve: (self: PhysicsService, part: BasePart, target: datatypes.CFrame, translateStiffness: number, rotateStiffness: number) -> (),
    IsCollisionGroupRegistered: (self: PhysicsService, name: string) -> boolean,
    LocalIkSolve: (self: PhysicsService, part: BasePart, target: datatypes.CFrame, translateStiffness: number, rotateStiffness: number) -> (),
    RegisterCollisionGroup: (self: PhysicsService, name: string) -> (),
    RenameCollisionGroup: (self: PhysicsService, from: string, to: string) -> (),
    UnregisterCollisionGroup: (self: PhysicsService, name: string) -> (),
}

export type PhysicsSettings = Instance & {
    AllowSleep: boolean,
    AreAnchorsShown: boolean,
    AreAssembliesShown: boolean,
    AreAssemblyCentersOfMassShown: boolean,
    AreAwakePartsHighlighted: boolean,
    AreBodyTypesShown: boolean,
    AreCollisionCostsShown: boolean,
    AreConstraintForcesShownForSelectedOrHoveredInstances: boolean,
    AreConstraintTorquesShownForSelectedOrHoveredInstances: boolean,
    AreContactForcesShownForSelectedOrHoveredAssemblies: boolean,
    AreContactIslandsShown: boolean,
    AreContactPointsShown: boolean,
    AreGravityForcesShownForSelectedOrHoveredAssemblies: boolean,
    AreJointCoordinatesShown: boolean,
    AreMagnitudesShownForDrawnForcesAndTorques: boolean,
    AreMechanismsShown: boolean,
    AreModelCoordsShown: boolean,
    AreNonAnchorsShown: boolean,
    AreOwnersShown: boolean,
    ArePartCoordsShown: boolean,
    AreRegionsShown: boolean,
    AreSolverIslandsShown: boolean,
    AreTerrainReplicationRegionsShown: boolean,
    AreTimestepsShown: boolean,
    AreUnalignedPartsShown: boolean,
    AreWorldCoordsShown: boolean,
    DisableCSGv2: boolean,
    DisableCSGv3ForPlugins: boolean,
    DrawConstraintsNetForce: boolean,
    DrawContactsNetForce: boolean,
    DrawTotalNetForce: boolean,
    EnableForceVisualizationSmoothing: boolean,
    FluidForceDrawScale: number,
    ForceCSGv2: boolean,
    ForceDrawScale: number,
    ForceVisualizationSmoothingSteps: number,
    IsInterpolationThrottleShown: boolean,
    IsReceiveAgeShown: boolean,
    IsTreeShown: boolean,
    PhysicsEnvironmentalThrottle: enum.Enum_EnviromentalPhysicsThrottle,
    ShowDecompositionGeometry: boolean,
    ShowFluidForcesForSelectedOrHoveredMechanisms: boolean,
    ShowInstanceNamesForDrawnForcesAndTorques: boolean,
    SolverConvergenceMetricType: enum.Enum_SolverConvergenceMetricType,
    SolverConvergenceVisualizationMode: enum.Enum_SolverConvergenceVisualizationMode,
    ThrottleAdjustTime: number,
    TorqueDrawScale: number,
    UseCSGv2: boolean,
}

export type PlaceStatsService = Instance & {
}

export type PlacesService = Instance & {
    StartPlaySolo: (self: PlacesService) -> (),
    StopPlaySolo: (self: PlacesService) -> (),
}

export type PlatformCloudStorageService = Instance & {
    IsUserDataAvailable: (self: PlatformCloudStorageService) -> boolean,
    GetUserDataAsync: (self: PlatformCloudStorageService, key: string) -> {[string]: any},
    SetUserDataAsync: (self: PlatformCloudStorageService, key: string, data: {[string]: any}) -> (),
}

export type PlatformFriendsService = Instance & {
    IsInviteFriendsEnabled: (self: PlatformFriendsService) -> boolean,
    IsProfileEnabled: (self: PlatformFriendsService) -> boolean,
    ShowInviteFriendsUI: (self: PlatformFriendsService) -> (),
    ShowProfile: (self: PlatformFriendsService, platformUserId: string) -> (),
    GetPartyMembers: (self: PlatformFriendsService) -> {any},
}

export type Player = Instance & {
    AccountAge: number,
    AccountAgeReplicate: number,
    AutoJumpEnabled: boolean,
    CameraMaxZoomDistance: number,
    CameraMinZoomDistance: number,
    CameraMode: enum.Enum_CameraMode,
    CanLoadCharacterAppearance: boolean,
    Character: Model,
    CharacterAppearanceId: buffer,
    ChararacterRegionId: datatypes.Vector3,
    ChatMode: enum.Enum_ChatMode,
    ChatPrivacyMode: enum.Enum_ChatPrivacyMode,
    CloudEditCameraCoordinateFrame: datatypes.CFrame,
    CloudEditPlayerActive: boolean,
    CountryRegionCodeReplicate: string,
    DevCameraOcclusionMode: enum.Enum_DevCameraOcclusionMode,
    DevComputerCameraMode: enum.Enum_DevComputerCameraMovementMode,
    DevComputerMovementMode: enum.Enum_DevComputerMovementMode,
    DevEnableMouseLock: boolean,
    DevTouchCameraMode: enum.Enum_DevTouchCameraMovementMode,
    DevTouchMovementMode: enum.Enum_DevTouchMovementMode,
    DisplayName: string,
    FollowUserId: buffer,
    FollowUserIdReplicated: buffer,
    GameplayPaused: boolean,
    Guest: boolean,
    HasVerifiedBadge: boolean,
    HealthDisplayDistance: number,
    InternalCharacterAppearanceLoaded: boolean,
    LocaleId: string,
    MaxSimulationRadius: number,
    MaximumSimulationRadius: number,
    MembershipType: enum.Enum_MembershipType,
    MembershipTypeReplicate: enum.Enum_MembershipType,
    NameDisplayDistance: number,
    Neutral: boolean,
    OsPlatform: string,
    PartyId: string,
    PlatformName: string,
    RawJoinData: buffer,
    ReplicationFocus: any,
    RespawnLocation: SpawnLocation,
    SimulationRadius: number,
    StepIdOffset: number,
    SuperSafeChatReplicate: boolean,
    Team: Team,
    TeamColor: datatypes.BrickColor,
    Teleported: boolean,
    TeleportedIn: boolean,
    ThirdPartyTextChatRestrictionStatus: enum.Enum_ChatRestrictionStatus,
    UnfilteredChat: boolean,
    UserId: buffer,
    VRDevice: string,
    VREnabled: boolean,
    AddReplicationFocus: (self: Player, part: BasePart) -> (),
    AddReplicationFocusPosition: (self: Player, center: datatypes.Vector3, radius: number) -> (),
    AddToBlockList: (self: Player, userIds: {any}) -> (),
    ClearCharacterAppearance: (self: Player) -> (),
    DistanceFromCharacter: (self: Player, point: datatypes.Vector3) -> number,
    GetData: (self: Player) -> PlayerData,
    GetFriendStatus: (self: Player, player: Player) -> enum.Enum_FriendStatus,
    GetGameSessionID: (self: Player) -> string,
    GetJoinData: (self: Player) -> {[string]: any},
    GetMouse: (self: Player) -> Mouse,
    GetNetworkPing: (self: Player) -> number,
    GetUnder13: (self: Player) -> boolean,
    HasAppearanceLoaded: (self: Player) -> boolean,
    IsVerified: (self: Player) -> boolean,
    Kick: (self: Player, message: string) -> (),
    Move: (self: Player, walkDirection: datatypes.Vector3, relativeToCamera: boolean) -> (),
    OverrideStreamingRadii: (self: Player, minRadius: number, targetRadius: number) -> (),
    RemoveCharacter: (self: Player) -> (),
    RemoveReplicationFocus: (self: Player, part: BasePart) -> (),
    RemoveReplicationFocusPosition: (self: Player, center: datatypes.Vector3, radius: number) -> (),
    RequestFriendship: (self: Player, player: Player) -> (),
    RevokeFriendship: (self: Player, player: Player) -> (),
    SetAccountAge: (self: Player, accountAge: number) -> (),
    SetBlockListInitialized: (self: Player) -> (),
    SetCharacterAppearanceJson: (self: Player, jsonBlob: string) -> (),
    SetChatTranslationSettingsLocaleId: (self: Player, locale: string) -> (),
    SetExperienceSettingsLocaleId: (self: Player, locale: string) -> (),
    SetMembershipType: (self: Player, membershipType: enum.Enum_MembershipType) -> (),
    SetModerationAccessKey: (self: Player, moderationAccessKey: string) -> (),
    SetSuperSafeChat: (self: Player, value: boolean) -> (),
    UpdatePlayerBlocked: (self: Player, userId: buffer, blocked: boolean) -> (),
    GetFriendsOnline: (self: Player, maxFriends: number) -> {any},
    GetRankInGroup: (self: Player, groupId: buffer) -> number,
    GetRoleInGroup: (self: Player, groupId: buffer) -> string,
    IsFriendsWith: (self: Player, userId: buffer) -> boolean,
    IsInGroup: (self: Player, groupId: buffer) -> boolean,
    LoadCharacter: (self: Player) -> (),
    LoadCharacterBlocking: (self: Player) -> (),
    LoadCharacterWithHumanoidDescription: (self: Player, humanoidDescription: HumanoidDescription) -> (),
    RequestStreamAroundAsync: (self: Player, position: datatypes.Vector3, timeOut: number) -> (),
}

export type PlayerData = Instance & {
    GetPlayer: (self: PlayerData) -> Player,
    GetRecordAsync: (self: PlayerData, recordName: string) -> PlayerDataRecord,
}

export type PlayerDataRecord = Instance & {
    CreatedTime: buffer,
    DefaultRecordName: boolean,
    Dirty: boolean,
    Error: enum.Enum_PlayerDataErrorState,
    FlushedTime: buffer,
    LoadedTime: buffer,
    ModifiedTime: buffer,
    NewRecord: boolean,
    Readable: boolean,
    RecordName: string,
    Writable: boolean,
    GetPlayer: (self: PlayerDataRecord) -> Player,
    GetValue: (self: PlayerDataRecord, key: string) -> any,
    GetValueChangedSignal: (self: PlayerDataRecord, key: string) -> any,
    RemoveValue: (self: PlayerDataRecord, key: string) -> (),
    SetValue: (self: PlayerDataRecord, key: string, value: any) -> (),
    ReleaseAsync: (self: PlayerDataRecord) -> (),
    RequestFlushAsync: (self: PlayerDataRecord) -> (),
}

export type PlayerDataRecordConfig = Instance & {
    RecordName: string,
    GetDefaultValue: (self: PlayerDataRecordConfig, key: string) -> any,
    SetDefaultValue: (self: PlayerDataRecordConfig, key: string, value: any) -> (),
}

export type PlayerDataService = Instance & {
    LoadFailureBehavior: enum.Enum_PlayerDataLoadFailureBehavior,
    GetRecordConfig: (self: PlayerDataService, recordName: string) -> PlayerDataRecordConfig,
}

export type PlayerEmulatorService = Instance & {
    CustomPoliciesEnabled: boolean,
    EmulatedCountryCode: string,
    EmulatedGameLocale: string,
    PlayerEmulationEnabled: boolean,
    PseudolocalizationEnabled: boolean,
    SerializedEmulatedPolicyInfo: buffer,
    TextElongationFactor: number,
    GetEmulatedPolicyInfo: (self: PlayerEmulatorService) -> {[string]: any},
    RegionCodeWillHaveAutomaticNonCustomPolicies: (self: PlayerEmulatorService, regionCode: string) -> boolean,
    SetEmulatedPolicyInfo: (self: PlayerEmulatorService, emulatedPolicyInfo: {[string]: any}) -> (),
}

export type PlayerHydrationService = Instance & {
}

export type PlayerScripts = Instance & {
    ClearComputerCameraMovementModes: (self: PlayerScripts) -> (),
    ClearComputerMovementModes: (self: PlayerScripts) -> (),
    ClearTouchCameraMovementModes: (self: PlayerScripts) -> (),
    ClearTouchMovementModes: (self: PlayerScripts) -> (),
    GetRegisteredComputerCameraMovementModes: (self: PlayerScripts) -> {any},
    GetRegisteredComputerMovementModes: (self: PlayerScripts) -> {any},
    GetRegisteredTouchCameraMovementModes: (self: PlayerScripts) -> {any},
    GetRegisteredTouchMovementModes: (self: PlayerScripts) -> {any},
    RegisterComputerCameraMovementMode: (self: PlayerScripts, cameraMovementMode: enum.Enum_ComputerCameraMovementMode) -> (),
    RegisterComputerMovementMode: (self: PlayerScripts, movementMode: enum.Enum_ComputerMovementMode) -> (),
    RegisterTouchCameraMovementMode: (self: PlayerScripts, cameraMovementMode: enum.Enum_TouchCameraMovementMode) -> (),
    RegisterTouchMovementMode: (self: PlayerScripts, movementMode: enum.Enum_TouchMovementMode) -> (),
}

export type PlayerViewService = Instance & {
    GetDeviceCameraCFrame: (self: PlayerViewService, player: Player) -> datatypes.CFrame,
    GetDeviceCameraCFrameForSelfView: (self: PlayerViewService) -> datatypes.CFrame,
    OnCameraCFrameReplicationRequest: (self: PlayerViewService) -> (),
    UpdateDeviceCFrame: (self: PlayerViewService, player: Player, cframe: datatypes.CFrame, timestamp: buffer) -> (),
}

export type Players = Instance & {
    BanningEnabled: boolean,
    BubbleChat: boolean,
    CharacterAutoLoads: boolean,
    ClassicChat: boolean,
    LocalPlayer: Player,
    MaxPlayers: number,
    MaxPlayersInternal: number,
    PreferredPlayers: number,
    PreferredPlayersInternal: number,
    RespawnTime: number,
    ServerGitHash: string,
    ServerLogPrefix: string,
    UseStrafingAnimations: boolean,
    Chat: (self: Players, message: string) -> (),
    CreateLocalPlayer: (self: Players) -> Player,
    GetPlayerByUserId: (self: Players, userId: buffer) -> Player,
    GetPlayerFromCharacter: (self: Players, character: Model) -> Player,
    GetPlayers: (self: Players) -> any,
    ReportAbuse: (self: Players, player: Player, reason: string, optionalMessage: string) -> (),
    ReportAbuseV3: (self: Players, player: Player, jsonTags: string) -> (),
    ReportChatAbuse: (self: Players, eligibleChatLines: {any}, targetChatLines: {any}, tags: {[string]: any}) -> (),
    ResetLocalPlayer: (self: Players) -> (),
    SetChatStyle: (self: Players, style: enum.Enum_ChatStyle) -> (),
    SetLocalPlayerInfo: (self: Players, userId: buffer, userName: string, displayName: string, membershipType: enum.Enum_MembershipType, isUnder13: boolean) -> (),
    TeamChat: (self: Players, message: string) -> (),
    WhisperChat: (self: Players, message: string, player: any) -> (),
    BanAsync: (self: Players, config: {[string]: any}) -> (),
    CreateHumanoidModelFromDescription: (self: Players, description: HumanoidDescription, rigType: enum.Enum_HumanoidRigType, assetTypeVerification: enum.Enum_AssetTypeVerification) -> Model,
    CreateHumanoidModelFromUserId: (self: Players, userId: buffer) -> Model,
    GetBanHistoryAsync: (self: Players, userId: buffer) -> BanHistoryPages,
    GetCharacterAppearanceInfoAsync: (self: Players, userId: buffer) -> {[string]: any},
    GetFriendsAsync: (self: Players, userId: buffer) -> FriendPages,
    GetHumanoidDescriptionFromOutfitId: (self: Players, outfitId: buffer) -> HumanoidDescription,
    GetHumanoidDescriptionFromUserId: (self: Players, userId: buffer) -> HumanoidDescription,
    GetNameFromUserIdAsync: (self: Players, userId: buffer) -> string,
    GetUserIdFromNameAsync: (self: Players, userName: string) -> buffer,
    GetUserThumbnailAsync: (self: Players, userId: buffer, thumbnailType: enum.Enum_ThumbnailType, thumbnailSize: enum.Enum_ThumbnailSize) -> ...any,
    UnbanAsync: (self: Players, config: {[string]: any}) -> (),
}

export type Plugin = Instance & {
    CollisionEnabled: boolean,
    DisableUIDragDetectorDrags: boolean,
    GridSize: number,
    HostDataModelType: enum.Enum_StudioDataModelType,
    HostDataModelTypeIsCurrent: boolean,
    IsDebuggable: boolean,
    MultipleDocumentInterfaceInstance: MultipleDocumentInterfaceInstance,
    UsesAssetInsertionDrag: boolean,
    Activate: (self: Plugin, exclusiveMouse: boolean) -> (),
    CreatePluginAction: (self: Plugin, actionId: string, text: string, statusTip: string, iconName: string, allowBinding: boolean) -> PluginAction,
    CreatePluginMenu: (self: Plugin, id: string, title: string, icon: string) -> PluginMenu,
    CreateToolbar: (self: Plugin, name: string) -> PluginToolbar,
    Deactivate: (self: Plugin) -> (),
    GetItem: (self: Plugin, key: string, defaultValue: any) -> any,
    GetJoinMode: (self: Plugin) -> enum.Enum_JointCreationMode,
    GetMouse: (self: Plugin) -> PluginMouse,
    GetPluginComponent: (self: Plugin, name: string) -> any,
    GetSelectedRibbonTool: (self: Plugin) -> enum.Enum_RibbonTool,
    GetSetting: (self: Plugin, key: string) -> any,
    GetUri: (self: Plugin) -> {[string]: any},
    Intersect: (self: Plugin, objects: any) -> any,
    Invoke: (self: Plugin, key: string, ...any) -> (),
    IsActivated: (self: Plugin) -> boolean,
    IsActivatedWithExclusiveMouse: (self: Plugin) -> boolean,
    IsLoadedFromProject: (self: Plugin) -> boolean,
    Negate: (self: Plugin, objects: any) -> any,
    OnInvoke: (self: Plugin, key: string, callback: any) -> any,
    OnInvokeSuspendOverride: (self: Plugin, key: string, callback: any) -> any,
    OnSetItem: (self: Plugin, key: string, callback: any) -> any,
    OpenScript: (self: Plugin, script: LuaSourceContainer, lineNumber: number) -> (),
    OpenWikiPage: (self: Plugin, url: string) -> (),
    PauseSound: (self: Plugin, sound: any) -> (),
    PlaySound: (self: Plugin, sound: any, normalizedTimePosition: number) -> (),
    ResumeSound: (self: Plugin, sound: any) -> (),
    SaveSelectedToRoblox: (self: Plugin) -> (),
    SelectRibbonTool: (self: Plugin, tool: enum.Enum_RibbonTool, position: datatypes.UDim2) -> (),
    Separate: (self: Plugin, objects: any) -> any,
    SetItem: (self: Plugin, key: string, value: any) -> (),
    SetReady: (self: Plugin) -> (),
    SetSetting: (self: Plugin, key: string, value: any) -> (),
    StartDecalDrag: (self: Plugin, decal: any) -> (),
    StartDrag: (self: Plugin, dragData: {[string]: any}) -> (),
    StopAllSounds: (self: Plugin) -> (),
    Union: (self: Plugin, objects: any) -> any,
    CreateDockWidgetPluginGui: (self: Plugin, pluginGuiId: string, dockWidgetPluginGuiInfo: any) -> DockWidgetPluginGui,
    CreateQWidgetPluginGui: (self: Plugin, pluginGuiId: string, pluginGuiOptions: {[string]: any}) -> QWidgetPluginGui,
    ImportFbxAnimation: (self: Plugin, rigModel: any, isR15: boolean) -> any,
    ImportFbxRig: (self: Plugin, isR15: boolean) -> any,
    PromptForExistingAssetId: (self: Plugin, assetType: string) -> buffer,
    PromptSaveSelection: (self: Plugin, suggestedFileName: string) -> boolean,
}

export type PluginAction = Instance & {
    ActionId: string,
    AllowBinding: boolean,
    Checked: boolean,
    DefaultShortcut: string,
    Enabled: boolean,
    StatusTip: string,
    Text: string,
}

export type PluginCapabilities = Instance & {
    Manifest: string,
}

export type PluginDebugService = Instance & {
}

export type PluginDragEvent = Instance & {
    Data: string,
    MimeType: string,
    Position: datatypes.Vector2,
    Sender: string,
}

export type PluginGuiService = Instance & {
}

export type PluginManagementService = Instance & {
    SetAutoUpdate: (self: PluginManagementService, pluginId: buffer, state: boolean) -> (),
    GetOTAPluginVersion: (self: PluginManagementService, pluginName: string) -> buffer,
}

export type PluginManager = Instance & {
    ExportPlace: (self: PluginManager, filePath: string) -> (),
    ExportSelection: (self: PluginManager, filePath: string) -> (),
}

export type PluginManagerInterface = Instance & {
    ExportPlace: (self: PluginManagerInterface, filePath: string) -> (),
    ExportSelection: (self: PluginManagerInterface, filePath: string) -> (),
}

export type PluginMenu = Instance & {
    Icon: string,
    Title: string,
    AddAction: (self: PluginMenu, action: any) -> (),
    AddMenu: (self: PluginMenu, menu: any) -> (),
    AddNewAction: (self: PluginMenu, actionId: string, text: string, icon: string) -> any,
    AddSeparator: (self: PluginMenu) -> (),
    Clear: (self: PluginMenu) -> (),
    ShowAsync: (self: PluginMenu) -> any,
}

export type PluginPolicyService = Instance & {
    GetPluginPolicy: (self: PluginPolicyService, pluginName: string) -> {[string]: any},
}

export type PluginToolbar = Instance & {
    CreateButton: (self: PluginToolbar, buttonId: string, tooltip: string, iconname: string, text: string) -> PluginToolbarButton,
    CreatePopupButton: (self: PluginToolbar, buttonId: string, tooltip: string, iconname: string, text: string) -> PluginToolbarButton,
}

export type PluginToolbarButton = Instance & {
    ClickableWhenViewportHidden: boolean,
    Enabled: boolean,
    Icon: any,
    SetActive: (self: PluginToolbarButton, active: boolean) -> (),
    SetDropdownActive: (self: PluginToolbarButton, active: boolean) -> (),
}

export type PointsService = Instance & {
}

export type PolicyService = Instance & {
    IsLuobuServer: enum.Enum_TriStateBoolean,
    LuobuWhitelisted: enum.Enum_TriStateBoolean,
    CanViewBrandProjectAsync: (self: PolicyService, player: Player, brandProjectId: string) -> boolean,
    GetPolicyInfoForPlayerAsync: (self: PolicyService, player: any) -> {[string]: any},
    GetPolicyInfoForServerRobloxOnlyAsync: (self: PolicyService) -> {[string]: any},
}

export type PoseBase = Instance & {
    EasingDirection: enum.Enum_PoseEasingDirection,
    EasingStyle: enum.Enum_PoseEasingStyle,
    Weight: number,
}

export type NumberPose = PoseBase & {
    Value: number,
}

export type Pose = PoseBase & {
    CFrame: datatypes.CFrame,
    AddSubPose: (self: Pose, pose: any) -> (),
    GetSubPoses: (self: Pose) -> any,
    RemoveSubPose: (self: Pose, pose: any) -> (),
}

export type PostEffect = Instance & {
    Enabled: boolean,
}

export type BloomEffect = PostEffect & {
    Intensity: number,
    Size: number,
    Threshold: number,
}

export type BlurEffect = PostEffect & {
    Size: number,
}

export type ColorCorrectionEffect = PostEffect & {
    Brightness: number,
    Contrast: number,
    Saturation: number,
    TintColor: datatypes.Color3,
}

export type ColorGradingEffect = PostEffect & {
    TonemapperPreset: enum.Enum_TonemapperPreset,
}

export type DepthOfFieldEffect = PostEffect & {
    FarIntensity: number,
    FocusDistance: number,
    InFocusRadius: number,
    NearIntensity: number,
}

export type SunRaysEffect = PostEffect & {
    Intensity: number,
    Spread: number,
}

export type ProcessInstancePhysicsService = Instance & {
}

export type ProximityPrompt = Instance & {
    ActionText: string,
    AutoLocalize: boolean,
    ClickablePrompt: boolean,
    Enabled: boolean,
    Exclusivity: enum.Enum_ProximityPromptExclusivity,
    GamepadKeyCode: enum.Enum_KeyCode,
    HoldDuration: number,
    KeyboardKeyCode: enum.Enum_KeyCode,
    MaxActivationDistance: number,
    ObjectText: string,
    RequiresLineOfSight: boolean,
    RootLocalizationTable: LocalizationTable,
    Style: enum.Enum_ProximityPromptStyle,
    UIOffset: datatypes.Vector2,
    InputHoldBegin: (self: ProximityPrompt) -> (),
    InputHoldEnd: (self: ProximityPrompt) -> (),
}

export type ProximityPromptService = Instance & {
    Enabled: boolean,
    MaxPromptsVisible: number,
}

export type PublishService = Instance & {
    PublishDescendantAssets: (self: PublishService, instance: any) -> boolean,
    CreateAssetAndWaitForAssetId: (self: PublishService, instances: any, operationId: string, creatorType: enum.Enum_AssetCreatorType, creatorId: buffer, assetType: string, name: string, description: string, expectedPrice: number) -> buffer,
    CreateAssetOrAssetVersionAndPollAssetWithTelemetryAsync: (self: PublishService, serializedInstance: string, creatorType: enum.Enum_AssetCreatorType, creatorId: buffer, assetType: string, assetId: buffer, name: string, description: string, token: string, contentType: string, expectedPrice: number) -> {[string]: any},
    CreateAssetOrAssetVersionAndPollAssetWithTelemetryAsyncWithAddParam: (self: PublishService, serializedInstance: string, publishInfo: {[string]: any}) -> {[string]: any},
    CreateAssetOrAssetVersionAndPollAssetWithTelemetryAsyncWithAddParamErrorJson: (self: PublishService, serializedInstance: string, publishInfo: {[string]: any}) -> {[string]: any},
    PublishCageMeshAsync: (self: PublishService, wrap: any, cageType: enum.Enum_CageType) -> any,
}

export type RTAnimationTracker = Instance & {
    Active: boolean,
    EnableFallbackAudioInput: boolean,
    SessionName: string,
    TrackerMode: enum.Enum_TrackerMode,
    TrackerType: enum.Enum_TrackerType,
    Step: (self: RTAnimationTracker) -> (),
}

export type RbxAnalyticsService = Instance & {
    AddGlobalPointsField: (self: RbxAnalyticsService, key: string, value: number) -> (),
    AddGlobalPointsTag: (self: RbxAnalyticsService, key: string, value: string) -> (),
    DEPRECATED_TrackEvent: (self: RbxAnalyticsService, category: string, action: string, label: string, value: buffer) -> (),
    DEPRECATED_TrackEventWithArgs: (self: RbxAnalyticsService, category: string, action: string, label: string, args: {[string]: any}, value: buffer) -> (),
    GetClientId: (self: RbxAnalyticsService) -> string,
    GetPlaySessionId: (self: RbxAnalyticsService) -> string,
    GetSessionId: (self: RbxAnalyticsService) -> string,
    ReleaseRBXEventStream: (self: RbxAnalyticsService, target: string) -> (),
    RemoveGlobalPointsField: (self: RbxAnalyticsService, key: string) -> (),
    RemoveGlobalPointsTag: (self: RbxAnalyticsService, key: string) -> (),
    ReportCounter: (self: RbxAnalyticsService, counterName: string, amount: number) -> (),
    ReportInfluxSeries: (self: RbxAnalyticsService, seriesName: string, points: {[string]: any}, throttlingPercentage: number) -> (),
    ReportStats: (self: RbxAnalyticsService, category: string, value: number) -> (),
    ReportToDiagByCountryCode: (self: RbxAnalyticsService, featureName: string, measureName: string, seconds: number) -> (),
    SendEventDeferred: (self: RbxAnalyticsService, target: string, eventContext: string, eventName: string, additionalArgs: {[string]: any}) -> (),
    SendEventImmediately: (self: RbxAnalyticsService, target: string, eventContext: string, eventName: string, additionalArgs: {[string]: any}) -> (),
    SetRBXEvent: (self: RbxAnalyticsService, target: string, eventContext: string, eventName: string, additionalArgs: {[string]: any}) -> (),
    SetRBXEventStream: (self: RbxAnalyticsService, target: string, eventContext: string, eventName: string, additionalArgs: {[string]: any}) -> (),
    TrackEvent: (self: RbxAnalyticsService, category: string, action: string, label: string, value: buffer) -> (),
    TrackEventWithArgs: (self: RbxAnalyticsService, category: string, action: string, label: string, args: {[string]: any}, value: buffer) -> (),
    UpdateHeartbeatObject: (self: RbxAnalyticsService, args: {[string]: any}) -> (),
}

export type ReflectionMetadata = Instance & {
}

export type ReflectionMetadataCallbacks = Instance & {
}

export type ReflectionMetadataClasses = Instance & {
}

export type ReflectionMetadataEnums = Instance & {
}

export type ReflectionMetadataEvents = Instance & {
}

export type ReflectionMetadataFunctions = Instance & {
}

export type ReflectionMetadataItem = Instance & {
    Browsable: boolean,
    ClassCategory: string,
    ClientOnly: boolean,
    Constraint: string,
    Deprecated: boolean,
    EditingDisabled: boolean,
    EditorType: string,
    FFlag: string,
    IsBackend: boolean,
    PropertyOrder: number,
    ScriptContext: string,
    ServerOnly: boolean,
    SliderScaling: string,
    UIMaximum: number,
    UIMinimum: number,
    UINumTicks: number,
}

export type ReflectionMetadataClass = ReflectionMetadataItem & {
    ExplorerImageIndex: number,
    ExplorerOrder: number,
    Insertable: boolean,
    PreferredParent: string,
    ServiceVisibility: enum.Enum_ServiceVisibility,
}

export type ReflectionMetadataEnum = ReflectionMetadataItem & {
}

export type ReflectionMetadataEnumItem = ReflectionMetadataItem & {
}

export type ReflectionMetadataMember = ReflectionMetadataItem & {
}

export type ReflectionMetadataProperties = Instance & {
}

export type ReflectionMetadataYieldFunctions = Instance & {
}

export type ReflectionService = Instance & {
    GetPropertyNames: (self: ReflectionService, name: string) -> {any},
}

export type RemoteCursorService = Instance & {
}

export type RemoteDebuggerServer = Instance & {
}

export type RemoteFunction = Instance & {
    InvokeClient: (self: RemoteFunction, player: Player, ...any) -> ...any,
    InvokeServer: (self: RemoteFunction, ...any) -> ...any,
}

export type RenderSettings = Instance & {
    AutoFRMLevel: number,
    EagerBulkExecution: boolean,
    EditQualityLevel: enum.Enum_QualityLevel,
    ["Enable VR Mode"]: boolean,
    EnableFRM: boolean,
    ExportMergeByMaterial: boolean,
    FrameRateManager: enum.Enum_FramerateManagerMode,
    GraphicsMode: enum.Enum_GraphicsMode,
    MeshCacheSize: number,
    MeshPartDetailLevel: enum.Enum_MeshPartDetailLevel,
    QualityLevel: enum.Enum_QualityLevel,
    ReloadAssets: boolean,
    RenderCSGTrianglesDebug: boolean,
    ShowBoundingBoxes: boolean,
    ViewMode: enum.Enum_ViewMode,
    GetMaxQualityLevel: (self: RenderSettings) -> number,
}

export type RenderingTest = Instance & {
    CFrame: datatypes.CFrame,
    ComparisonDiffThreshold: number,
    ComparisonMethod: enum.Enum_RenderingTestComparisonMethod,
    ComparisonPsnrThreshold: number,
    Description: string,
    FieldOfView: number,
    Orientation: datatypes.Vector3,
    PerfTest: boolean,
    Position: datatypes.Vector3,
    QualityAuto: boolean,
    QualityLevel: number,
    RenderingTestFrameCount: number,
    ShouldSkip: boolean,
    Ticket: string,
    Timeout: number,
    RenderdocTriggerCapture: (self: RenderingTest) -> (),
}

export type ReplicatedFirst = Instance & {
    IsDefaultLoadingGuiRemoved: (self: ReplicatedFirst) -> boolean,
    IsFinishedReplicating: (self: ReplicatedFirst) -> boolean,
    RemoveDefaultLoadingScreen: (self: ReplicatedFirst) -> (),
    SetDefaultLoadingGuiRemoved: (self: ReplicatedFirst) -> (),
}

export type ReplicatedStorage = Instance & {
}

export type RibbonNotificationService = Instance & {
    OnNotificationUpdateFromPlugin: (self: RibbonNotificationService, newNotificationId: string, seenNotificationId: string) -> (),
}

export type RobloxPluginGuiService = Instance & {
}

export type RobloxReplicatedStorage = Instance & {
}

export type RobloxSerializableInstance = Instance & {
    Data: buffer,
}

export type RobloxServerStorage = Instance & {
}

export type RomarkRbxAnalyticsService = Instance & {
}

export type RomarkService = Instance & {
    EndRemoteRomarkTest: (self: RomarkService) -> (),
}

export type RotationCurve = Instance & {
    Length: number,
    ValuesAndTimes: buffer,
    GetKeyAtIndex: (self: RotationCurve, index: number) -> any,
    GetKeyIndicesAtTime: (self: RotationCurve, time: number) -> {any},
    GetKeys: (self: RotationCurve) -> {any},
    GetValueAtTime: (self: RotationCurve, time: number) -> any,
    InsertKey: (self: RotationCurve, key: any) -> {any},
    RemoveKeyAtIndex: (self: RotationCurve, startingIndex: number, count: number) -> number,
    SetKeys: (self: RotationCurve, keys: {any}) -> number,
}

export type RtMessagingService = Instance & {
}

export type RunService = Instance & {
    ClientGitHash: string,
    RunState: enum.Enum_RunState,
    BindToRenderStep: (self: RunService, name: string, priority: number, callback: any) -> (),
    GetCoreScriptVersion: (self: RunService) -> string,
    GetRobloxClientChannel: (self: RunService) -> string,
    GetRobloxGuiFocused: (self: RunService) -> boolean,
    GetRobloxVersion: (self: RunService) -> string,
    IsClient: (self: RunService) -> boolean,
    IsEdit: (self: RunService) -> boolean,
    IsRunMode: (self: RunService) -> boolean,
    IsRunning: (self: RunService) -> boolean,
    IsServer: (self: RunService) -> boolean,
    IsStudio: (self: RunService) -> boolean,
    Pause: (self: RunService) -> (),
    Run: (self: RunService) -> (),
    Set3dRenderingEnabled: (self: RunService, enable: boolean) -> (),
    SetRobloxGuiFocused: (self: RunService, focus: boolean) -> (),
    Stop: (self: RunService) -> (),
    UnbindFromRenderStep: (self: RunService, name: string) -> (),
    setThrottleFramerateEnabled: (self: RunService, enable: boolean) -> (),
}

export type RuntimeScriptService = Instance & {
}

export type SafetyService = Instance & {
    IsCaptureModeForReport: boolean,
    ReportMenuTabClose: (self: SafetyService) -> (),
    ReportMenuTabOpen: (self: SafetyService) -> (),
    TakeScreenshot: (self: SafetyService, screenshotOptions: {[string]: any}) -> buffer,
}

export type ScreenshotHud = Instance & {
    CameraButtonIcon: any,
    CameraButtonPosition: datatypes.UDim2,
    CloseButtonPosition: datatypes.UDim2,
    CloseWhenScreenshotTaken: boolean,
    HideCoreGuiForCaptures: boolean,
    HidePlayerGuiForCaptures: boolean,
    Visible: boolean,
}

export type ScriptBuilder = Instance & {
}

export type SyncScriptBuilder = ScriptBuilder & {
    CompileTarget: enum.Enum_CompileTarget,
    CoverageInfo: boolean,
    DebugInfo: boolean,
    PackAsSource: boolean,
}

export type ScriptChangeService = Instance & {
}

export type ScriptCloneWatcher = Instance & {
}

export type ScriptCloneWatcherHelper = Instance & {
}

export type ScriptCommitService = Instance & {
}

export type ScriptContext = Instance & {
    ScriptsDisabled: boolean,
    AddCoreScriptLocal: (self: ScriptContext, name: string, parent: any) -> (),
    ClearScriptProfilingData: (self: ScriptContext) -> (),
    CompressLuaApp: (self: ScriptContext) -> (),
    DeserializeScriptProfilerString: (self: ScriptContext, jsonString: string) -> {[string]: any},
    GetCoverageStats: (self: ScriptContext) -> {any},
    GetLuauHeapInstanceReferenceReport: (self: ScriptContext, target: string) -> {[string]: any},
    GetLuauHeapMemoryReport: (self: ScriptContext, target: string) -> {[string]: any},
    GetScriptProfilingData: (self: ScriptContext) -> string,
    ReportLuaRequireCount: (self: ScriptContext) -> (),
    SaveScriptProfilingData: (self: ScriptContext, jsonString: string, filename: string) -> string,
    SetTimeout: (self: ScriptContext, seconds: number) -> (),
    StartScriptProfiling: (self: ScriptContext, frequency: number) -> (),
    StopScriptProfiling: (self: ScriptContext) -> string,
}

export type ScriptDebugger = Instance & {
    CoreScriptIdentifier: string,
    CurrentLine: number,
    IsDebugging: boolean,
    IsPaused: boolean,
    Script: any,
    ScriptGuid: string,
    AddWatch: (self: ScriptDebugger, expression: string) -> any,
    GetBreakpoints: (self: ScriptDebugger) -> any,
    GetGlobals: (self: ScriptDebugger, stackFrame: number) -> any,
    GetLocals: (self: ScriptDebugger, stackFrame: number) -> any,
    GetStack: (self: ScriptDebugger) -> {any},
    GetUpvalues: (self: ScriptDebugger, stackFrame: number) -> any,
    GetWatchValue: (self: ScriptDebugger, watch: any) -> any,
    GetWatches: (self: ScriptDebugger) -> any,
    SetBreakpoint: (self: ScriptDebugger, line: number, isContextDependentBreakpoint: boolean) -> any,
    SetGlobal: (self: ScriptDebugger, name: string, value: any, stackFrame: number) -> (),
    SetLocal: (self: ScriptDebugger, name: string, value: any, stackFrame: number) -> (),
    SetUpvalue: (self: ScriptDebugger, name: string, value: any, stackFrame: number) -> (),
}

export type ScriptDocument = Instance & {
    GetInternalUri: (self: ScriptDocument) -> string,
    GetLine: (self: ScriptDocument, lineIndex: number) -> string,
    GetLineCount: (self: ScriptDocument) -> number,
    GetScript: (self: ScriptDocument) -> LuaSourceContainer,
    GetSelectedText: (self: ScriptDocument) -> string,
    GetSelection: (self: ScriptDocument) -> ...any,
    GetSelectionEnd: (self: ScriptDocument) -> ...any,
    GetSelectionStart: (self: ScriptDocument) -> ...any,
    GetText: (self: ScriptDocument, startLine: number, startCharacter: number, endLine: number, endCharacter: number) -> string,
    GetViewport: (self: ScriptDocument) -> ...any,
    HasSelectedText: (self: ScriptDocument) -> boolean,
    IsCommandBar: (self: ScriptDocument) -> boolean,
    CloseAsync: (self: ScriptDocument) -> ...any,
    EditTextAsync: (self: ScriptDocument, newText: string, startLine: number, startCharacter: number, endLine: number, endCharacter: number) -> ...any,
    ForceSetSelectionAsync: (self: ScriptDocument, cursorLine: number, cursorCharacter: number, anchorLine: number, anchorCharacter: number) -> ...any,
    MultiEditTextAsync: (self: ScriptDocument, edits: {any}) -> ...any,
    RequestSetSelectionAsync: (self: ScriptDocument, cursorLine: number, cursorCharacter: number, anchorLine: number, anchorCharacter: number) -> ...any,
}

export type ScriptEditorService = Instance & {
    DeregisterAutocompleteCallback: (self: ScriptEditorService, name: string) -> (),
    DeregisterScriptAnalysisCallback: (self: ScriptEditorService, name: string) -> (),
    FindScriptDocument: (self: ScriptEditorService, script: LuaSourceContainer) -> ScriptDocument,
    ForceReloadSource: (self: ScriptEditorService, uri: string, newsrc: string) -> (),
    GetEditorSource: (self: ScriptEditorService, script: LuaSourceContainer) -> string,
    GetScriptDocuments: (self: ScriptEditorService) -> any,
    IsAutocompleteCallbackRegistered: (self: ScriptEditorService, name: string) -> boolean,
    IsScriptAnalysisCallbackRegistered: (self: ScriptEditorService, name: string) -> boolean,
    RegisterAutocompleteCallback: (self: ScriptEditorService, name: string, priority: number, callbackFunction: any) -> (),
    RegisterScriptAnalysisCallback: (self: ScriptEditorService, name: string, priority: number, callbackFunction: any) -> (),
    StripComments: (self: ScriptEditorService, code: string) -> string,
    EditSourceAsyncWithRanges: (self: ScriptEditorService, script: LuaSourceContainer, newText: string, startLine: number, startCharacter: number, endLine: number, endCharacter: number) -> ...any,
    OpenScriptDocumentAsync: (self: ScriptEditorService, script: LuaSourceContainer) -> ...any,
    UpdateSourceAsync: (self: ScriptEditorService, script: LuaSourceContainer, callback: any) -> (),
}

export type ScriptProfilerService = Instance & {
    ClientRequestData: (self: ScriptProfilerService, player: Player) -> (),
    ClientStart: (self: ScriptProfilerService, player: Player, frequency: number) -> (),
    ClientStop: (self: ScriptProfilerService, player: Player) -> (),
    DeserializeJSON: (self: ScriptProfilerService, jsonString: string) -> {[string]: any},
    SaveScriptProfilingData: (self: ScriptProfilerService, jsonString: string, filename: string) -> string,
    ServerRequestData: (self: ScriptProfilerService) -> (),
    ServerStart: (self: ScriptProfilerService, frequency: number) -> (),
    ServerStop: (self: ScriptProfilerService) -> (),
}

export type ScriptRegistrationService = Instance & {
    GetSourceContainerByScriptGuid: (self: ScriptRegistrationService, guid: string) -> LuaSourceContainer,
}

export type ScriptRuntime = Instance & {
}

export type ScriptService = Instance & {
}

export type Selection = Instance & {
    ActiveInstance: any,
    RenderMode: enum.Enum_SelectionRenderMode,
    SelectionBoxThickness: number,
    SelectionLineThickness: number,
    SelectionThickness: number,
    ShowActiveInstanceHighlight: boolean,
    Add: (self: Selection, instancesToAdd: any) -> (),
    AddFocusCallback: (self: Selection, priority: number, callback: any) -> any,
    ClearTerrainSelectionHack: (self: Selection) -> (),
    Get: (self: Selection) -> any,
    Remove: (self: Selection, instancesToRemove: any) -> (),
    Set: (self: Selection, selection: any) -> (),
    SetTerrainSelectionHack: (self: Selection, center: datatypes.Vector3, size: datatypes.Vector3) -> (),
}

export type SelectionHighlightManager = Instance & {
}

export type SensorBase = Instance & {
    UpdateType: enum.Enum_SensorUpdateType,
}

export type AtmosphereSensor = SensorBase & {
    AirDensity: number,
    RelativeWindVelocity: datatypes.Vector3,
}

export type BuoyancySensor = SensorBase & {
    FullySubmerged: boolean,
    TouchingSurface: boolean,
}

export type ControllerSensor = SensorBase & {
}

export type ControllerPartSensor = ControllerSensor & {
    HitFrame: datatypes.CFrame,
    HitNormal: datatypes.Vector3,
    SearchDistance: number,
    SensedPart: BasePart,
    SensorMode: enum.Enum_SensorMode,
}

export type FluidForceSensor = SensorBase & {
    CenterOfPressure: datatypes.Vector3,
    Force: datatypes.Vector3,
    Torque: datatypes.Vector3,
    EvaluateAsync: (self: FluidForceSensor, linearVelocity: datatypes.Vector3, angularVelocity: datatypes.Vector3, cframe: datatypes.CFrame) -> ...any,
}

export type ServerScriptService = Instance & {
    LoadStringEnabled: boolean,
}

export type ServerStorage = Instance & {
}

export type ServiceProvider = Instance & {
    FindService: (self: ServiceProvider, className: string) -> any,
    GetService: (self: ServiceProvider, className: string) -> any,
}

export type DataModel = ServiceProvider & {
    CreatorId: buffer,
    CreatorType: enum.Enum_CreatorType,
    ForceR15: boolean,
    GameId: buffer,
    Genre: enum.Enum_Genre,
    IsSFFlagsLoaded: boolean,
    JobId: string,
    MatchmakingType: enum.Enum_MatchmakingType,
    PlaceId: buffer,
    PlaceVersion: number,
    PrivateServerId: string,
    PrivateServerOwnerId: buffer,
    Workspace: Workspace,
    BindToClose: (self: DataModel, callback: any) -> (),
    DefineFastFlag: (self: DataModel, name: string, defaultValue: boolean) -> boolean,
    DefineFastInt: (self: DataModel, name: string, defaultValue: number) -> number,
    DefineFastString: (self: DataModel, name: string, defaultValue: string) -> string,
    GetEngineFeature: (self: DataModel, name: string) -> boolean,
    GetFastFlag: (self: DataModel, name: string) -> boolean,
    GetFastInt: (self: DataModel, name: string) -> number,
    GetFastString: (self: DataModel, name: string) -> string,
    GetJobsInfo: (self: DataModel) -> {any},
    GetObjects: (self: DataModel, url: any) -> any,
    GetObjectsAllOrNone: (self: DataModel, url: any, binaryFormatOnly: boolean) -> any,
    GetObjectsList: (self: DataModel, urls: {any}) -> {any},
    GetPlaySessionId: (self: DataModel) -> string,
    IsContentLoaded: (self: DataModel) -> boolean,
    IsLoaded: (self: DataModel) -> boolean,
    IsUniverseMetadataLoaded: (self: DataModel) -> boolean,
    Load: (self: DataModel, url: any) -> (),
    OpenScreenshotsFolder: (self: DataModel) -> (),
    OpenVideosFolder: (self: DataModel) -> (),
    ReportInGoogleAnalytics: (self: DataModel, category: string, action: string, label: string, value: number) -> (),
    SetFastFlagForTesting: (self: DataModel, name: string, newValue: boolean) -> boolean,
    SetFastIntForTesting: (self: DataModel, name: string, newValue: number) -> number,
    SetFastStringForTesting: (self: DataModel, name: string, newValue: string) -> string,
    SetFlagVersion: (self: DataModel, name: string, version: number) -> (),
    SetIsLoaded: (self: DataModel, value: boolean, placeSizeInBytes: number) -> (),
    SetPlaceId: (self: DataModel, placeId: buffer) -> (),
    SetUniverseId: (self: DataModel, universeId: buffer) -> (),
    Shutdown: (self: DataModel) -> (),
    GetObjectsAsync: (self: DataModel, url: any) -> any,
    HttpGetAsync: (self: DataModel, url: string, httpRequestType: enum.Enum_HttpRequestType) -> string,
    HttpPostAsync: (self: DataModel, url: string, data: string, contentType: string, httpRequestType: enum.Enum_HttpRequestType) -> string,
    InsertObjectsAndJoinIfLegacyAsync: (self: DataModel, url: any) -> any,
}

export type GenericSettings = ServiceProvider & {
}

export type AnalysticsSettings = GenericSettings & {
}

export type GlobalSettings = GenericSettings & {
    GetFFlag: (self: GlobalSettings, name: string) -> boolean,
    GetFFlagOverrides: (self: GlobalSettings) -> string,
    GetFFlags: (self: GlobalSettings) -> string,
    GetFVariable: (self: GlobalSettings, name: string) -> string,
    SetFFlagOverrides: (self: GlobalSettings, overrides: string) -> boolean,
}

export type UserSettings = GenericSettings & {
    IsUserFeatureEnabled: (self: UserSettings, name: string) -> boolean,
    Reset: (self: UserSettings) -> (),
    SaveState: (self: UserSettings) -> (),
}

export type ServiceVisibilityService = Instance & {
    HiddenServices: buffer,
    VisibleServices: buffer,
    SetServiceVisibilityPreference: (self: ServiceVisibilityService, service: any, visible: boolean) -> (),
}

export type SessionService = Instance & {
    AcquireContextFocus: (self: SessionService, context: string) -> (),
    GenerateSessionInfoString: (self: SessionService, includeArbitrarySessions: boolean, includeTag: boolean, includeTimestamps: boolean, includeMetadata: boolean) -> string,
    GetCreatedTimestampUtcMs: (self: SessionService, sid: string) -> buffer,
    GetMetadata: (self: SessionService, sid: string, key: string) -> any,
    GetRootSID: (self: SessionService) -> string,
    GetSessionID: (self: SessionService, structuralId: string) -> string,
    GetSessionTag: (self: SessionService, sid: string) -> string,
    IsContextFocused: (self: SessionService, context: string) -> boolean,
    ReleaseContextFocus: (self: SessionService, context: string) -> (),
    RemoveMetadata: (self: SessionService, sid: string, key: string, context: string) -> (),
    RemoveSession: (self: SessionService, sid: string, context: string) -> (),
    RemoveSessionsWithMetadataKey: (self: SessionService, key: string) -> (),
    ReplaceSession: (self: SessionService, sid: string, tag: string) -> (),
    SessionExists: (self: SessionService, sid: string) -> boolean,
    SetMetadata: (self: SessionService, sid: string, key: string, value: any, context: string) -> (),
    SetSession: (self: SessionService, parentSid: string, childSid: string, tag: string, context: string) -> (),
}

export type SharedTableRegistry = Instance & {
    GetSharedTable: (self: SharedTableRegistry, name: string) -> any,
    SetSharedTable: (self: SharedTableRegistry, name: string, st: any) -> (),
}

export type ShorelineUpgraderService = Instance & {
    Cancel: (self: ShorelineUpgraderService) -> (),
    Start: (self: ShorelineUpgraderService) -> (),
}

export type Sky = Instance & {
    CelestialBodiesShown: boolean,
    MoonAngularSize: number,
    MoonTextureId: any,
    SkyboxBk: any,
    SkyboxDn: any,
    SkyboxFt: any,
    SkyboxLf: any,
    SkyboxRt: any,
    SkyboxUp: any,
    StarCount: number,
    SunAngularSize: number,
    SunTextureId: any,
}

export type Smoke = Instance & {
    Color: datatypes.Color3,
    Enabled: boolean,
    LocalTransparencyModifier: number,
    Opacity: number,
    RiseVelocity: number,
    Size: number,
    TimeScale: number,
    opacity_xml: number,
    riseVelocity_xml: number,
    size_xml: number,
    FastForward: (self: Smoke, numFrames: number) -> (),
}

export type SmoothVoxelsUpgraderService = Instance & {
    Cancel: (self: SmoothVoxelsUpgraderService) -> (),
    Start: (self: SmoothVoxelsUpgraderService) -> (),
}

export type SnippetService = Instance & {
}

export type SocialService = Instance & {
    GetPlayersByPartyId: (self: SocialService, partyId: string) -> any,
    HideSelfView: (self: SocialService) -> (),
    InvokeGameInvitePromptClosed: (self: SocialService, player: any, recipientIds: {any}) -> (),
    InvokeIrisInvite: (self: SocialService, player: any, tag: string, irisParticipants: {any}) -> (),
    InvokeIrisInvitePromptClosed: (self: SocialService, player: any) -> (),
    PromptGameInvite: (self: SocialService, player: any, experienceInviteOptions: any) -> (),
    PromptPhoneBook: (self: SocialService, player: any, tag: string) -> (),
    ShowSelfView: (self: SocialService, selfViewPosition: enum.Enum_SelfViewPosition) -> (),
    UpdatePlayerPartyData: (self: SocialService, partyId: string) -> (),
    CanSendCallInviteAsync: (self: SocialService, player: any) -> boolean,
    CanSendGameInviteAsync: (self: SocialService, player: any, recipientId: buffer) -> boolean,
}

export type Sound = Instance & {
    ChannelCount: number,
    IsLoaded: boolean,
    IsPaused: boolean,
    IsPlaying: boolean,
    IsSpatial: boolean,
    LoopRegion: datatypes.NumberRange,
    Looped: boolean,
    PlayOnRemove: boolean,
    PlaybackLoudness: number,
    PlaybackRegion: datatypes.NumberRange,
    PlaybackRegionsEnabled: boolean,
    PlaybackSpeed: number,
    Playing: boolean,
    PlayingReplicator: boolean,
    RollOffGain: number,
    RollOffMaxDistance: number,
    RollOffMinDistance: number,
    RollOffMode: enum.Enum_RollOffMode,
    SoundGroup: SoundGroup,
    SoundId: any,
    TimeLength: number,
    TimePosition: number,
    TimePositionReplicator: number,
    UsageContextPermission: enum.Enum_UsageContext,
    Volume: number,
    Pause: (self: Sound) -> (),
    Play: (self: Sound) -> (),
    Resume: (self: Sound) -> (),
    Stop: (self: Sound) -> (),
}

export type SoundEffect = Instance & {
    Enabled: boolean,
    Priority: number,
}

export type ChorusSoundEffect = SoundEffect & {
    Depth: number,
    Mix: number,
    Rate: number,
}

export type CompressorSoundEffect = SoundEffect & {
    Attack: number,
    GainMakeup: number,
    Ratio: number,
    Release: number,
    SideChain: any,
    Threshold: number,
}

export type CustomSoundEffect = SoundEffect & {
}

export type AssetSoundEffect = CustomSoundEffect & {
}

export type ChannelSelectorSoundEffect = CustomSoundEffect & {
    Channel: number,
}

export type DistortionSoundEffect = SoundEffect & {
    Level: number,
}

export type EchoSoundEffect = SoundEffect & {
    Delay: number,
    DryLevel: number,
    Feedback: number,
    WetLevel: number,
}

export type EqualizerSoundEffect = SoundEffect & {
    HighGain: number,
    LowGain: number,
    MidGain: number,
}

export type FlangeSoundEffect = SoundEffect & {
    Depth: number,
    Mix: number,
    Rate: number,
}

export type PitchShiftSoundEffect = SoundEffect & {
    Octave: number,
}

export type ReverbSoundEffect = SoundEffect & {
    DecayTime: number,
    Density: number,
    Diffusion: number,
    DryLevel: number,
    WetLevel: number,
}

export type TremoloSoundEffect = SoundEffect & {
    Depth: number,
    Duty: number,
    Frequency: number,
}

export type SoundGroup = Instance & {
    Volume: number,
}

export type SoundService = Instance & {
    AmbientReverb: enum.Enum_ReverbType,
    AudioApiByDefault: enum.Enum_RolloutState,
    CharacterSoundsUseNewApi: enum.Enum_RolloutState,
    DefaultListenerLocation: enum.Enum_ListenerLocation,
    DistanceFactor: number,
    DopplerScale: number,
    IsNewExpForAudioApiByDefault: boolean,
    RespectFilteringEnabled: boolean,
    RolloffScale: number,
    VolumetricAudio: enum.Enum_VolumetricAudio,
    BeginRecording: (self: SoundService) -> boolean,
    GetAudioApiByDefault: (self: SoundService) -> boolean,
    GetAudioInstances: (self: SoundService) -> {any},
    GetInputDevice: (self: SoundService) -> ...any,
    GetInputDevices: (self: SoundService) -> ...any,
    GetListener: (self: SoundService) -> ...any,
    GetOutputDevice: (self: SoundService) -> ...any,
    GetOutputDevices: (self: SoundService) -> ...any,
    GetSoundMemoryData: (self: SoundService) -> {[string]: any},
    InsertAsset: (self: SoundService, assetId: any, assetName: string, useSelection: boolean) -> any,
    OpenAttenuationCurveEditor: (self: SoundService, selectedCurveObjects: any) -> (),
    OpenDirectionalCurveEditor: (self: SoundService, selectedCurveObjects: any) -> (),
    PlayLocalSound: (self: SoundService, sound: any) -> (),
    SetAudioApiByDefault: (self: SoundService, enabled: boolean) -> (),
    SetInputDevice: (self: SoundService, name: string, guid: string) -> (),
    SetListener: (self: SoundService, listenerType: enum.Enum_ListenerType, ...any) -> (),
    SetOutputDevice: (self: SoundService, name: string, guid: string) -> (),
    SetRecordingDevice: (self: SoundService, deviceIndex: number) -> boolean,
    EndRecording: (self: SoundService) -> {[string]: any},
    GetRecordingDevices: (self: SoundService) -> {[string]: any},
}

export type Sparkles = Instance & {
    Color: datatypes.Color3,
    Enabled: boolean,
    LocalTransparencyModifier: number,
    SparkleColor: datatypes.Color3,
    TimeScale: number,
    FastForward: (self: Sparkles, numFrames: number) -> (),
}

export type SpawnerService = Instance & {
}

export type StackFrame = Instance & {
    FrameId: number,
    FrameName: string,
    FrameType: enum.Enum_DebuggerFrameType,
    Globals: DebuggerVariable,
    Line: number,
    Locals: DebuggerVariable,
    Populated: boolean,
    Script: string,
    Upvalues: DebuggerVariable,
}

export type StandalonePluginScripts = Instance & {
}

export type StartPageService = Instance & {
    generateTempUrlInContentProvider: (self: StartPageService, url: string) -> (),
    getDaysSinceFirstUserLogin: (self: StartPageService) -> number,
    getLocalGamesFromRegistry: (self: StartPageService) -> {any},
    getRecentAPIGamesFromRegistry: (self: StartPageService) -> {any},
    getTempUrlInContentProvider: (self: StartPageService, url: string) -> string,
    isTutorialBannerClosed: (self: StartPageService) -> boolean,
    isTutorialPopupClosed: (self: StartPageService) -> boolean,
    openLink: (self: StartPageService, link: string) -> (),
    openLocalFile: (self: StartPageService, filePath: string) -> (),
    openPlace: (self: StartPageService, placeId: buffer, universeId: buffer, launchTutorial: boolean) -> (),
    removeAPIGameFromRegistry: (self: StartPageService, gameId: buffer) -> (),
    removeLocalFileFromRegistry: (self: StartPageService, fileName: string) -> (),
    setTutorialBannerClosed: (self: StartPageService, closed: boolean) -> (),
    setTutorialPopupClosed: (self: StartPageService, closed: boolean) -> (),
    shouldShowMacOSDeprecationWarning: (self: StartPageService) -> boolean,
    shouldShowWinOSDeprecationWarning: (self: StartPageService) -> boolean,
    startTutorial: (self: StartPageService) -> (),
}

export type StarterGear = Instance & {
}

export type StarterPack = Instance & {
}

export type StarterPlayer = Instance & {
    AllowCustomAnimations: boolean,
    AutoJumpEnabled: boolean,
    AvatarJointUpgrade: enum.Enum_RolloutState,
    AvatarJointUpgrade_SerializedRollout: enum.Enum_RolloutState,
    CameraMaxZoomDistance: number,
    CameraMinZoomDistance: number,
    CameraMode: enum.Enum_CameraMode,
    CharacterJumpHeight: number,
    CharacterJumpPower: number,
    CharacterMaxSlopeAngle: number,
    CharacterUseJumpPower: boolean,
    CharacterWalkSpeed: number,
    DevCameraOcclusionMode: enum.Enum_DevCameraOcclusionMode,
    DevComputerCameraMovementMode: enum.Enum_DevComputerCameraMovementMode,
    DevComputerMovementMode: enum.Enum_DevComputerMovementMode,
    DevTouchCameraMovementMode: enum.Enum_DevTouchCameraMovementMode,
    DevTouchMovementMode: enum.Enum_DevTouchMovementMode,
    EnableDynamicHeads: enum.Enum_LoadDynamicHeads,
    EnableMouseLockOption: boolean,
    GameSettingsAssetIDFace: buffer,
    GameSettingsAssetIDHead: buffer,
    GameSettingsAssetIDLeftArm: buffer,
    GameSettingsAssetIDLeftLeg: buffer,
    GameSettingsAssetIDPants: buffer,
    GameSettingsAssetIDRightArm: buffer,
    GameSettingsAssetIDRightLeg: buffer,
    GameSettingsAssetIDShirt: buffer,
    GameSettingsAssetIDTeeShirt: buffer,
    GameSettingsAssetIDTorso: buffer,
    GameSettingsAvatar: enum.Enum_GameAvatarType,
    GameSettingsR15Collision: enum.Enum_R15CollisionType,
    GameSettingsScaleRangeBodyType: datatypes.NumberRange,
    GameSettingsScaleRangeHead: datatypes.NumberRange,
    GameSettingsScaleRangeHeight: datatypes.NumberRange,
    GameSettingsScaleRangeProportion: datatypes.NumberRange,
    GameSettingsScaleRangeWidth: datatypes.NumberRange,
    HealthDisplayDistance: number,
    LoadCharacterAppearance: boolean,
    LoadCharacterLayeredClothing: enum.Enum_LoadCharacterLayeredClothing,
    ["LoadCharacterLayeredClothing "]: enum.Enum_LoadCharacterLayeredClothing,
    LuaCharacterController: enum.Enum_CharacterControlMode,
    NameDisplayDistance: number,
    UserEmotesEnabled: boolean,
    ClearDefaults: (self: StarterPlayer) -> (),
}

export type StarterPlayerScripts = Instance & {
}

export type StarterCharacterScripts = StarterPlayerScripts & {
}

export type StartupMessageService = Instance & {
    GetStartupMessage: (self: StartupMessageService) -> any,
}

export type Stats = Instance & {
    ContactsCount: number,
    DataReceiveKbps: number,
    DataSendKbps: number,
    FrameTime: number,
    HeartbeatTime: number,
    InstanceCount: number,
    MovingPrimitivesCount: number,
    PhysicsReceiveKbps: number,
    PhysicsSendKbps: number,
    PhysicsStepTime: number,
    PrimitivesCount: number,
    RenderCPUFrameTime: number,
    RenderGPUFrameTime: number,
    SceneDrawcallCount: number,
    SceneTriangleCount: number,
    ShadowsDrawcallCount: number,
    ShadowsTriangleCount: number,
    UI2DDrawcallCount: number,
    UI2DTriangleCount: number,
    UI3DDrawcallCount: number,
    UI3DTriangleCount: number,
    GetBrowserTrackerId: (self: Stats) -> string,
    GetHarmonyQualityLevel: (self: Stats) -> number,
    GetMemoryCategoryNames: (self: Stats) -> {any},
    GetMemoryUsageMbAllCategories: (self: Stats) -> {any},
    GetMemoryUsageMbForTag: (self: Stats, tag: enum.Enum_DeveloperMemoryTag) -> number,
    GetTotalMemoryUsageMb: (self: Stats) -> number,
    ResetHarmonyMemoryTarget: (self: Stats) -> (),
    SetHarmonyMemoryTarget: (self: Stats, targetMB: number) -> (),
    GetPaginatedMemoryByTexture: (self: Stats, queryType: enum.Enum_TextureQueryType, pageIndex: number, pageSize: number) -> {[string]: any},
}

export type StatsItem = Instance & {
    DisplayName: string,
    GetValue: (self: StatsItem) -> number,
    GetValueString: (self: StatsItem) -> string,
}

export type RunningAverageItemDouble = StatsItem & {
}

export type RunningAverageItemInt = StatsItem & {
}

export type RunningAverageTimeIntervalItem = StatsItem & {
}

export type TotalCountTimeIntervalItem = StatsItem & {
}

export type StopWatchReporter = Instance & {
    FinishTask: (self: StopWatchReporter, taskId: number) -> (),
    SendReport: (self: StopWatchReporter, reportName: string) -> (),
    StartTask: (self: StopWatchReporter, reportName: string, taskName: string) -> number,
}

export type StreamingService = Instance & {
    GetEphemeralVariable: (self: StreamingService, key: string) -> any,
    GetInstance: (self: StreamingService, requestId: string, instanceId: string) -> any,
    InvokeCommand: (self: StreamingService, requestId: string, commandName: string, arg: any) -> (),
    RegisterCommandInternal: (self: StreamingService, commandName: string, callback: any, isSequential: boolean, isPublic: boolean) -> (),
    RegisterContextCollector: (self: StreamingService, collectorName: string, callback: any) -> (),
    SetEphemeralVariable: (self: StreamingService, key: string, value: any, timeToLive: number) -> (),
    SetPluginInfoCallback: (self: StreamingService, callback: any) -> (),
    UnregisterCommand: (self: StreamingService, commandName: string) -> (),
    UnregisterContextCollector: (self: StreamingService, collectorName: string) -> (),
    AttemptSaveAndSendPlaceTelemetry: (self: StreamingService, requestId: string, toolSource: string) -> (),
    BindCodeToGuid: (self: StreamingService, runCodeGuid: string, code: string) -> ...any,
    ExecuteCommandAsync: (self: StreamingService, requestId: string, commandName: string, arg: any) -> any,
    GetRequiredScripts: (self: StreamingService, script: any) -> any,
    RunSandboxedCode: (self: StreamingService, runCodeGuid: string, requestId: string) -> ...any,
    SearchForAssets: (self: StreamingService, body: any) -> any,
}

export type Studio = Instance & {
    ["\"TODO\" Color"]: datatypes.Color3,
    ["\"function\" Color"]: datatypes.Color3,
    ["\"local\" Color"]: datatypes.Color3,
    ["\"nil\" Color"]: datatypes.Color3,
    ["\"self\" Color"]: datatypes.Color3,
    ActionOnStopSync: enum.Enum_ActionOnStopSync,
    ["Active Color"]: datatypes.Color3,
    ["Active Hover Over Color"]: datatypes.Color3,
    ["Always Save Script Changes"]: boolean,
    ["Animate Hover Over"]: boolean,
    ["Auto Clean Empty Line"]: boolean,
    ["Auto Closing Brackets"]: boolean,
    ["Auto Closing Quotes"]: boolean,
    ["Auto Delete Closing Brackets and Quotes"]: boolean,
    ["Auto Indent Rule"]: enum.Enum_AutoIndentRule,
    ["Auto-Recovery Enabled"]: boolean,
    ["Auto-Recovery Interval (Minutes)"]: number,
    AutoResumeSyncOnPlaceOpen: boolean,
    AutocompleteAcceptanceBehavior: enum.Enum_CompletionAcceptanceBehavior,
    ["Automatically trigger AI Code Completion"]: boolean,
    ["Background Color"]: datatypes.Color3,
    ["Basic Objects Display Mode"]: enum.Enum_ListDisplayMode,
    ["Bool Color"]: datatypes.Color3,
    ["Bracket Color"]: datatypes.Color3,
    ["Built-in Function Color"]: datatypes.Color3,
    ["Camera Mouse Wheel Speed"]: number,
    ["Camera Pan Speed"]: number,
    ["Camera Shift Speed"]: number,
    ["Camera Speed"]: number,
    ["Camera Speed Adjust Binding"]: enum.Enum_CameraSpeedAdjustBinding,
    ["Camera Zoom to Mouse Position"]: boolean,
    CameraAdaptiveSpeed: boolean,
    CameraTweenFocus: boolean,
    ["Clear Output On Start"]: boolean,
    CommandBarLocalState: boolean,
    ["Comment Color"]: datatypes.Color3,
    ["Current Line Highlight Color"]: datatypes.Color3,
    ["Debugger Current Line Color"]: datatypes.Color3,
    ["Debugger Error Line Color"]: datatypes.Color3,
    DeprecatedObjectsShown: boolean,
    DisplayLanguage: string,
    ["Doc View Code Background Color"]: datatypes.Color3,
    DraggerActiveColor: datatypes.Color3,
    DraggerMajorGridIncrement: number,
    DraggerMaxSoftSnaps: number,
    DraggerPassiveColor: datatypes.Color3,
    DraggerShowHoverRuler: boolean,
    DraggerShowMeasurement: boolean,
    DraggerShowTargetSnap: boolean,
    DraggerSoftSnapMarginFactor: number,
    DraggerSummonMarginFactor: number,
    DraggerTiltRotateDuration: number,
    ["Enable Autocomplete"]: boolean,
    ["Enable Autocomplete Doc View"]: boolean,
    ["Enable CoreScript Debugger"]: boolean,
    ["Enable Http Sandboxing"]: boolean,
    ["Enable Internal Beta Features"]: boolean,
    ["Enable Internal Features"]: boolean,
    ["Enable Script Analysis"]: boolean,
    ["Enable Scrollbar Markers"]: boolean,
    ["Enable Signature Help"]: boolean,
    ["Enable Signature Help Doc View"]: boolean,
    ["Enable Temporary Tabs"]: boolean,
    ["Enable Temporary Tabs In Explorer"]: boolean,
    ["Enable Type Hover"]: boolean,
    EnableCodeAssist: boolean,
    EnableIndentationRulers: boolean,
    EnableOnTypeAutocomplete: boolean,
    ["Error Color"]: datatypes.Color3,
    ["Find Selection Background Color"]: datatypes.Color3,
    ["Format On Paste"]: boolean,
    ["Format On Type"]: boolean,
    FreeCameraSpeedScroll: boolean,
    ["Function Name Color"]: datatypes.Color3,
    ["Highlight Current Line"]: boolean,
    ["Highlight Occurances"]: boolean,
    HintColor: datatypes.Color3,
    ["Hover Animate Speed"]: enum.Enum_HoverAnimateSpeed,
    ["Hover Box Thickness"]: number,
    ["Hover Line Thickness"]: number,
    ["Hover Over Color"]: datatypes.Color3,
    ["Indent Using Spaces"]: boolean,
    IndentationRulerColor: datatypes.Color3,
    InformationColor: datatypes.Color3,
    ["Keyword Color"]: datatypes.Color3,
    LargeFileLineCountThreshold: number,
    LargeFileThreshold: number,
    ["Line Thickness"]: number,
    LoadAllBuiltinPluginsInRunModes: boolean,
    LoadUserPluginsInRunModes: boolean,
    LuaDebuggerEnabled: boolean,
    LuaDebuggerEnabledAtStartup: boolean,
    ["Luau Keyword Color"]: datatypes.Color3,
    ["Main Volume"]: number,
    ["Matching Word Background Color"]: datatypes.Color3,
    ["Maximum Output Lines"]: number,
    ["Menu Item Background Color"]: datatypes.Color3,
    ["Method Color"]: datatypes.Color3,
    ["Number Color"]: datatypes.Color3,
    ["Only Play Audio from Window in Focus"]: boolean,
    ["Operator Color"]: datatypes.Color3,
    ["Output Layout Mode"]: enum.Enum_OutputLayoutMode,
    PermissionLevelShown: enum.Enum_PermissionLevelShown,
    ["Physical Draggers Select Scope By Default"]: boolean,
    ["Pivot Snap To Geometry Color"]: datatypes.Color3,
    PluginDebuggingEnabled: boolean,
    ["Primary Text Color"]: datatypes.Color3,
    ["Property Color"]: datatypes.Color3,
    ReloadBuiltinPluginsOnChange: boolean,
    ReloadLocalPluginsOnChange: boolean,
    ["Respect Studio shortcuts when game has focus"]: boolean,
    ["Ruler Color"]: datatypes.Color3,
    Rulers: string,
    RuntimeUndoBehavior: enum.Enum_RuntimeUndoBehavior,
    ["Script Editor Color Preset"]: enum.Enum_StudioScriptEditorColorPresets,
    ["Script Editor Scrollbar Background Color"]: datatypes.Color3,
    ["Script Editor Scrollbar Handle Color"]: datatypes.Color3,
    ScriptEditorMenuBorderColor: datatypes.Color3,
    ScriptEditorShouldShowPluginMethods: boolean,
    ScriptTimeoutLength: number,
    ["Scroll Past Last Line"]: boolean,
    ["Secondary Text Color"]: datatypes.Color3,
    ["Select Color"]: datatypes.Color3,
    ["Select/Hover Color"]: datatypes.Color3,
    ["Selected Menu Item Background Color"]: datatypes.Color3,
    ["Selected Text Color"]: datatypes.Color3,
    ["Selection Background Color"]: datatypes.Color3,
    ["Selection Box Thickness"]: number,
    ["Selection Color"]: datatypes.Color3,
    ["Selection Line Thickness"]: number,
    ["Set Pivot of Imported Parts"]: boolean,
    ["Show Core GUI in Explorer while Playing"]: boolean,
    ["Show Diagnostics Bar"]: boolean,
    ["Show FileSyncService"]: boolean,
    ["Show Hidden Objects in Explorer"]: boolean,
    ["Show Hover Over"]: boolean,
    ["Show Light Guides"]: boolean,
    ["Show Navigation Labels"]: boolean,
    ["Show Navigation Mesh"]: boolean,
    ["Show Pathfinding Links"]: boolean,
    ["Show Plugin GUI Service in Explorer"]: boolean,
    ["Show Singly Selected Attachment Parent Frame"]: boolean,
    ["Show Whitespace"]: boolean,
    ["Show plus button on hover in Explorer"]: boolean,
    ShowCorePackagesInExplorer: boolean,
    ["Skip Closing Brackets and Quotes"]: boolean,
    ["String Color"]: datatypes.Color3,
    ["Tab Width"]: number,
    ["Text Color"]: datatypes.Color3,
    ["Text Wrapping"]: boolean,
    Theme: any,
    TypeColor: datatypes.Color3,
    ["Use Bounding Box Move Handles"]: boolean,
    ["Warning Color"]: datatypes.Color3,
    ["Whitespace Color"]: datatypes.Color3,
    GetAvailableThemes: (self: Studio) -> {any},
}

export type StudioAssetService = Instance & {
    ConvertToPackageUpload: (self: StudioAssetService, uploadUrl: string, cloneInstances: any, originalInstances: any) -> (),
    FireOnUGCSubmitCompleted: (self: StudioAssetService, cancelled: boolean) -> (),
    PublishPackage: (self: StudioAssetService, instance: any, publishInfo: {[string]: any}) -> (),
    ShowSaveToRoblox: (self: StudioAssetService, instances: any, assetType: any, hasSubsequent: boolean) -> (),
    UpdatePublishedPackage: (self: StudioAssetService, assetmetadata: {[string]: any}, rootInstance: any, isConvert: boolean, addUndoWaypoint: boolean) -> (),
    AutoSetupAvatarAsync: (self: StudioAssetService, modelId: any, progressCallback: any, notificationCallback: any) -> any,
    CancelAutoSetupAvatarAsync: (self: StudioAssetService, jobId: string) -> (),
    DEPRECATED_SerializeInstances: (self: StudioAssetService, instances: any) -> string,
    RequestAvatarAutosetupAsync: (self: StudioAssetService, meshId: any, textureId: any, progressCallback: any) -> any,
    SerializeInstances: (self: StudioAssetService, instances: any, groupId: buffer, isPackage: boolean) -> string,
}

export type StudioAttachment = Instance & {
    AutoHideParent: boolean,
    IsArrowVisible: boolean,
    Offset: datatypes.Vector2,
    SourceAnchorPoint: datatypes.Vector2,
    TargetAnchorPoint: datatypes.Vector2,
}

export type StudioCallout = Instance & {
    AnchorPoint: datatypes.Vector2,
    IsArrowVisible: boolean,
    IsNextVisible: boolean,
    RowName: string,
    Text: string,
    Title: string,
    SetOnNextClicked: (self: StudioCallout, onClick: any) -> (),
}

export type StudioCameraService = Instance & {
}

export type StudioData = Instance & {
    EnableScriptCollabByDefaultOnLoad: boolean,
}

export type StudioDeviceEmulatorService = Instance & {
    HasMultiTouchStarted: boolean,
    IsMultiTouchEmulationOn: boolean,
    IsMultiTouchEnabled: boolean,
    PivotPosition: datatypes.Vector2,
    GetMaxNumTouches: (self: StudioDeviceEmulatorService) -> number,
    GetTouchInBounds: (self: StudioDeviceEmulatorService, index: number) -> boolean,
    GetTouchPosition: (self: StudioDeviceEmulatorService, index: number) -> datatypes.Vector2,
    EmulatePCDeviceWithResolution: (self: StudioDeviceEmulatorService, deviceId: string, resolution: datatypes.Vector2) -> boolean,
    GetCurrentDeviceId: (self: StudioDeviceEmulatorService) -> string,
    GetCurrentOrientation: (self: StudioDeviceEmulatorService) -> enum.Enum_ScreenOrientation,
    HasDeviceWithId: (self: StudioDeviceEmulatorService, deviceId: string) -> boolean,
    SetCurrentDeviceId: (self: StudioDeviceEmulatorService, deviceId: string) -> (),
    SetCurrentOrientation: (self: StudioDeviceEmulatorService, orientation: enum.Enum_ScreenOrientation) -> (),
}

export type StudioObjectBase = Instance & {
}

export type StudioWidget = StudioObjectBase & {
    SetFixedSize: (self: StudioWidget, width: number, height: number) -> (),
}

export type StudioPublishService = Instance & {
    PublishLocked: boolean,
    ClearUploadNames: (self: StudioPublishService) -> (),
    CloseAfterPublish: (self: StudioPublishService, closeMode: enum.Enum_StudioCloseMode) -> (),
    PublishAs: (self: StudioPublishService, universeId: buffer, placeId: buffer, groupId: buffer, isPublish: boolean, publishParameters: any, willRetryOnConflict: boolean, allowOpeningNewPlace: boolean) -> (),
    PublishThenTurnOnTeamCreate: (self: StudioPublishService) -> (),
    RefreshDocumentDisplayName: (self: StudioPublishService) -> (),
    SetTeamCreateOnPublishInfo: (self: StudioPublishService, shouldTurnOnTcOnPublish: boolean, newPlaceName: string) -> (),
    SetUniverseDisplayName: (self: StudioPublishService, newName: string) -> (),
    SetUploadNames: (self: StudioPublishService, placeName: string, universeName: string) -> (),
    ShowSaveOrPublishPlaceToRoblox: (self: StudioPublishService, showGameSelect: boolean, isPublish: boolean, closeMode: enum.Enum_StudioCloseMode) -> (),
}

export type StudioScriptDebugEventListener = Instance & {
}

export type StudioSdkService = Instance & {
    GetSdk: (self: StudioSdkService) -> any,
    SetSdk: (self: StudioSdkService, sdk: any) -> (),
}

export type StudioService = Instance & {
    ActiveScript: any,
    AlignDraggedObjects: boolean,
    DraggerSolveConstraints: boolean,
    GridSize: number,
    HoverInstance: any,
    InstalledPluginData: string,
    PivotSnapToGeometry: boolean,
    RotateIncrement: number,
    Secrets: string,
    ShowConstraintDetails: boolean,
    ShowWeldDetails: boolean,
    StudioLocaleId: string,
    UseLocalSpace: boolean,
    AnimationIdSelected: (self: StudioService, id: buffer) -> (),
    CopyToClipboard: (self: StudioService, stringToCopy: string) -> (),
    GetBadgeConfigureUrl: (self: StudioService, badgeId: buffer) -> string,
    GetBadgeUploadUrl: (self: StudioService) -> string,
    GetClassIcon: (self: StudioService, className: string) -> {[string]: any},
    GetPlaceIsPersistedToCloud: (self: StudioService) -> boolean,
    GetResourceByCategory: (self: StudioService, category: string) -> {[string]: any},
    GetStartupAssetId: (self: StudioService) -> string,
    GetStartupPluginId: (self: StudioService) -> string,
    GetTermsOfUseUrl: (self: StudioService) -> string,
    GetUserId: (self: StudioService) -> buffer,
    GizmoRaycast: (self: StudioService, origin: datatypes.Vector3, direction: datatypes.Vector3, raycastParams: any) -> any,
    HasInternalPermission: (self: StudioService) -> boolean,
    IsPluginInstalled: (self: StudioService, assetId: buffer) -> boolean,
    IsPluginUpToDate: (self: StudioService, assetId: buffer, currentAssetVersion: buffer) -> boolean,
    OpenInBrowser_DONOTUSE: (self: StudioService, url: string) -> (),
    SetPluginEnabled: (self: StudioService, assetId: buffer, state: boolean) -> (),
    ShowPlaceVersionHistoryDialog: (self: StudioService, placeId: buffer) -> (),
    ShowPublishToRoblox: (self: StudioService) -> (),
    UninstallPlugin: (self: StudioService, assetId: buffer) -> (),
    UpdatePluginManagement: (self: StudioService) -> (),
    PromptImportFile: (self: StudioService, fileTypeFilter: {any}) -> any,
    PromptImportFiles: (self: StudioService, fileTypeFilter: {any}) -> any,
    TryInstallPlugin: (self: StudioService, assetId: buffer, assetVersionId: buffer) -> (),
}

export type StudioTheme = Instance & {
    GetColor: (self: StudioTheme, styleguideitem: enum.Enum_StudioStyleGuideColor, modifier: enum.Enum_StudioStyleGuideModifier) -> datatypes.Color3,
}

export type StudioUserService = Instance & {
    IsLoggedIn: boolean,
}

export type StudioWidgetsService = Instance & {
    ApplyFillInBox: (self: StudioWidgetsService, target: StudioWidget) -> (),
    ApplyHighlight: (self: StudioWidgetsService, target: StudioWidget, rowName: string) -> (),
    ApplyShadows: (self: StudioWidgetsService) -> (),
    ApplySpotlight: (self: StudioWidgetsService, target: StudioWidget, rowName: string) -> (),
    GetWidgetFromLabel: (self: StudioWidgetsService, label: string) -> StudioWidget,
    GetWidgetFromPluginGui: (self: StudioWidgetsService, gui: PluginGui) -> StudioWidget,
    HideSpotlight: (self: StudioWidgetsService) -> (),
}

export type StyleBase = Instance & {
    GetStyleRules: (self: StyleBase) -> any,
    InsertStyleRule: (self: StyleBase, rule: StyleRule, priority: number) -> (),
    SetStyleRules: (self: StyleBase, rules: any) -> (),
}

export type StyleRule = StyleBase & {
    Index: number,
    Priority: number,
    PropertiesSerialize: buffer,
    Selector: string,
    SelectorError: string,
    GetProperties: (self: StyleRule) -> {[string]: any},
    GetPropertiesResolved: (self: StyleRule) -> {[string]: any},
    GetProperty: (self: StyleRule, name: string) -> any,
    GetPropertyResolved: (self: StyleRule, name: string) -> any,
    SetProperties: (self: StyleRule, styleProperties: {[string]: any}) -> (),
    SetProperty: (self: StyleRule, name: string, value: any) -> (),
}

export type StyleSheet = StyleBase & {
    GetDerives: (self: StyleSheet) -> any,
    SetDerives: (self: StyleSheet, derives: any) -> (),
}

export type StyleDerive = Instance & {
    Index: number,
    StyleSheet: StyleSheet,
}

export type StyleLink = Instance & {
    StyleSheet: StyleSheet,
}

export type StylingService = Instance & {
    GetAppliedStyles: (self: StylingService, instance: any) -> {any},
    GetStyleInfo: (self: StylingService, style: StyleRule) -> {[string]: any},
    GetStyleSheetDerivesChain: (self: StylingService, styleSheet: StyleSheet) -> any,
    GetStyleSheetInfo: (self: StylingService, styleSheet: StyleSheet) -> {[string]: any},
    UpdateUnitTestOnly: (self: StylingService) -> (),
}

export type SurfaceAppearance = Instance & {
    AlphaMode: enum.Enum_AlphaMode,
    Color: datatypes.Color3,
    ColorMap: any,
    MetalnessMap: any,
    NormalMap: any,
    RoughnessMap: any,
    TexturePack: any,
}

export type TaskScheduler = Instance & {
    SchedulerDutyCycle: number,
    SchedulerRate: number,
    ThreadPoolConfig: enum.Enum_ThreadPoolConfig,
    ThreadPoolSize: number,
}

export type Team = Instance & {
    AutoAssignable: boolean,
    ChildOrder: number,
    TeamColor: datatypes.BrickColor,
    GetPlayers: (self: Team) -> any,
}

export type TeamCreateData = Instance & {
    InitialCameraCFrame: datatypes.CFrame,
}

export type TeamCreatePublishService = Instance & {
}

export type TeamCreateService = Instance & {
    CloseGameIfUserDoesntHavePerms: (self: TeamCreateService) -> (),
}

export type Teams = Instance & {
    GetTeams: (self: Teams) -> any,
}

export type TelemetryService = Instance & {
    LogCounter: (self: TelemetryService, config: {[string]: any}, data: {[string]: any}, value: number) -> any,
    LogDurationEvent: (self: TelemetryService, key: string) -> any,
    LogDurationEventWithTimestamp: (self: TelemetryService, key: string, timestamp: buffer) -> any,
    LogEvent: (self: TelemetryService, config: {[string]: any}, data: {[string]: any}) -> any,
    LogStat: (self: TelemetryService, config: {[string]: any}, data: {[string]: any}, value: number) -> any,
}

export type TeleportAsyncResult = Instance & {
    PrivateServerId: string,
    ReservedServerAccessCode: string,
}

export type TeleportOptions = Instance & {
    ReservedServerAccessCode: string,
    ServerInstanceId: string,
    ShouldReserveServer: boolean,
    GetTeleportData: (self: TeleportOptions) -> any,
    SetTeleportData: (self: TeleportOptions, teleportData: any) -> (),
}

export type TeleportService = Instance & {
    Block: (self: TeleportService) -> (),
    GetArrivingTeleportGui: (self: TeleportService) -> any,
    GetLocalPlayerTeleportData: (self: TeleportService) -> any,
    GetTeleportSetting: (self: TeleportService, setting: string) -> any,
    GetThirdPartyTeleportInfo: (self: TeleportService, goForth: boolean) -> ...any,
    SetTeleportGui: (self: TeleportService, gui: any) -> (),
    SetTeleportSetting: (self: TeleportService, setting: string, value: any) -> (),
    Teleport: (self: TeleportService, placeId: buffer, player: any, teleportData: any, customLoadingScreen: any) -> (),
    TeleportCancel: (self: TeleportService) -> (),
    TeleportToPlaceInstance: (self: TeleportService, placeId: buffer, instanceId: string, player: any, spawnName: string, teleportData: any, customLoadingScreen: any) -> (),
    TeleportToPrivateServer: (self: TeleportService, placeId: buffer, reservedServerAccessCode: string, players: any, spawnName: string, teleportData: any, customLoadingScreen: any) -> (),
    TeleportToSpawnByName: (self: TeleportService, placeId: buffer, spawnName: string, player: any, teleportData: any, customLoadingScreen: any) -> (),
    TeleportTrustedBackForth: (self: TeleportService, goForth: boolean) -> (),
    GetPlayerPlaceInstanceAsync: (self: TeleportService, userId: buffer) -> ...any,
    ReserveServer: (self: TeleportService, placeId: buffer) -> ...any,
    TeleportAsync: (self: TeleportService, placeId: buffer, players: any, teleportOptions: any) -> any,
    TeleportPartyAsync: (self: TeleportService, placeId: buffer, players: any, teleportData: any, customLoadingScreen: any) -> string,
    UnblockAsync: (self: TeleportService) -> ...any,
}

export type TemporaryCageMeshProvider = Instance & {
}

export type TemporaryScriptService = Instance & {
}

export type TerrainDetail = Instance & {
    ColorMap: any,
    Face: enum.Enum_TerrainFace,
    MaterialPattern: enum.Enum_MaterialPattern,
    MetalnessMap: any,
    NormalMap: any,
    RoughnessMap: any,
    StudsPerTile: number,
    TexturePack: any,
}

export type TerrainRegion = Instance & {
    ExtentsMax: datatypes.Vector3int16,
    ExtentsMin: datatypes.Vector3int16,
    GridV3: buffer,
    SizeInCells: datatypes.Vector3,
    SmoothGrid: buffer,
    ApplyTransform: (self: TerrainRegion, rotation: datatypes.CFrame, size: datatypes.Vector3) -> (),
    ApplyTransformSubregion: (self: TerrainRegion, rotation: datatypes.CFrame, size: datatypes.Vector3, region: any) -> TerrainRegion,
    GetRegionWireframe: (self: TerrainRegion) -> {any},
}

export type TestService = Instance & {
    AutoRuns: boolean,
    Description: string,
    ErrorCount: number,
    ExecuteWithStudioRun: boolean,
    IsPhysicsEnvironmentalThrottled: boolean,
    IsSleepAllowed: boolean,
    NumberOfPlayers: number,
    SimulateSecondsLag: number,
    TestCount: number,
    ThrottlePhysicsToRealtime: boolean,
    Timeout: number,
    WarnCount: number,
    Check: (self: TestService, condition: boolean, description: string, source: any, line: number) -> (),
    Checkpoint: (self: TestService, text: string, source: any, line: number) -> (),
    Done: (self: TestService) -> (),
    Error: (self: TestService, description: string, source: any, line: number) -> (),
    Fail: (self: TestService, description: string, source: any, line: number) -> (),
    Message: (self: TestService, text: string, source: any, line: number) -> (),
    Require: (self: TestService, condition: boolean, description: string, source: any, line: number) -> (),
    ScopeTime: (self: TestService) -> {[string]: any},
    Warn: (self: TestService, condition: boolean, description: string, source: any, line: number) -> (),
    isFeatureEnabled: (self: TestService, name: string) -> boolean,
    Run: (self: TestService) -> (),
}

export type TextBoxService = Instance & {
}

export type TextChannel = Instance & {
    DirectChatRequester: Player,
    DisplaySystemMessage: (self: TextChannel, systemMessage: string, metadata: string) -> TextChatMessage,
    SetDirectChatRequester: (self: TextChannel, requester: Player) -> (),
    AddUserAsync: (self: TextChannel, userId: buffer) -> ...any,
    SendAsync: (self: TextChannel, message: string, metadata: string) -> TextChatMessage,
}

export type TextChatCommand = Instance & {
    AutocompleteVisible: boolean,
    Enabled: boolean,
    PrimaryAlias: string,
    SecondaryAlias: string,
}

export type TextChatConfigurations = Instance & {
}

export type BubbleChatConfiguration = TextChatConfigurations & {
    AdorneeName: string,
    BackgroundColor3: datatypes.Color3,
    BackgroundTransparency: number,
    BubbleDuration: number,
    BubblesSpacing: number,
    Enabled: boolean,
    Font: enum.Enum_Font,
    FontFace: datatypes.Font,
    LocalPlayerStudsOffset: datatypes.Vector3,
    MaxBubbles: number,
    MaxDistance: number,
    MinimizeDistance: number,
    TailVisible: boolean,
    TextColor3: datatypes.Color3,
    TextSize: buffer,
    VerticalStudsOffset: number,
}

export type ChannelTabsConfiguration = TextChatConfigurations & {
    AbsolutePosition: datatypes.Vector2,
    AbsoluteSize: datatypes.Vector2,
    BackgroundColor3: datatypes.Color3,
    BackgroundTransparency: number,
    Enabled: boolean,
    FontFace: datatypes.Font,
    HoverBackgroundColor3: datatypes.Color3,
    SelectedTabTextColor3: datatypes.Color3,
    TextColor3: datatypes.Color3,
    TextSize: buffer,
    TextStrokeColor3: datatypes.Color3,
    TextStrokeTransparency: number,
    SetAbsolutePosition: (self: ChannelTabsConfiguration, value: datatypes.Vector2) -> (),
    SetAbsoluteSize: (self: ChannelTabsConfiguration, value: datatypes.Vector2) -> (),
}

export type ChatInputBarConfiguration = TextChatConfigurations & {
    AbsolutePosition: datatypes.Vector2,
    AbsolutePositionWrite: datatypes.Vector2,
    AbsoluteSize: datatypes.Vector2,
    AbsoluteSizeWrite: datatypes.Vector2,
    AutocompleteEnabled: boolean,
    BackgroundColor3: datatypes.Color3,
    BackgroundTransparency: number,
    Enabled: boolean,
    FontFace: datatypes.Font,
    IsFocused: boolean,
    IsFocusedWrite: boolean,
    KeyboardKeyCode: enum.Enum_KeyCode,
    PlaceholderColor3: datatypes.Color3,
    TargetTextChannel: TextChannel,
    TextBox: TextBox,
    TextColor3: datatypes.Color3,
    TextSize: buffer,
    TextStrokeColor3: datatypes.Color3,
    TextStrokeTransparency: number,
}

export type ChatWindowConfiguration = TextChatConfigurations & {
    AbsolutePosition: datatypes.Vector2,
    AbsolutePositionWrite: datatypes.Vector2,
    AbsoluteSize: datatypes.Vector2,
    AbsoluteSizeWrite: datatypes.Vector2,
    BackgroundColor3: datatypes.Color3,
    BackgroundTransparency: number,
    Enabled: boolean,
    FontFace: datatypes.Font,
    HeightScale: number,
    HorizontalAlignment: enum.Enum_HorizontalAlignment,
    TextColor3: datatypes.Color3,
    TextSize: buffer,
    TextStrokeColor3: datatypes.Color3,
    TextStrokeTransparency: number,
    VerticalAlignment: enum.Enum_VerticalAlignment,
    WidthScale: number,
    DeriveNewMessageProperties: (self: ChatWindowConfiguration) -> ChatWindowMessageProperties,
}

export type TextChatMessage = Instance & {
    BubbleChatMessageProperties: BubbleChatMessageProperties,
    ChatWindowMessageProperties: ChatWindowMessageProperties,
    MessageId: string,
    Metadata: string,
    PrefixText: string,
    Status: enum.Enum_TextChatMessageStatus,
    Text: string,
    TextChannel: TextChannel,
    TextSource: TextSource,
    Timestamp: datatypes.DateTime,
    Translation: string,
    Verified: boolean,
}

export type TextChatMessageProperties = Instance & {
    PrefixText: string,
    Text: string,
    Translation: string,
}

export type BubbleChatMessageProperties = TextChatMessageProperties & {
    BackgroundColor3: datatypes.Color3,
    BackgroundTransparency: number,
    FontFace: datatypes.Font,
    TailVisible: boolean,
    TextColor3: datatypes.Color3,
    TextSize: buffer,
}

export type ChatWindowMessageProperties = TextChatMessageProperties & {
    FontFace: datatypes.Font,
    PrefixTextProperties: ChatWindowMessageProperties,
    TextColor3: datatypes.Color3,
    TextSize: number,
    TextStrokeColor3: datatypes.Color3,
    TextStrokeTransparency: number,
}

export type TextChatService = Instance & {
    ChatTranslationEnabled: boolean,
    ChatTranslationFTUXShown: boolean,
    ChatTranslationToggleEnabled: boolean,
    ChatVersion: enum.Enum_ChatVersion,
    CreateDefaultCommands: boolean,
    CreateDefaultTextChannels: boolean,
    HasSeenDeprecationDialog: boolean,
    DisplayBubble: (self: TextChatService, partOrCharacter: any, message: string) -> (),
    CanUserChatAsync: (self: TextChatService, userId: buffer) -> boolean,
    CanUsersChatAsync: (self: TextChatService, userIdFrom: buffer, userIdTo: buffer) -> boolean,
    CanUsersDirectChatAsync: (self: TextChatService, requesterUserId: buffer, userIds: {any}) -> {any},
    CanUsersWhisperAsync: (self: TextChatService, fromUserId: buffer, toUserId: buffer) -> boolean,
}

export type TextFilterResult = Instance & {
    GetChatForUserAsync: (self: TextFilterResult, toUserId: buffer) -> string,
    GetNonChatStringForBroadcastAsync: (self: TextFilterResult) -> string,
    GetNonChatStringForUserAsync: (self: TextFilterResult, toUserId: buffer) -> string,
}

export type TextFilterTranslatedResult = Instance & {
    SourceLanguage: string,
    SourceText: TextFilterResult,
    GetTranslationForLocale: (self: TextFilterTranslatedResult, locale: string) -> TextFilterResult,
    GetTranslations: (self: TextFilterTranslatedResult) -> {[string]: any},
}

export type TextService = Instance & {
    GetFontMemoryData: (self: TextService) -> {[string]: any},
    GetTextSize: (self: TextService, string: string, fontSize: number, font: enum.Enum_Font, frameSize: datatypes.Vector2) -> datatypes.Vector2,
    SetResolutionScale: (self: TextService, scale: number) -> (),
    FilterAndTranslateStringAsync: (self: TextService, stringToFilter: string, fromUserId: buffer, targetLocales: {any}, textContext: enum.Enum_TextFilterContext) -> TextFilterTranslatedResult,
    FilterStringAsync: (self: TextService, stringToFilter: string, fromUserId: buffer, textContext: enum.Enum_TextFilterContext) -> TextFilterResult,
    GetFamilyInfoAsync: (self: TextService, assetId: any) -> {[string]: any},
    GetTextBoundsAsync: (self: TextService, params: GetTextBoundsParams) -> datatypes.Vector2,
    GetTextSizeOffsetAsync: (self: TextService, fontSize: number, font: datatypes.Font) -> number,
}

export type TextSource = Instance & {
    CanSend: boolean,
    UserId: buffer,
    UserIdReplicated: buffer,
}

export type TextureGenerationPartGroup = Instance & {
    GetInstances: (self: TextureGenerationPartGroup) -> any,
    GetMeshIdsHash: (self: TextureGenerationPartGroup) -> string,
}

export type TextureGenerationService = Instance & {
    CancelGenerationRequest: (self: TextureGenerationService, jobUuid: string) -> (),
    CreatePartGroup: (self: TextureGenerationService, instances: any) -> TextureGenerationPartGroup,
    GenerateTexture: (self: TextureGenerationService, previewJobId: string) -> {[string]: any},
    PreviewTexture: (self: TextureGenerationService, partGroup: TextureGenerationPartGroup, prompt: string, options: {[string]: any}) -> {[string]: any},
    GetQuotasAsync: (self: TextureGenerationService) -> {[string]: any},
}

export type TextureGenerationUnwrappingRequest = Instance & {
    ApplyToDataModel: (self: TextureGenerationUnwrappingRequest, partGroup: TextureGenerationPartGroup) -> TextureGenerationPartGroup,
    GetPartGroup: (self: TextureGenerationUnwrappingRequest) -> TextureGenerationPartGroup,
}

export type ThirdPartyUserService = Instance & {
    GetUserPlatformId: (self: ThirdPartyUserService) -> string,
    GetUserPlatformName: (self: ThirdPartyUserService) -> string,
    GetVoiceChatRestrictionStatus: (self: ThirdPartyUserService) -> enum.Enum_ChatRestrictionStatus,
    HaveActiveUser: (self: ThirdPartyUserService) -> boolean,
    IsChatRestrictionSupported: (self: ThirdPartyUserService) -> boolean,
    IsOver13: (self: ThirdPartyUserService) -> boolean,
    ReturnToEngagement: (self: ThirdPartyUserService) -> (),
    ShowAccountPicker: (self: ThirdPartyUserService) -> (),
    RegisterActiveUser: (self: ThirdPartyUserService, gamepadId: enum.Enum_UserInputType) -> number,
}

export type ThreadState = Instance & {
    FrameCount: number,
    Populated: boolean,
    ThreadId: number,
    ThreadName: string,
    GetFrame: (self: ThreadState, index: number) -> any,
}

export type TimerService = Instance & {
}

export type ToastNotificationService = Instance & {
    HideNotification: (self: ToastNotificationService, notificationId: string) -> (),
    ShowNotification: (self: ToastNotificationService, message: string, notificationId: string) -> (),
}

export type TouchInputService = Instance & {
}

export type TouchTransmitter = Instance & {
}

export type TracerService = Instance & {
    FinishSpan: (self: TracerService, spanId: string) -> (),
    StartSpan: (self: TracerService, name: string, parentId: string) -> string,
}

export type TrackerLodController = Instance & {
    AudioMode: enum.Enum_TrackerLodFlagMode,
    VideoExtrapolationMode: enum.Enum_TrackerExtrapolationFlagMode,
    VideoLodMode: enum.Enum_TrackerLodValueMode,
    VideoMode: enum.Enum_TrackerLodFlagMode,
    getExtrapolation: (self: TrackerLodController) -> number,
    getVideoLod: (self: TrackerLodController) -> number,
    isAudioEnabled: (self: TrackerLodController) -> boolean,
    isVideoEnabled: (self: TrackerLodController) -> boolean,
}

export type TrackerStreamAnimation = Instance & {
}

export type Trail = Instance & {
    Attachment0: Attachment,
    Attachment1: Attachment,
    Brightness: number,
    Color: datatypes.ColorSequence,
    Enabled: boolean,
    FaceCamera: boolean,
    Lifetime: number,
    LightEmission: number,
    LightInfluence: number,
    LocalTransparencyModifier: number,
    MaxLength: number,
    MinLength: number,
    Texture: any,
    TextureLength: number,
    TextureMode: enum.Enum_TextureMode,
    Transparency: datatypes.NumberSequence,
    WidthScale: datatypes.NumberSequence,
    Clear: (self: Trail) -> (),
}

export type Translator = Instance & {
    LocaleId: string,
    FormatByKey: (self: Translator, key: string, args: any) -> string,
    RobloxOnlyTranslate: (self: Translator, context: any, text: string) -> string,
    Translate: (self: Translator, context: any, text: string) -> string,
}

export type TutorialService = Instance & {
    GetMainViewSessionId: (self: TutorialService) -> string,
    HasUserCompletedTutorial: (self: TutorialService) -> boolean,
    HideWidgets: (self: TutorialService, commaSeparatedNames: string) -> boolean,
    PromptClosePlace: (self: TutorialService) -> (),
    SetTutorialCompletionStatus: (self: TutorialService, completed: boolean) -> (),
    ShouldLaunchTutorial: (self: TutorialService) -> boolean,
    ShowWidgets: (self: TutorialService, commaSeparatedNames: string) -> boolean,
}

export type TweenBase = Instance & {
    PlaybackState: enum.Enum_PlaybackState,
    Cancel: (self: TweenBase) -> (),
    Pause: (self: TweenBase) -> (),
    Play: (self: TweenBase) -> (),
}

export type Tween = TweenBase & {
    Instance: any,
}

export type TweenService = Instance & {
    Create: (self: TweenService, instance: any, tweenInfo: any, propertyTable: {[string]: any}) -> Tween,
    GetValue: (self: TweenService, alpha: number, easingStyle: enum.Enum_EasingStyle, easingDirection: enum.Enum_EasingDirection) -> number,
    SmoothDamp: (self: TweenService, current: any, target: any, velocity: any, smoothTime: number, maxSpeed: number, dt: number) -> ...any,
}

export type UGCAvatarService = Instance & {
}

export type UGCValidationService = Instance & {
    CalculateAverageEditableCageMeshDistance: (self: UGCValidationService, innerCage: EditableMesh, outerCage: EditableMesh, refMesh: EditableMesh, innerTransform: datatypes.CFrame, outerTransform: datatypes.CFrame) -> number,
    CalculateEditableMeshInsideMeshPercentage: (self: UGCValidationService, editableMeshRoot: EditableMesh, editableMeshQuery: EditableMesh, meshQueryTransform: datatypes.CFrame, meshQueryScale: datatypes.Vector3) -> number,
    CalculateEditableMeshModifiedCageBoundingBox: (self: UGCValidationService, referenceUVValues: {any}, innerCage: EditableMesh, innerTransform: datatypes.CFrame, outerCage: EditableMesh, outerTransform: datatypes.CFrame) -> ...any,
    CalculateEditableMeshNumModifiedCageUVsInSet: (self: UGCValidationService, referenceUVValues: {any}, innerCage: EditableMesh, innerTransform: datatypes.CFrame, outerCage: EditableMesh, outerTransform: datatypes.CFrame) -> ...any,
    CalculateEditableMeshTotalSurfaceArea: (self: UGCValidationService, editableMesh: EditableMesh, meshScale: datatypes.Vector3) -> number,
    CalculateEditableMeshUniqueUVCount: (self: UGCValidationService, editableMesh: EditableMesh) -> number,
    CheckEditableMeshInCameraFrustum: (self: UGCValidationService, editableMesh: EditableMesh, meshScale: datatypes.Vector3, handleWorldCF: datatypes.CFrame, cameraWorldCF: datatypes.CFrame) -> boolean,
    CreateEditableImageFromBinaryStringRobloxOnly: (self: UGCValidationService, value: BinaryStringValue) -> EditableImage,
    CreateEditableMeshFromBinaryStringRobloxOnly: (self: UGCValidationService, value: BinaryStringValue) -> EditableMesh,
    GetDynamicHeadEditableMeshInactiveControls: (self: UGCValidationService, editableMesh: EditableMesh, controlNames: {any}) -> ...any,
    GetEditableCagingRelevancyMetrics: (self: UGCValidationService, innerCage: EditableMesh, outerCage: EditableMesh, refMesh: EditableMesh, offsetInner: datatypes.Vector3, offsetOuter: datatypes.Vector3) -> ...any,
    GetEditableImageData: (self: UGCValidationService, editableImage: EditableImage) -> BinaryStringValue,
    GetEditableImageSize: (self: UGCValidationService, editableImage: EditableImage) -> datatypes.Vector2,
    GetEditableMeshMaxNearbyVerticesCollisions: (self: UGCValidationService, editableMesh: EditableMesh, meshScale: datatypes.Vector3) -> number,
    GetEditableMeshTriCount: (self: UGCValidationService, editableMesh: EditableMesh) -> number,
    GetEditableMeshVertColors: (self: UGCValidationService, editableMesh: EditableMesh) -> {any},
    GetEditableMeshVerticesSimilarityRate: (self: UGCValidationService, editableMesh: EditableMesh, meshScale: datatypes.Vector3) -> number,
    GetEditableMeshVerts: (self: UGCValidationService, editableMesh: EditableMesh) -> {any},
    GetImageTransparencyWithByteString: (self: UGCValidationService, textureId: string) -> number,
    GetPropertyValue: (self: UGCValidationService, instance: any, property: string) -> any,
    IsEditableMeshNumCoplanarIntersectionsOverLimit: (self: UGCValidationService, editableMesh: EditableMesh, limit: number, meshScale: datatypes.Vector3, intersectBackFaces: boolean) -> boolean,
    RegisterAlternateMesh: (self: UGCValidationService, alternateId: string, binaryStringValue: BinaryStringValue) -> (),
    RegisterUGCValidationFunction: (self: UGCValidationService, setFunction: any) -> (),
    ReportUGCValidationCounter: (self: UGCValidationService, success: boolean, validationType: string) -> (),
    ReportUGCValidationFailureTelemetry: (self: UGCValidationService, errorType: string) -> (),
    ReportUGCValidationTelemetry: (self: UGCValidationService, assetType: string, data: {[string]: any}) -> (),
    ResetCollisionFidelity: (self: UGCValidationService, meshPart: any, collisionFidelity: enum.Enum_CollisionFidelity) -> (),
    ResetCollisionFidelityWithEditableMeshDataLua: (self: UGCValidationService, meshPart: MeshPart, editableMesh: EditableMesh, collisionFidelity: enum.Enum_CollisionFidelity) -> (),
    SetMeshIdBlocking: (self: UGCValidationService, meshPart: any, meshId: string) -> (),
    ValidateDynamicHeadEditableMesh: (self: UGCValidationService, editableMesh: EditableMesh) -> boolean,
    ValidateEditableImageNumTextureChannels: (self: UGCValidationService, editableImage: EditableImage, numTextureChannelsRequired: number) -> boolean,
    ValidateEditableImageSize: (self: UGCValidationService, editableImage: EditableImage) -> boolean,
    ValidateEditableMeshBounds: (self: UGCValidationService, editableMesh: EditableMesh, meshScale: datatypes.Vector3, boundsOffset: datatypes.Vector3, attachmentCF: datatypes.CFrame, handleCF: datatypes.CFrame) -> boolean,
    ValidateEditableMeshCageMeshIntersection: (self: UGCValidationService, innerCage: EditableMesh, outerCage: EditableMesh, refMesh: EditableMesh) -> ...any,
    ValidateEditableMeshCageNonManifoldAndHoles: (self: UGCValidationService, editableMesh: EditableMesh) -> ...any,
    ValidateEditableMeshCageUVCoincident: (self: UGCValidationService, editableMesh: EditableMesh) -> boolean,
    ValidateEditableMeshCageUVTriangleArea: (self: UGCValidationService, editableMesh: EditableMesh) -> boolean,
    ValidateEditableMeshFullBodyCageDeletion: (self: UGCValidationService, editableMesh: EditableMesh) -> boolean,
    ValidateEditableMeshMisMatchUV: (self: UGCValidationService, innerCage: EditableMesh, outerCage: EditableMesh) -> boolean,
    ValidateEditableMeshOverlappingVertices: (self: UGCValidationService, editableMesh: EditableMesh) -> boolean,
    ValidateEditableMeshTriangleArea: (self: UGCValidationService, editableMesh: EditableMesh) -> boolean,
    ValidateEditableMeshTriangles: (self: UGCValidationService, editableMesh: EditableMesh) -> boolean,
    ValidateEditableMeshUVDuplicates: (self: UGCValidationService, referenceValues: {any}, editableMesh: EditableMesh) -> number,
    ValidateEditableMeshUVSpace: (self: UGCValidationService, editableMesh: EditableMesh) -> boolean,
    ValidateEditableMeshUVValuesInReference: (self: UGCValidationService, referenceValues: {any}, editableMesh: EditableMesh) -> boolean,
    ValidateEditableMeshUniqueUVCount: (self: UGCValidationService, editableMesh: EditableMesh, numRequired: number) -> boolean,
    ValidateEditableMeshVertColors: (self: UGCValidationService, editableMesh: EditableMesh, includeAlpha: boolean) -> boolean,
    ValidateSkinnedEditableMesh: (self: UGCValidationService, editableMesh: EditableMesh) -> boolean,
    CalculateAverageCageMeshDistance: (self: UGCValidationService, innerCageMeshId: string, outerCageMeshId: string, refMeshId: string, innerTransform: datatypes.CFrame, outerTransform: datatypes.CFrame) -> number,
    CalculateMeshInsideMeshPercentage: (self: UGCValidationService, meshIdRoot: string, meshIdQuery: string, meshqueryTransform: datatypes.CFrame, meshQueryScale: datatypes.Vector3) -> number,
    CalculateTotalSurfaceArea: (self: UGCValidationService, meshId: string, meshScale: datatypes.Vector3) -> number,
    CalculateUniqueUVCount: (self: UGCValidationService, meshId: string) -> number,
    CanLoadAsset: (self: UGCValidationService, assetId: string) -> boolean,
    CheckMeshInCameraFrustum: (self: UGCValidationService, meshId: string, meshScale: datatypes.Vector3, handleWorldCF: datatypes.CFrame, cameraWorldCF: datatypes.CFrame) -> boolean,
    CompareTextureOverlapByteString: (self: UGCValidationService, byteStringBaseline: string, byteStringFollowup: string) -> {any},
    CompareTextureOverlapTextureId: (self: UGCValidationService, textureIdBaseline: string, textureIdFollowup: string) -> {any},
    DoesMeshHaveSkinningData: (self: UGCValidationService, meshId: string) -> boolean,
    FetchAssetWithFormat: (self: UGCValidationService, url: any, assetFormat: string) -> any,
    GetCagingRelevancyMetrics: (self: UGCValidationService, innerCageMeshId: string, outerCageMeshId: string, refMeshId: string, offsetInner: datatypes.Vector3, offsetOuter: datatypes.Vector3) -> ...any,
    GetDynamicHeadMeshInactiveControls: (self: UGCValidationService, meshId: string, controlNames: {any}) -> ...any,
    GetImageTransparencyWithTextureID: (self: UGCValidationService, textureId: string) -> number,
    GetMaxNearbyVerticesCollisions: (self: UGCValidationService, meshId: string, meshScale: datatypes.Vector3) -> number,
    GetMeshDataBinaryString: (self: UGCValidationService, meshId: string) -> BinaryStringValue,
    GetMeshTriCount: (self: UGCValidationService, meshId: string) -> number,
    GetMeshVertColors: (self: UGCValidationService, meshId: string) -> {any},
    GetMeshVerticesSimilarityRate: (self: UGCValidationService, meshId: string, meshScale: datatypes.Vector3) -> number,
    GetMeshVerts: (self: UGCValidationService, meshId: string) -> {any},
    GetTextureSize: (self: UGCValidationService, textureId: string) -> datatypes.Vector2,
    IsNumCoplanarIntersectionsOverLimit: (self: UGCValidationService, meshId: string, limit: number, meshScale: datatypes.Vector3, intersectBackFaces: boolean) -> boolean,
    ValidateCageMeshIntersection: (self: UGCValidationService, innerCageMeshId: string, outerCageMeshId: string, refMeshId: string) -> ...any,
    ValidateCageNonManifoldAndHoles: (self: UGCValidationService, meshId: string) -> ...any,
    ValidateCageUVCoincident: (self: UGCValidationService, meshId: string) -> boolean,
    ValidateCageUVTriangleArea: (self: UGCValidationService, meshId: string) -> boolean,
    ValidateDynamicHeadMesh: (self: UGCValidationService, meshId: string) -> boolean,
    ValidateFacialBounds: (self: UGCValidationService, meshId: string, boundsScale: number, partSize: datatypes.Vector3) -> boolean,
    ValidateFacialExpressiveness: (self: UGCValidationService, meshId: string, minDelta: number, partSize: datatypes.Vector3) -> number,
    ValidateFullBodyCageDeletion: (self: UGCValidationService, meshId: string) -> boolean,
    ValidateImageTransparencyThresholdByteString: (self: UGCValidationService, image: string, threshold: number) -> boolean,
    ValidateImageTransparencyThresholdByteString_V2: (self: UGCValidationService, image: string, threshold: number) -> boolean,
    ValidateImageTransparencyThresholdTextureID: (self: UGCValidationService, textureId: string, threshold: number) -> boolean,
    ValidateImageTransparencyThresholdTextureID_V2: (self: UGCValidationService, textureId: string, threshold: number) -> boolean,
    ValidateMeshBounds: (self: UGCValidationService, meshId: string, meshScale: datatypes.Vector3, boundsOffset: datatypes.Vector3, attachmentCF: datatypes.CFrame, handleCF: datatypes.CFrame) -> boolean,
    ValidateMeshTriangleArea: (self: UGCValidationService, meshId: string) -> boolean,
    ValidateMeshTriangles: (self: UGCValidationService, meshId: string) -> boolean,
    ValidateMeshVertColors: (self: UGCValidationService, meshId: string, includeAlpha: boolean) -> boolean,
    ValidateMisMatchUV: (self: UGCValidationService, innerCageMeshId: string, outerCageMeshId: string) -> boolean,
    ValidateNumTextureChannels: (self: UGCValidationService, textureId: string, numChannelsRequired: number) -> boolean,
    ValidateOverlappingVertices: (self: UGCValidationService, meshId: string) -> boolean,
    ValidateSkinnedMesh: (self: UGCValidationService, meshId: string) -> boolean,
    ValidateTextureAlpha: (self: UGCValidationService, textureId: string, pixelWidth: number) -> boolean,
    ValidateTextureAlphaByteString: (self: UGCValidationService, byteString: string, pixelWidth: number) -> boolean,
    ValidateTextureSize: (self: UGCValidationService, textureId: string) -> boolean,
    ValidateUVDuplicates: (self: UGCValidationService, referenceValues: {any}, meshId: string) -> number,
    ValidateUVSpace: (self: UGCValidationService, meshId: string) -> boolean,
    ValidateUVValuesInReference: (self: UGCValidationService, referenceValues: {any}, meshId: string) -> boolean,
    ValidateUniqueUVCount: (self: UGCValidationService, meshId: string, numRequired: number) -> boolean,
}

export type UIBase = Instance & {
}

export type UIComponent = UIBase & {
}

export type UIConstraint = UIComponent & {
}

export type UIAspectRatioConstraint = UIConstraint & {
    AspectRatio: number,
    AspectType: enum.Enum_AspectType,
    DominantAxis: enum.Enum_DominantAxis,
}

export type UISizeConstraint = UIConstraint & {
    MaxSize: datatypes.Vector2,
    MinSize: datatypes.Vector2,
}

export type UITextSizeConstraint = UIConstraint & {
    MaxTextSize: number,
    MinTextSize: number,
}

export type UICorner = UIComponent & {
    CornerRadius: datatypes.UDim,
}

export type UIDragDetector = UIComponent & {
    ActivatedCursorIcon: any,
    BoundingBehavior: enum.Enum_UIDragDetectorBoundingBehavior,
    BoundingUI: GuiBase2d,
    CursorIcon: any,
    DragAxis: datatypes.Vector2,
    DragRelativity: enum.Enum_UIDragDetectorDragRelativity,
    DragRotation: number,
    DragSpace: enum.Enum_UIDragDetectorDragSpace,
    DragStyle: enum.Enum_UIDragDetectorDragStyle,
    DragUDim2: datatypes.UDim2,
    Enabled: boolean,
    MaxDragAngle: number,
    MaxDragTranslation: datatypes.UDim2,
    MinDragAngle: number,
    MinDragTranslation: datatypes.UDim2,
    ReferenceUIInstance: GuiObject,
    ResponseStyle: enum.Enum_UIDragDetectorResponseStyle,
    SelectionModeDragSpeed: datatypes.UDim2,
    SelectionModeRotateSpeed: number,
    UIDragSpeedAxisMapping: enum.Enum_UIDragSpeedAxisMapping,
    AddConstraintFunction: (self: UIDragDetector, priority: number, callback: any) -> any,
    GetReferencePosition: (self: UIDragDetector) -> datatypes.UDim2,
    GetReferenceRotation: (self: UIDragDetector) -> number,
    SetDragStyleFunction: (self: UIDragDetector, callback: any) -> (),
}

export type UIFlexItem = UIComponent & {
    FlexMode: enum.Enum_UIFlexMode,
    GrowRatio: number,
    ItemLineAlignment: enum.Enum_ItemLineAlignment,
    ShrinkRatio: number,
}

export type UIGradient = UIComponent & {
    Color: datatypes.ColorSequence,
    Enabled: boolean,
    Offset: datatypes.Vector2,
    Rotation: number,
    Transparency: datatypes.NumberSequence,
}

export type UILayout = UIComponent & {
}

export type UIGridStyleLayout = UILayout & {
    AbsoluteContentSize: datatypes.Vector2,
    FillDirection: enum.Enum_FillDirection,
    HorizontalAlignment: enum.Enum_HorizontalAlignment,
    SortOrder: enum.Enum_SortOrder,
    VerticalAlignment: enum.Enum_VerticalAlignment,
}

export type UIGridLayout = UIGridStyleLayout & {
    AbsoluteCellCount: datatypes.Vector2,
    AbsoluteCellSize: datatypes.Vector2,
    CellPadding: datatypes.UDim2,
    CellSize: datatypes.UDim2,
    FillDirectionMaxCells: number,
    StartCorner: enum.Enum_StartCorner,
}

export type UIListLayout = UIGridStyleLayout & {
    HorizontalFlex: enum.Enum_UIFlexAlignment,
    HorizontalPadding: datatypes.UDim,
    ItemLineAlignment: enum.Enum_ItemLineAlignment,
    Padding: datatypes.UDim,
    VerticalFlex: enum.Enum_UIFlexAlignment,
    VerticalPadding: datatypes.UDim,
    Wraps: boolean,
}

export type UIPageLayout = UIGridStyleLayout & {
    Animated: boolean,
    Circular: boolean,
    CurrentPage: GuiObject,
    EasingDirection: enum.Enum_EasingDirection,
    EasingStyle: enum.Enum_EasingStyle,
    GamepadInputEnabled: boolean,
    Padding: datatypes.UDim,
    ScrollWheelInputEnabled: boolean,
    TouchInputEnabled: boolean,
    TweenTime: number,
    JumpTo: (self: UIPageLayout, page: any) -> (),
    JumpToIndex: (self: UIPageLayout, index: number) -> (),
    Next: (self: UIPageLayout) -> (),
    Previous: (self: UIPageLayout) -> (),
}

export type UITableLayout = UIGridStyleLayout & {
    FillEmptySpaceColumns: boolean,
    FillEmptySpaceRows: boolean,
    MajorAxis: enum.Enum_TableMajorAxis,
    Padding: datatypes.UDim2,
}

export type UIPadding = UIComponent & {
    PaddingBottom: datatypes.UDim,
    PaddingLeft: datatypes.UDim,
    PaddingRight: datatypes.UDim,
    PaddingTop: datatypes.UDim,
}

export type UIScale = UIComponent & {
    Scale: number,
}

export type UIStroke = UIComponent & {
    ApplyStrokeMode: enum.Enum_ApplyStrokeMode,
    Color: datatypes.Color3,
    Enabled: boolean,
    LineJoinMode: enum.Enum_LineJoinMode,
    Thickness: number,
    Transparency: number,
}

export type UIDragDetectorService = Instance & {
}

export type UniqueIdLookupService = Instance & {
    GetInstanceByRfc4122String: (self: UniqueIdLookupService, id: string) -> any,
}

export type UnvalidatedAssetService = Instance & {
    CachedData: string,
    AppendTempAssetId: (self: UnvalidatedAssetService, userId: buffer, id: buffer, lookAt: datatypes.Vector3, camPos: datatypes.Vector3, usage: string) -> (),
    AppendVantagePoint: (self: UnvalidatedAssetService, userId: buffer, id: buffer, lookAt: datatypes.Vector3, camPos: datatypes.Vector3) -> boolean,
    UpgradeTempAssetId: (self: UnvalidatedAssetService, userId: buffer, tempId: buffer, assetId: buffer) -> boolean,
}

export type UserGameSettings = Instance & {
    AllTutorialsDisabled: boolean,
    CameraMode: enum.Enum_CustomCameraMode,
    CameraYInverted: boolean,
    ChatTranslationEnabled: boolean,
    ChatTranslationFTUXShown: boolean,
    ChatTranslationLocale: string,
    ChatTranslationToggleEnabled: boolean,
    ChatVisible: boolean,
    CompletedTutorials: string,
    ComputerCameraMovementChanged: boolean,
    ComputerCameraMovementMode: enum.Enum_ComputerCameraMovementMode,
    ComputerMovementChanged: boolean,
    ComputerMovementMode: enum.Enum_ComputerMovementMode,
    ControlMode: enum.Enum_ControlMode,
    DefaultCameraID: string,
    FramerateCap: number,
    Fullscreen: boolean,
    GamepadCameraSensitivity: number,
    GraphicsOptimizationMode: enum.Enum_GraphicsOptimizationMode,
    GraphicsQualityLevel: number,
    HapticStrength: number,
    HasEverUsedVR: boolean,
    IsUsingCameraYInverted: boolean,
    IsUsingGamepadCameraSensitivity: boolean,
    MasterVolume: number,
    MasterVolumeStudio: number,
    MaxQualityEnabled: boolean,
    MicroProfilerWebServerEnabled: boolean,
    MicroProfilerWebServerIP: string,
    MicroProfilerWebServerPort: number,
    MouseSensitivity: number,
    MouseSensitivityFirstPerson: datatypes.Vector2,
    MouseSensitivityThirdPerson: datatypes.Vector2,
    OnScreenProfilerEnabled: boolean,
    OnboardingsCompleted: string,
    PartyVoiceVolume: number,
    PerformanceStatsVisible: boolean,
    PlayerHeight: number,
    PreferredTextSize: enum.Enum_PreferredTextSize,
    PreferredTransparency: number,
    QualityResetLevel: number,
    RCCProfilerRecordFrameRate: number,
    RCCProfilerRecordTimeFrame: number,
    ReducedMotion: boolean,
    RotationType: enum.Enum_RotationType,
    SavedQualityLevel: enum.Enum_SavedQualitySetting,
    StartMaximized: boolean,
    StartScreenPosition: datatypes.Vector2,
    StartScreenSize: datatypes.Vector2,
    TouchCameraMovementChanged: boolean,
    TouchCameraMovementMode: enum.Enum_TouchCameraMovementMode,
    TouchMovementChanged: boolean,
    TouchMovementMode: enum.Enum_TouchMovementMode,
    UiNavigationKeyBindEnabled: boolean,
    UsedCoreGuiIsVisibleToggle: boolean,
    UsedCustomGuiIsVisibleToggle: boolean,
    UsedHideHudShortcut: boolean,
    VRComfortSetting: enum.Enum_VRComfortSetting,
    VREnabled: boolean,
    VRRotationIntensity: number,
    VRSafetyBubbleMode: enum.Enum_VRSafetyBubbleMode,
    VRSmoothRotationEnabled: boolean,
    VRSmoothRotationEnabledCustomOption: boolean,
    VRThirdPersonFollowCamEnabled: boolean,
    VRThirdPersonFollowCamEnabledCustomOption: boolean,
    VignetteEnabled: boolean,
    VignetteEnabledCustomOption: boolean,
    gaID: string,
    GetCameraYInvertValue: (self: UserGameSettings) -> number,
    GetDefaultFramerateCap: (self: UserGameSettings) -> number,
    GetOnboardingCompleted: (self: UserGameSettings, onboardingId: string) -> boolean,
    GetTutorialState: (self: UserGameSettings, tutorialId: string) -> boolean,
    InFullScreen: (self: UserGameSettings) -> boolean,
    InStudioMode: (self: UserGameSettings) -> boolean,
    ResetOnboardingCompleted: (self: UserGameSettings, onboardingId: string) -> (),
    SetCameraYInvertVisible: (self: UserGameSettings) -> (),
    SetGamepadCameraSensitivityVisible: (self: UserGameSettings) -> (),
    SetOnboardingCompleted: (self: UserGameSettings, onboardingId: string) -> (),
    SetTutorialState: (self: UserGameSettings, tutorialId: string, value: boolean) -> (),
}

export type UserInputService = Instance & {
    AccelerometerEnabled: boolean,
    BottomBarSize: datatypes.Vector2,
    GamepadEnabled: boolean,
    GyroscopeEnabled: boolean,
    KeyboardEnabled: boolean,
    MouseBehavior: enum.Enum_MouseBehavior,
    MouseDeltaSensitivity: number,
    MouseEnabled: boolean,
    MouseIcon: any,
    MouseIconEnabled: boolean,
    NavBarSize: datatypes.Vector2,
    OnScreenKeyboardAnimationDuration: number,
    OnScreenKeyboardPosition: datatypes.Vector2,
    OnScreenKeyboardSize: datatypes.Vector2,
    OnScreenKeyboardVisible: boolean,
    OverrideMouseIconBehavior: enum.Enum_OverrideMouseIconBehavior,
    RightBarSize: datatypes.Vector2,
    StatusBarSize: datatypes.Vector2,
    TouchEnabled: boolean,
    VREnabled: boolean,
    GamepadSupports: (self: UserInputService, gamepadNum: enum.Enum_UserInputType, gamepadKeyCode: enum.Enum_KeyCode) -> boolean,
    GetConnectedGamepads: (self: UserInputService) -> {any},
    GetDeviceAcceleration: (self: UserInputService) -> InputObject,
    GetDeviceGravity: (self: UserInputService) -> InputObject,
    GetDeviceLevel: (self: UserInputService) -> enum.Enum_DeviceLevel,
    GetDeviceRotation: (self: UserInputService) -> ...any,
    GetDeviceType: (self: UserInputService) -> enum.Enum_DeviceType,
    GetFocusedTextBox: (self: UserInputService) -> TextBox,
    GetGamepadConnected: (self: UserInputService, gamepadNum: enum.Enum_UserInputType) -> boolean,
    GetGamepadState: (self: UserInputService, gamepadNum: enum.Enum_UserInputType) -> {any},
    GetImageForKeyCode: (self: UserInputService, keyCode: enum.Enum_KeyCode) -> any,
    GetKeysPressed: (self: UserInputService) -> {any},
    GetLastInputType: (self: UserInputService) -> enum.Enum_UserInputType,
    GetMouseButtonsPressed: (self: UserInputService) -> {any},
    GetMouseDelta: (self: UserInputService) -> datatypes.Vector2,
    GetMouseLocation: (self: UserInputService) -> datatypes.Vector2,
    GetNavigationGamepads: (self: UserInputService) -> {any},
    GetPlatform: (self: UserInputService) -> enum.Enum_Platform,
    GetStringForKeyCode: (self: UserInputService, keyCode: enum.Enum_KeyCode) -> string,
    GetSupportedGamepadKeyCodes: (self: UserInputService, gamepadNum: enum.Enum_UserInputType) -> {any},
    IsGamepadButtonDown: (self: UserInputService, gamepadNum: enum.Enum_UserInputType, gamepadKeyCode: enum.Enum_KeyCode) -> boolean,
    IsKeyDown: (self: UserInputService, keyCode: enum.Enum_KeyCode) -> boolean,
    IsMouseButtonPressed: (self: UserInputService, mouseButton: enum.Enum_UserInputType) -> boolean,
    IsNavigationGamepad: (self: UserInputService, gamepadEnum: enum.Enum_UserInputType) -> boolean,
    RecenterUserHeadCFrame: (self: UserInputService) -> (),
    SendAppUISizes: (self: UserInputService, statusBarSize: datatypes.Vector2, navBarSize: datatypes.Vector2, bottomBarSize: datatypes.Vector2, rightBarSize: datatypes.Vector2) -> (),
    SetNavigationGamepad: (self: UserInputService, gamepadEnum: enum.Enum_UserInputType, enabled: boolean) -> (),
}

export type UserService = Instance & {
    GetUserInfosByUserIdsAsync: (self: UserService, userIds: {any}) -> {any},
}

export type VRService = Instance & {
    AutomaticScaling: enum.Enum_VRScaling,
    AvatarGestures: boolean,
    ControllerModels: enum.Enum_VRControllerModelMode,
    DidPointerHit: boolean,
    FadeOutViewOnCollision: boolean,
    GuiInputUserCFrame: enum.Enum_UserCFrame,
    LaserDistance: number,
    LaserPointer: enum.Enum_VRLaserPointerMode,
    PointerHitCFrame: datatypes.CFrame,
    QuestASWState: boolean,
    QuestDisplayRefreshRate: number,
    ThirdPersonFollowCamEnabled: boolean,
    VRDeviceAvailable: boolean,
    VRDeviceName: string,
    VREnabled: boolean,
    VRSessionState: enum.Enum_VRSessionState,
    GetTouchpadMode: (self: VRService, pad: enum.Enum_VRTouchpad) -> enum.Enum_VRTouchpadMode,
    GetUserCFrame: (self: VRService, type: enum.Enum_UserCFrame) -> datatypes.CFrame,
    GetUserCFrameEnabled: (self: VRService, type: enum.Enum_UserCFrame) -> boolean,
    IsMaquettes: (self: VRService) -> boolean,
    IsVRAppBuild: (self: VRService) -> boolean,
    RecenterUserHeadCFrame: (self: VRService) -> (),
    RequestNavigation: (self: VRService, cframe: datatypes.CFrame, inputUserCFrame: enum.Enum_UserCFrame) -> (),
    SetTouchpadMode: (self: VRService, pad: enum.Enum_VRTouchpad, mode: enum.Enum_VRTouchpadMode) -> (),
}

export type VRStatusService = Instance & {
}

export type ValueBase = Instance & {
}

export type BinaryStringValue = ValueBase & {
    Value: buffer,
}

export type BoolValue = ValueBase & {
    Value: boolean,
}

export type BrickColorValue = ValueBase & {
    Value: datatypes.BrickColor,
}

export type CFrameValue = ValueBase & {
    Value: datatypes.CFrame,
}

export type Color3Value = ValueBase & {
    Value: datatypes.Color3,
}

export type DoubleConstrainedValue = ValueBase & {
    ConstrainedValue: number,
    MaxValue: number,
    MinValue: number,
    Value: number,
    value: number,
}

export type IntConstrainedValue = ValueBase & {
    ConstrainedValue: buffer,
    MaxValue: buffer,
    MinValue: buffer,
    Value: buffer,
    value: buffer,
}

export type IntValue = ValueBase & {
    Value: buffer,
}

export type NumberValue = ValueBase & {
    Value: number,
}

export type ObjectValue = ValueBase & {
    Value: any,
}

export type RayValue = ValueBase & {
    Value: datatypes.Ray,
}

export type StringValue = ValueBase & {
    Value: string,
}

export type Vector3Value = ValueBase & {
    Value: datatypes.Vector3,
}

export type Vector3Curve = Instance & {
    GetValueAtTime: (self: Vector3Curve, time: number) -> {any},
    X: (self: Vector3Curve) -> FloatCurve,
    Y: (self: Vector3Curve) -> FloatCurve,
    Z: (self: Vector3Curve) -> FloatCurve,
}

export type VersionControlService = Instance & {
    ScriptCollabEnabled: boolean,
    ScriptCollabVersionHistoryEnabled: boolean,
}

export type VideoCaptureService = Instance & {
    Active: boolean,
    CameraID: string,
    GetCameraDevices: (self: VideoCaptureService) -> any,
}

export type VideoDeviceInput = Instance & {
    Active: boolean,
    CameraId: string,
    CaptureQuality: enum.Enum_VideoDeviceCaptureQuality,
    IsReady: boolean,
}

export type VideoPlayer = Instance & {
    Asset: any,
    AutoLoad: boolean,
    IsPlaying: boolean,
    IsReady: boolean,
    Looping: boolean,
    PlaybackSpeed: number,
    Resolution: datatypes.Vector2,
    Thumbnail: any,
    TimeLength: number,
    TimePosition: number,
    Volume: number,
    GetConnectedWires: (self: VideoPlayer, pin: string) -> any,
    Play: (self: VideoPlayer) -> (),
    SetStudioPreview: (self: VideoPlayer, isPreview: boolean) -> (),
    Stop: (self: VideoPlayer) -> (),
}

export type VideoService = Instance & {
}

export type VirtualInputManager = Instance & {
    AdditionalLuaState: string,
    Dump: (self: VirtualInputManager) -> (),
    HandleGamepadAxisInput: (self: VirtualInputManager, objectId: number, keyCode: enum.Enum_KeyCode, x: number, y: number, z: number) -> (),
    HandleGamepadButtonInput: (self: VirtualInputManager, deviceId: number, keyCode: enum.Enum_KeyCode, buttonState: number) -> (),
    HandleGamepadConnect: (self: VirtualInputManager, deviceId: number) -> (),
    HandleGamepadDisconnect: (self: VirtualInputManager, deviceId: number) -> (),
    SendAccelerometerEvent: (self: VirtualInputManager, x: number, y: number, z: number) -> (),
    SendGravityEvent: (self: VirtualInputManager, x: number, y: number, z: number) -> (),
    SendGyroscopeEvent: (self: VirtualInputManager, quatX: number, quatY: number, quatZ: number, quatW: number) -> (),
    SendKeyEvent: (self: VirtualInputManager, isPressed: boolean, keyCode: enum.Enum_KeyCode, isRepeatedKey: boolean, layerCollector: any) -> (),
    SendMouseButtonEvent: (self: VirtualInputManager, x: number, y: number, mouseButton: number, isDown: boolean, layerCollector: any, repeatCount: number) -> (),
    SendMouseMoveDeltaEvent: (self: VirtualInputManager, deltaX: number, deltaY: number, layerCollector: any) -> (),
    SendMouseMoveEvent: (self: VirtualInputManager, x: number, y: number, layerCollector: any) -> (),
    SendMouseWheelEvent: (self: VirtualInputManager, x: number, y: number, isForwardScroll: boolean, layerCollector: any) -> (),
    SendScroll: (self: VirtualInputManager, x: number, y: number, deltaX: number, deltaY: number, options: {[string]: any}, layerCollector: any) -> (),
    SendTextInputCharacterEvent: (self: VirtualInputManager, str: string, layerCollector: any) -> (),
    SendTouchEvent: (self: VirtualInputManager, touchId: buffer, state: number, x: number, y: number) -> (),
    SetInputTypesToIgnore: (self: VirtualInputManager, inputTypesToIgnore: any) -> (),
    StartPlaying: (self: VirtualInputManager, fileName: string) -> (),
    StartPlayingJSON: (self: VirtualInputManager, string: string) -> (),
    StartRecording: (self: VirtualInputManager) -> (),
    StopPlaying: (self: VirtualInputManager) -> (),
    StopRecording: (self: VirtualInputManager) -> (),
    sendRobloxEvent: (self: VirtualInputManager, namespace: string, detail: string, detailType: string) -> (),
    sendThemeChangeEvent: (self: VirtualInputManager, themeName: string) -> (),
    WaitForInputEventsProcessed: (self: VirtualInputManager) -> (),
}

export type VirtualUser = Instance & {
    Button1Down: (self: VirtualUser, position: datatypes.Vector2, camera: datatypes.CFrame) -> (),
    Button1Up: (self: VirtualUser, position: datatypes.Vector2, camera: datatypes.CFrame) -> (),
    Button2Down: (self: VirtualUser, position: datatypes.Vector2, camera: datatypes.CFrame) -> (),
    Button2Up: (self: VirtualUser, position: datatypes.Vector2, camera: datatypes.CFrame) -> (),
    CaptureController: (self: VirtualUser) -> (),
    ClickButton1: (self: VirtualUser, position: datatypes.Vector2, camera: datatypes.CFrame) -> (),
    ClickButton2: (self: VirtualUser, position: datatypes.Vector2, camera: datatypes.CFrame) -> (),
    MoveMouse: (self: VirtualUser, position: datatypes.Vector2, camera: datatypes.CFrame) -> (),
    SetKeyDown: (self: VirtualUser, key: string) -> (),
    SetKeyUp: (self: VirtualUser, key: string) -> (),
    StartRecording: (self: VirtualUser) -> (),
    StopRecording: (self: VirtualUser) -> string,
    TypeKey: (self: VirtualUser, key: string) -> (),
}

export type VisibilityCheckDispatcher = Instance & {
}

export type Visit = Instance & {
}

export type VisualizationMode = Instance & {
    Enabled: boolean,
    Title: string,
    ToolTip: string,
}

export type VisualizationModeCategory = Instance & {
    Enabled: boolean,
    Title: string,
}

export type VisualizationModeService = Instance & {
}

export type VoiceChatInternal = Instance & {
    GetChannelId: (self: VoiceChatInternal) -> string,
    GetGroupId: (self: VoiceChatInternal) -> string,
    GetSessionId: (self: VoiceChatInternal) -> string,
    GetVoiceExperienceId: (self: VoiceChatInternal) -> string,
    IsContextVoiceEnabled: (self: VoiceChatInternal) -> boolean,
    LogPublisherWebRTCStats: (self: VoiceChatInternal) -> boolean,
    LogSubscriptionWebRTCStats: (self: VoiceChatInternal) -> boolean,
    SubscribeBlock: (self: VoiceChatInternal, userId: buffer) -> boolean,
    SubscribeRetry: (self: VoiceChatInternal, userId: buffer) -> boolean,
    SubscribeUnblock: (self: VoiceChatInternal, userId: buffer) -> boolean,
    IsVoiceEnabledForUserIdAsync: (self: VoiceChatInternal, userId: buffer) -> boolean,
}

export type VoiceChatService = Instance & {
    DefaultDistanceAttenuation: enum.Enum_VoiceChatDistanceAttenuationType,
    EnableDefaultVoice: boolean,
    UseAudioApi: enum.Enum_AudioApiRollout,
    UseNewAudioApi: boolean,
    UseNewControlPaths: boolean,
    UseNewJoinFlow: boolean,
    VoiceChatEnabledForPlaceOnRcc: boolean,
    VoiceChatEnabledForUniverseOnRcc: boolean,
    getInternalChannelId: (self: VoiceChatService) -> string,
    getInternalGroupId: (self: VoiceChatService) -> string,
    getInternalPublishPause: (self: VoiceChatService) -> boolean,
    getInternalSessionId: (self: VoiceChatService) -> string,
    getInternalSubscribePause: (self: VoiceChatService, userId: buffer) -> boolean,
    getInternalSubscribePauseAll: (self: VoiceChatService) -> boolean,
    getInternalVoiceChatApiVersion: (self: VoiceChatService) -> number,
    isInternalPublishPaused: (self: VoiceChatService) -> boolean,
    joinVoice: (self: VoiceChatService) -> (),
    leaveVoice: (self: VoiceChatService) -> (),
    rejoinVoice: (self: VoiceChatService) -> (),
    IsVoiceEnabledForUserIdAsync: (self: VoiceChatService, userId: buffer) -> boolean,
}

export type WebSocketClient = Instance & {
    ConnectionState: enum.Enum_WebSocketState,
    Close: (self: WebSocketClient) -> (),
    Send: (self: WebSocketClient, data: string) -> (),
}

export type WebSocketService = Instance & {
    CreateClient: (self: WebSocketService, uri: string) -> WebSocketClient,
}

export type WebViewService = Instance & {
    CloseWindow: (self: WebViewService) -> (),
    MutateWindow: (self: WebViewService, url: string, title: string, isVisible: boolean, searchType: string, transitionAnimation: string, showDomainAsTitle: boolean) -> (),
    OpenWindow: (self: WebViewService, url: string, title: string, isVisible: boolean, searchType: string, transitionAnimation: string, showDomainAsTitle: boolean) -> (),
    IsAvailable: (self: WebViewService) -> boolean,
}

export type WeldConstraint = Instance & {
    Active: boolean,
    CFrame0: datatypes.CFrame,
    CFrame1: datatypes.CFrame,
    Enabled: boolean,
    Part0: BasePart,
    Part0Internal: BasePart,
    Part1: BasePart,
    Part1Internal: BasePart,
    State: number,
}

export type Wire = Instance & {
    Connected: boolean,
    SourceInstance: any,
    SourceName: string,
    TargetInstance: any,
    TargetName: string,
    RenameToDefault: (self: Wire) -> (),
}

export type NewConstructor = 
    & (("AccessoryDescription", parent: Instance?) -> AccessoryDescription)
    & (("Accoutrement", parent: Instance?) -> Accoutrement)
    & (("Accessory", parent: Instance?) -> Accessory)
    & (("Hat", parent: Instance?) -> Hat)
    & (("AdPortal", parent: Instance?) -> AdPortal)
    & (("AdvancedDragger", parent: Instance?) -> AdvancedDragger)
    & (("Animation", parent: Instance?) -> Animation)
    & (("CurveAnimation", parent: Instance?) -> CurveAnimation)
    & (("KeyframeSequence", parent: Instance?) -> KeyframeSequence)
    & (("AnimationController", parent: Instance?) -> AnimationController)
    & (("AnimationRigData", parent: Instance?) -> AnimationRigData)
    & (("Animator", parent: Instance?) -> Animator)
    & (("Annotation", parent: Instance?) -> Annotation)
    & (("WorkspaceAnnotation", parent: Instance?) -> WorkspaceAnnotation)
    & (("Atmosphere", parent: Instance?) -> Atmosphere)
    & (("Attachment", parent: Instance?) -> Attachment)
    & (("Bone", parent: Instance?) -> Bone)
    & (("AudioAnalyzer", parent: Instance?) -> AudioAnalyzer)
    & (("AudioChannelMixer", parent: Instance?) -> AudioChannelMixer)
    & (("AudioChannelSplitter", parent: Instance?) -> AudioChannelSplitter)
    & (("AudioChorus", parent: Instance?) -> AudioChorus)
    & (("AudioCompressor", parent: Instance?) -> AudioCompressor)
    & (("AudioDeviceInput", parent: Instance?) -> AudioDeviceInput)
    & (("AudioDeviceOutput", parent: Instance?) -> AudioDeviceOutput)
    & (("AudioDistortion", parent: Instance?) -> AudioDistortion)
    & (("AudioEcho", parent: Instance?) -> AudioEcho)
    & (("AudioEmitter", parent: Instance?) -> AudioEmitter)
    & (("AudioEqualizer", parent: Instance?) -> AudioEqualizer)
    & (("AudioFader", parent: Instance?) -> AudioFader)
    & (("AudioFilter", parent: Instance?) -> AudioFilter)
    & (("AudioFlanger", parent: Instance?) -> AudioFlanger)
    & (("AudioLimiter", parent: Instance?) -> AudioLimiter)
    & (("AudioListener", parent: Instance?) -> AudioListener)
    & (("AudioPitchShifter", parent: Instance?) -> AudioPitchShifter)
    & (("AudioPlayer", parent: Instance?) -> AudioPlayer)
    & (("AudioReverb", parent: Instance?) -> AudioReverb)
    & (("AudioSearchParams", parent: Instance?) -> AudioSearchParams)
    & (("AudioTextToSpeech", parent: Instance?) -> AudioTextToSpeech)
    & (("Backpack", parent: Instance?) -> Backpack)
    & (("RemoteEvent", parent: Instance?) -> RemoteEvent)
    & (("UnreliableRemoteEvent", parent: Instance?) -> UnreliableRemoteEvent)
    & (("WrapDeformer", parent: Instance?) -> WrapDeformer)
    & (("WrapLayer", parent: Instance?) -> WrapLayer)
    & (("WrapTarget", parent: Instance?) -> WrapTarget)
    & (("Beam", parent: Instance?) -> Beam)
    & (("BindableEvent", parent: Instance?) -> BindableEvent)
    & (("BindableFunction", parent: Instance?) -> BindableFunction)
    & (("BodyAngularVelocity", parent: Instance?) -> BodyAngularVelocity)
    & (("BodyForce", parent: Instance?) -> BodyForce)
    & (("BodyGyro", parent: Instance?) -> BodyGyro)
    & (("BodyPosition", parent: Instance?) -> BodyPosition)
    & (("BodyThrust", parent: Instance?) -> BodyThrust)
    & (("BodyVelocity", parent: Instance?) -> BodyVelocity)
    & (("RocketPropulsion", parent: Instance?) -> RocketPropulsion)
    & (("BodyPartDescription", parent: Instance?) -> BodyPartDescription)
    & (("Breakpoint", parent: Instance?) -> Breakpoint)
    & (("BodyColors", parent: Instance?) -> BodyColors)
    & (("CharacterMesh", parent: Instance?) -> CharacterMesh)
    & (("Pants", parent: Instance?) -> Pants)
    & (("Shirt", parent: Instance?) -> Shirt)
    & (("ShirtGraphic", parent: Instance?) -> ShirtGraphic)
    & (("Skin", parent: Instance?) -> Skin)
    & (("ClickDetector", parent: Instance?) -> ClickDetector)
    & (("DragDetector", parent: Instance?) -> DragDetector)
    & (("Clouds", parent: Instance?) -> Clouds)
    & (("Configuration", parent: Instance?) -> Configuration)
    & (("AlignOrientation", parent: Instance?) -> AlignOrientation)
    & (("AlignPosition", parent: Instance?) -> AlignPosition)
    & (("AngularVelocity", parent: Instance?) -> AngularVelocity)
    & (("AnimationConstraint", parent: Instance?) -> AnimationConstraint)
    & (("BallSocketConstraint", parent: Instance?) -> BallSocketConstraint)
    & (("HingeConstraint", parent: Instance?) -> HingeConstraint)
    & (("LineForce", parent: Instance?) -> LineForce)
    & (("LinearVelocity", parent: Instance?) -> LinearVelocity)
    & (("PlaneConstraint", parent: Instance?) -> PlaneConstraint)
    & (("Plane", parent: Instance?) -> Plane)
    & (("RigidConstraint", parent: Instance?) -> RigidConstraint)
    & (("RodConstraint", parent: Instance?) -> RodConstraint)
    & (("RopeConstraint", parent: Instance?) -> RopeConstraint)
    & (("CylindricalConstraint", parent: Instance?) -> CylindricalConstraint)
    & (("PrismaticConstraint", parent: Instance?) -> PrismaticConstraint)
    & (("SpringConstraint", parent: Instance?) -> SpringConstraint)
    & (("Torque", parent: Instance?) -> Torque)
    & (("TorsionSpringConstraint", parent: Instance?) -> TorsionSpringConstraint)
    & (("UniversalConstraint", parent: Instance?) -> UniversalConstraint)
    & (("VectorForce", parent: Instance?) -> VectorForce)
    & (("HumanoidController", parent: Instance?) -> HumanoidController)
    & (("SkateboardController", parent: Instance?) -> SkateboardController)
    & (("VehicleController", parent: Instance?) -> VehicleController)
    & (("AirController", parent: Instance?) -> AirController)
    & (("ClimbController", parent: Instance?) -> ClimbController)
    & (("GroundController", parent: Instance?) -> GroundController)
    & (("SwimController", parent: Instance?) -> SwimController)
    & (("ControllerManager", parent: Instance?) -> ControllerManager)
    & (("CustomEvent", parent: Instance?) -> CustomEvent)
    & (("CustomEventReceiver", parent: Instance?) -> CustomEventReceiver)
    & (("CustomLog", parent: Instance?) -> CustomLog)
    & (("BlockMesh", parent: Instance?) -> BlockMesh)
    & (("CylinderMesh", parent: Instance?) -> CylinderMesh)
    & (("FileMesh", parent: Instance?) -> FileMesh)
    & (("SpecialMesh", parent: Instance?) -> SpecialMesh)
    & (("DataStoreGetOptions", parent: Instance?) -> DataStoreGetOptions)
    & (("DataStoreIncrementOptions", parent: Instance?) -> DataStoreIncrementOptions)
    & (("DataStoreOptions", parent: Instance?) -> DataStoreOptions)
    & (("DataStoreSetOptions", parent: Instance?) -> DataStoreSetOptions)
    & (("DebuggerWatch", parent: Instance?) -> DebuggerWatch)
    & (("Dialog", parent: Instance?) -> Dialog)
    & (("DialogChoice", parent: Instance?) -> DialogChoice)
    & (("Dragger", parent: Instance?) -> Dragger)
    & (("EulerRotationCurve", parent: Instance?) -> EulerRotationCurve)
    & (("ExperienceInviteOptions", parent: Instance?) -> ExperienceInviteOptions)
    & (("ExplorerFilter", parent: Instance?) -> ExplorerFilter)
    & (("Explosion", parent: Instance?) -> Explosion)
    & (("FaceControls", parent: Instance?) -> FaceControls)
    & (("Decal", parent: Instance?) -> Decal)
    & (("Texture", parent: Instance?) -> Texture)
    & (("Hole", parent: Instance?) -> Hole)
    & (("MotorFeature", parent: Instance?) -> MotorFeature)
    & (("Fire", parent: Instance?) -> Fire)
    & (("FloatCurve", parent: Instance?) -> FloatCurve)
    & (("FlyweightService", parent: Instance?) -> FlyweightService)
    & (("CSGDictionaryService", parent: Instance?) -> CSGDictionaryService)
    & (("NonReplicatedCSGDictionaryService", parent: Instance?) -> NonReplicatedCSGDictionaryService)
    & (("Folder", parent: Instance?) -> Folder)
    & (("ForceField", parent: Instance?) -> ForceField)
    & (("FunctionalTest", parent: Instance?) -> FunctionalTest)
    & (("GetTextBoundsParams", parent: Instance?) -> GetTextBoundsParams)
    & (("CanvasGroup", parent: Instance?) -> CanvasGroup)
    & (("Frame", parent: Instance?) -> Frame)
    & (("ImageButton", parent: Instance?) -> ImageButton)
    & (("TextButton", parent: Instance?) -> TextButton)
    & (("ImageLabel", parent: Instance?) -> ImageLabel)
    & (("TextLabel", parent: Instance?) -> TextLabel)
    & (("RelativeGui", parent: Instance?) -> RelativeGui)
    & (("ScrollingFrame", parent: Instance?) -> ScrollingFrame)
    & (("TextBox", parent: Instance?) -> TextBox)
    & (("VideoDisplay", parent: Instance?) -> VideoDisplay)
    & (("VideoFrame", parent: Instance?) -> VideoFrame)
    & (("ViewportFrame", parent: Instance?) -> ViewportFrame)
    & (("BillboardGui", parent: Instance?) -> BillboardGui)
    & (("ScreenGui", parent: Instance?) -> ScreenGui)
    & (("GuiMain", parent: Instance?) -> GuiMain)
    & (("AdGui", parent: Instance?) -> AdGui)
    & (("SurfaceGui", parent: Instance?) -> SurfaceGui)
    & (("FloorWire", parent: Instance?) -> FloorWire)
    & (("SelectionBox", parent: Instance?) -> SelectionBox)
    & (("BoxHandleAdornment", parent: Instance?) -> BoxHandleAdornment)
    & (("ConeHandleAdornment", parent: Instance?) -> ConeHandleAdornment)
    & (("CylinderHandleAdornment", parent: Instance?) -> CylinderHandleAdornment)
    & (("ImageHandleAdornment", parent: Instance?) -> ImageHandleAdornment)
    & (("LineHandleAdornment", parent: Instance?) -> LineHandleAdornment)
    & (("SphereHandleAdornment", parent: Instance?) -> SphereHandleAdornment)
    & (("WireframeHandleAdornment", parent: Instance?) -> WireframeHandleAdornment)
    & (("ParabolaAdornment", parent: Instance?) -> ParabolaAdornment)
    & (("SelectionSphere", parent: Instance?) -> SelectionSphere)
    & (("ArcHandles", parent: Instance?) -> ArcHandles)
    & (("Handles", parent: Instance?) -> Handles)
    & (("SurfaceSelection", parent: Instance?) -> SurfaceSelection)
    & (("SelectionPartLasso", parent: Instance?) -> SelectionPartLasso)
    & (("SelectionPointLasso", parent: Instance?) -> SelectionPointLasso)
    & (("Path2D", parent: Instance?) -> Path2D)
    & (("HapticEffect", parent: Instance?) -> HapticEffect)
    & (("HeightmapImporterService", parent: Instance?) -> HeightmapImporterService)
    & (("HiddenSurfaceRemovalAsset", parent: Instance?) -> HiddenSurfaceRemovalAsset)
    & (("Highlight", parent: Instance?) -> Highlight)
    & (("Humanoid", parent: Instance?) -> Humanoid)
    & (("HumanoidDescription", parent: Instance?) -> HumanoidDescription)
    & (("HumanoidRigDescription", parent: Instance?) -> HumanoidRigDescription)
    & (("IKControl", parent: Instance?) -> IKControl)
    & (("InputAction", parent: Instance?) -> InputAction)
    & (("InputBinding", parent: Instance?) -> InputBinding)
    & (("InputContext", parent: Instance?) -> InputContext)
    & (("InternalSyncItem", parent: Instance?) -> InternalSyncItem)
    & (("RotateP", parent: Instance?) -> RotateP)
    & (("RotateV", parent: Instance?) -> RotateV)
    & (("Glue", parent: Instance?) -> Glue)
    & (("ManualGlue", parent: Instance?) -> ManualGlue)
    & (("ManualWeld", parent: Instance?) -> ManualWeld)
    & (("Motor", parent: Instance?) -> Motor)
    & (("Motor6D", parent: Instance?) -> Motor6D)
    & (("Rotate", parent: Instance?) -> Rotate)
    & (("Snap", parent: Instance?) -> Snap)
    & (("VelocityMotor", parent: Instance?) -> VelocityMotor)
    & (("Weld", parent: Instance?) -> Weld)
    & (("Keyframe", parent: Instance?) -> Keyframe)
    & (("KeyframeMarker", parent: Instance?) -> KeyframeMarker)
    & (("PointLight", parent: Instance?) -> PointLight)
    & (("SpotLight", parent: Instance?) -> SpotLight)
    & (("SurfaceLight", parent: Instance?) -> SurfaceLight)
    & (("LocalizationTable", parent: Instance?) -> LocalizationTable)
    & (("AuroraScript", parent: Instance?) -> AuroraScript)
    & (("Script", parent: Instance?) -> Script)
    & (("LocalScript", parent: Instance?) -> LocalScript)
    & (("ModuleScript", parent: Instance?) -> ModuleScript)
    & (("MarkerCurve", parent: Instance?) -> MarkerCurve)
    & (("MaterialVariant", parent: Instance?) -> MaterialVariant)
    & (("MemoryStoreService", parent: Instance?) -> MemoryStoreService)
    & (("Message", parent: Instance?) -> Message)
    & (("Hint", parent: Instance?) -> Hint)
    & (("NoCollisionConstraint", parent: Instance?) -> NoCollisionConstraint)
    & (("Noise", parent: Instance?) -> Noise)
    & (("OperationGraph", parent: Instance?) -> OperationGraph)
    & (("CornerWedgePart", parent: Instance?) -> CornerWedgePart)
    & (("Part", parent: Instance?) -> Part)
    & (("FlagStand", parent: Instance?) -> FlagStand)
    & (("Seat", parent: Instance?) -> Seat)
    & (("SkateboardPlatform", parent: Instance?) -> SkateboardPlatform)
    & (("SpawnLocation", parent: Instance?) -> SpawnLocation)
    & (("WedgePart", parent: Instance?) -> WedgePart)
    & (("MeshPart", parent: Instance?) -> MeshPart)
    & (("PartOperation", parent: Instance?) -> PartOperation)
    & (("IntersectOperation", parent: Instance?) -> IntersectOperation)
    & (("NegateOperation", parent: Instance?) -> NegateOperation)
    & (("UnionOperation", parent: Instance?) -> UnionOperation)
    & (("TrussPart", parent: Instance?) -> TrussPart)
    & (("VehicleSeat", parent: Instance?) -> VehicleSeat)
    & (("Camera", parent: Instance?) -> Camera)
    & (("Model", parent: Instance?) -> Model)
    & (("Actor", parent: Instance?) -> Actor)
    & (("HopperBin", parent: Instance?) -> HopperBin)
    & (("Tool", parent: Instance?) -> Tool)
    & (("Flag", parent: Instance?) -> Flag)
    & (("WorldModel", parent: Instance?) -> WorldModel)
    & (("PartOperationAsset", parent: Instance?) -> PartOperationAsset)
    & (("ParticleEmitter", parent: Instance?) -> ParticleEmitter)
    & (("PathfindingLink", parent: Instance?) -> PathfindingLink)
    & (("PathfindingModifier", parent: Instance?) -> PathfindingModifier)
    & (("Player", parent: Instance?) -> Player)
    & (("PluginAction", parent: Instance?) -> PluginAction)
    & (("PluginCapabilities", parent: Instance?) -> PluginCapabilities)
    & (("NumberPose", parent: Instance?) -> NumberPose)
    & (("Pose", parent: Instance?) -> Pose)
    & (("BloomEffect", parent: Instance?) -> BloomEffect)
    & (("BlurEffect", parent: Instance?) -> BlurEffect)
    & (("ColorCorrectionEffect", parent: Instance?) -> ColorCorrectionEffect)
    & (("ColorGradingEffect", parent: Instance?) -> ColorGradingEffect)
    & (("DepthOfFieldEffect", parent: Instance?) -> DepthOfFieldEffect)
    & (("SunRaysEffect", parent: Instance?) -> SunRaysEffect)
    & (("ProximityPrompt", parent: Instance?) -> ProximityPrompt)
    & (("ProximityPromptService", parent: Instance?) -> ProximityPromptService)
    & (("RTAnimationTracker", parent: Instance?) -> RTAnimationTracker)
    & (("ReflectionMetadata", parent: Instance?) -> ReflectionMetadata)
    & (("ReflectionMetadataCallbacks", parent: Instance?) -> ReflectionMetadataCallbacks)
    & (("ReflectionMetadataClasses", parent: Instance?) -> ReflectionMetadataClasses)
    & (("ReflectionMetadataEnums", parent: Instance?) -> ReflectionMetadataEnums)
    & (("ReflectionMetadataEvents", parent: Instance?) -> ReflectionMetadataEvents)
    & (("ReflectionMetadataFunctions", parent: Instance?) -> ReflectionMetadataFunctions)
    & (("ReflectionMetadataClass", parent: Instance?) -> ReflectionMetadataClass)
    & (("ReflectionMetadataEnum", parent: Instance?) -> ReflectionMetadataEnum)
    & (("ReflectionMetadataEnumItem", parent: Instance?) -> ReflectionMetadataEnumItem)
    & (("ReflectionMetadataMember", parent: Instance?) -> ReflectionMetadataMember)
    & (("ReflectionMetadataProperties", parent: Instance?) -> ReflectionMetadataProperties)
    & (("ReflectionMetadataYieldFunctions", parent: Instance?) -> ReflectionMetadataYieldFunctions)
    & (("RemoteFunction", parent: Instance?) -> RemoteFunction)
    & (("RenderingTest", parent: Instance?) -> RenderingTest)
    & (("RotationCurve", parent: Instance?) -> RotationCurve)
    & (("AtmosphereSensor", parent: Instance?) -> AtmosphereSensor)
    & (("BuoyancySensor", parent: Instance?) -> BuoyancySensor)
    & (("ControllerPartSensor", parent: Instance?) -> ControllerPartSensor)
    & (("FluidForceSensor", parent: Instance?) -> FluidForceSensor)
    & (("Sky", parent: Instance?) -> Sky)
    & (("Smoke", parent: Instance?) -> Smoke)
    & (("Sound", parent: Instance?) -> Sound)
    & (("ChorusSoundEffect", parent: Instance?) -> ChorusSoundEffect)
    & (("CompressorSoundEffect", parent: Instance?) -> CompressorSoundEffect)
    & (("DistortionSoundEffect", parent: Instance?) -> DistortionSoundEffect)
    & (("EchoSoundEffect", parent: Instance?) -> EchoSoundEffect)
    & (("EqualizerSoundEffect", parent: Instance?) -> EqualizerSoundEffect)
    & (("FlangeSoundEffect", parent: Instance?) -> FlangeSoundEffect)
    & (("PitchShiftSoundEffect", parent: Instance?) -> PitchShiftSoundEffect)
    & (("ReverbSoundEffect", parent: Instance?) -> ReverbSoundEffect)
    & (("TremoloSoundEffect", parent: Instance?) -> TremoloSoundEffect)
    & (("SoundGroup", parent: Instance?) -> SoundGroup)
    & (("Sparkles", parent: Instance?) -> Sparkles)
    & (("StandalonePluginScripts", parent: Instance?) -> StandalonePluginScripts)
    & (("StarterGear", parent: Instance?) -> StarterGear)
    & (("StudioAttachment", parent: Instance?) -> StudioAttachment)
    & (("StudioCallout", parent: Instance?) -> StudioCallout)
    & (("StyleRule", parent: Instance?) -> StyleRule)
    & (("StyleSheet", parent: Instance?) -> StyleSheet)
    & (("StyleDerive", parent: Instance?) -> StyleDerive)
    & (("StyleLink", parent: Instance?) -> StyleLink)
    & (("SurfaceAppearance", parent: Instance?) -> SurfaceAppearance)
    & (("Team", parent: Instance?) -> Team)
    & (("TeleportOptions", parent: Instance?) -> TeleportOptions)
    & (("TerrainDetail", parent: Instance?) -> TerrainDetail)
    & (("TerrainRegion", parent: Instance?) -> TerrainRegion)
    & (("TestService", parent: Instance?) -> TestService)
    & (("TextChannel", parent: Instance?) -> TextChannel)
    & (("TextChatCommand", parent: Instance?) -> TextChatCommand)
    & (("TextChatMessageProperties", parent: Instance?) -> TextChatMessageProperties)
    & (("BubbleChatMessageProperties", parent: Instance?) -> BubbleChatMessageProperties)
    & (("TrackerStreamAnimation", parent: Instance?) -> TrackerStreamAnimation)
    & (("Trail", parent: Instance?) -> Trail)
    & (("Tween", parent: Instance?) -> Tween)
    & (("UIAspectRatioConstraint", parent: Instance?) -> UIAspectRatioConstraint)
    & (("UISizeConstraint", parent: Instance?) -> UISizeConstraint)
    & (("UITextSizeConstraint", parent: Instance?) -> UITextSizeConstraint)
    & (("UICorner", parent: Instance?) -> UICorner)
    & (("UIDragDetector", parent: Instance?) -> UIDragDetector)
    & (("UIFlexItem", parent: Instance?) -> UIFlexItem)
    & (("UIGradient", parent: Instance?) -> UIGradient)
    & (("UIGridLayout", parent: Instance?) -> UIGridLayout)
    & (("UIListLayout", parent: Instance?) -> UIListLayout)
    & (("UIPageLayout", parent: Instance?) -> UIPageLayout)
    & (("UITableLayout", parent: Instance?) -> UITableLayout)
    & (("UIPadding", parent: Instance?) -> UIPadding)
    & (("UIScale", parent: Instance?) -> UIScale)
    & (("UIStroke", parent: Instance?) -> UIStroke)
    & (("BinaryStringValue", parent: Instance?) -> BinaryStringValue)
    & (("BoolValue", parent: Instance?) -> BoolValue)
    & (("BrickColorValue", parent: Instance?) -> BrickColorValue)
    & (("CFrameValue", parent: Instance?) -> CFrameValue)
    & (("Color3Value", parent: Instance?) -> Color3Value)
    & (("DoubleConstrainedValue", parent: Instance?) -> DoubleConstrainedValue)
    & (("IntConstrainedValue", parent: Instance?) -> IntConstrainedValue)
    & (("IntValue", parent: Instance?) -> IntValue)
    & (("NumberValue", parent: Instance?) -> NumberValue)
    & (("ObjectValue", parent: Instance?) -> ObjectValue)
    & (("RayValue", parent: Instance?) -> RayValue)
    & (("StringValue", parent: Instance?) -> StringValue)
    & (("Vector3Value", parent: Instance?) -> Vector3Value)
    & (("Vector3Curve", parent: Instance?) -> Vector3Curve)
    & (("VideoDeviceInput", parent: Instance?) -> VideoDeviceInput)
    & (("VideoPlayer", parent: Instance?) -> VideoPlayer)
    & (("VirtualInputManager", parent: Instance?) -> VirtualInputManager)
    & (("VisualizationMode", parent: Instance?) -> VisualizationMode)
    & (("VisualizationModeCategory", parent: Instance?) -> VisualizationModeCategory)
    & (("WeldConstraint", parent: Instance?) -> WeldConstraint)
    & (("Wire", parent: Instance?) -> Wire)
return nil;